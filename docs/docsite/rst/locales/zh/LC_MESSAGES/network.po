# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019 Red Hat, Inc.
# This file is distributed under the same license as the Ansible package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible devel\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-04 13:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:7
msgid "Developing network plugins"
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:9
msgid "You can extend the existing network modules with custom plugins in your collection."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:15
msgid "Network connection plugins"
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:16
msgid "Each network connection plugin has a set of its own plugins which provide a specification of the connection for a particular set of devices. The specific plugin used is selected at runtime based on the value of the ``ansible_network_os`` variable assigned to the host. This variable should be set to the same value as the name of the plugin to be loaded. Thus, ``ansible_network_os=nxos`` will try to load a plugin in a file named ``nxos.py``, so it is important to name the plugin in a way that will be sensible to users."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:23
msgid "Public methods of these plugins may be called from a module or module_utils with the connection proxy object just as other connection methods can. The following is a very simple example of using such a call in a module_utils file so it may be shared with other modules."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:45
msgid "Developing httpapi plugins"
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:47
msgid ":ref:`httpapi plugins <httpapi_plugins>` serve as adapters for various HTTP(S) APIs for use with the ``httpapi`` connection plugin. They should implement a minimal set of convenience methods tailored to the API you are attempting to use."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:49
msgid "Specifically, there are a few methods that the ``httpapi`` connection plugin expects to exist."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:52
msgid "Making requests"
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:54
msgid "The ``httpapi`` connection plugin has a ``send()`` method, but an httpapi plugin needs a ``send_request(self, data, **message_kwargs)`` method as a higher-level wrapper to ``send()``. This method should prepare requests by adding fixed values like common headers or URL root paths. This method may do more complex work such as turning data into formatted payloads, or determining which path or method to request. It may then also unpack responses to be more easily consumed by the caller."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:74
msgid "Authenticating"
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:76
msgid "By default, all requests will authenticate with HTTP Basic authentication. If a request can return some kind of token to stand in place of HTTP Basic, the ``update_auth(self, response, response_text)`` method should be implemented to inspect responses for such tokens. If the token is meant to be included with the headers of each request, it is sufficient to return a dictionary which will be merged with the computed headers for each request. The default implementation of this method does exactly this for cookies. If the token is used in another way, say in a query string, you should instead save that token to an instance variable, where the ``send_request()`` method (above) can add it to each request"
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:87
msgid "If instead an explicit login endpoint needs to be requested to receive an authentication token, the ``login(self, username, password)`` method can be implemented to call that endpoint. If implemented, this method will be called once before requesting any other resources of the server. By default, it will also be attempted once when a HTTP 401 is returned from a request."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:105
msgid "Similarly, ``logout(self)`` can be implemented to call an endpoint to invalidate and/or release the current token, if such an endpoint exists. This will be automatically called when the connection is closed (and, by extension, when reset)."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:117
msgid "Error handling"
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:119
msgid "The ``handle_httperror(self, exception)`` method can deal with status codes returned by the server. The return value indicates how the plugin will continue with the request:"
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:121
msgid "A value of ``true`` means that the request can be retried. This my be used to indicate a transient error, or one that has been resolved. For example, the default implementation will try to call ``login()`` when presented with a 401, and return ``true`` if successful."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:123
msgid "A value of ``false`` means that the plugin is unable to recover from this response. The status code will be raised as an exception to the calling module."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:125
msgid "Any other value will be taken as a nonfatal response from the request. This may be useful if the server returns error messages in the body of the response. Returning the original exception is usually sufficient in this case, as HTTPError objects have the same interface as a successful response."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:127
msgid "For example httpapi plugins, see the `source code for the httpapi plugins <https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/httpapi>`_ included with Ansible Core."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:132
msgid "Developing NETCONF plugins"
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:134
msgid "The :ref:`netconf <netconf_connection>` connection plugin provides a connection to remote devices over the ``SSH NETCONF`` subsystem. Network devices typically use this connection plugin to send and receive ``RPC`` calls over ``NETCONF``."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:136
msgid "The ``netconf`` connection plugin uses the ``ncclient`` Python library under the hood to initiate a NETCONF session with a NETCONF-enabled remote network device. ``ncclient`` also executes NETCONF RPC requests and receives responses. You must install the ``ncclient`` on the local Ansible controller."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:138
msgid "To use the ``netconf`` connection plugin for network devices that support standard NETCONF (:RFC:`6241`) operations such as ``get``, ``get-config``, ``edit-config``, set ``ansible_network_os=default``. You can use :ref:`netconf_get <netconf_get_module>`, :ref:`netconf_config <netconf_config_module>` and :ref:`netconf_rpc <netconf_rpc_module>` modules to talk to a NETCONF enabled remote host."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:141
msgid "As a contributor and user, you should be able to use all the methods under the ``NetconfBase`` class if your device supports standard NETCONF. You can contribute a new plugin if the device you are working with has a vendor specific NETCONF RPC. To support a vendor specific NETCONF RPC, add the implementation in the network OS specific NETCONF plugin."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:144
msgid "For Junos for example:"
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:146
msgid "See the vendor-specific Junos RPC methods implemented in ``plugins/netconf/junos.py``."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:147
msgid "Set the value of ``ansible_network_os`` to the name of the netconf plugin file, that is ``junos`` in this case."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:152
msgid "Developing network_cli plugins"
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:154
msgid "The :ref:`network_cli <network_cli_connection>` connection type uses ``paramiko_ssh`` under the hood which creates a pseudo terminal to send commands and receive responses. ``network_cli`` loads two platform specific plugins based on the value of ``ansible_network_os``:"
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:157
msgid "Terminal plugin (for example ``plugins/terminal/ios.py``) - Controls the parameters related to terminal, such as setting terminal length and width, page disabling and privilege escalation. Also defines regex to identify the command prompt and error prompts."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:159
msgid ":ref:`cliconf_plugins` (for example, :ref:`ios cliconf <ios_cliconf>`) - Provides an abstraction layer for low level send and receive operations. For example, the ``edit_config()`` method ensures that the prompt is in ``config`` mode before executing configuration commands."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:161
msgid "To contribute a new network operating system to work with the ``network_cli`` connection, implement the ``cliconf`` and ``terminal`` plugins for that network OS."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:163
msgid "The plugins can reside in:"
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:165
msgid "Adjacent to playbook in folders"
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:172
msgid "Roles"
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:179
#: ../../rst/shared_snippets/basic_concepts.txt:17
msgid "Collections"
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:186
msgid "The user can also set the :ref:`DEFAULT_CLICONF_PLUGIN_PATH`  to configure the ``cliconf`` plugin path."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:188
msgid "After adding the ``cliconf`` and ``terminal`` plugins in the expected locations, users can:"
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:190
msgid "Use the :ref:`cli_command <cli_command_module>` to run an arbitrary command on the network device."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:191
msgid "Use the :ref:`cli_config <cli_config_module>` to  implement configuration changes on the remote hosts without platform-specific modules."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:197
msgid "Developing cli_parser plugins in a collection"
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:199
msgid "You can use ``cli_parse`` as an entry point for a cli_parser plugin in your own collection."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:202
msgid "The following sample shows the start of a custom cli_parser plugin:"
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:245
msgid "The following task uses this custom cli_parser plugin:"
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:255
msgid "To develop a custom plugin: - Each cli_parser plugin requires a ``CliParser`` class. - Each cli_parser plugin requires a ``parse`` function. - Always return a dictionary with ``errors`` or ``parsed``. - Place the custom cli_parser in plugins/cli_parsers directory of the collection. - See the `current cli_parsers <https://github.com/ansible-collections/ansible.netcommon/tree/main/plugins/cli_parsers>`_ for examples to follow."
msgstr ""

#: ../../rst/network/dev_guide/developing_plugins_network.rst:265
msgid ":ref:`cli_parsing`"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:6
msgid "Developing network resource modules"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:13
msgid "Understanding network and security resource modules"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:15
msgid "Network and security devices separate configuration into sections (such as interfaces, VLANs, and so on) that apply to a network or security service. Ansible resource modules take advantage of this to allow users to configure subsections or resources within the device configuration. Resource modules provide a consistent experience across different network and security devices. For example, a network resource module may only update the configuration for a specific portion of the network interfaces, VLANs, ACLs, and so on for a network device. The resource module:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:17
msgid "Fetches a piece of the configuration (fact gathering), for example, the interfaces configuration."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:18
msgid "Converts the returned configuration into key-value pairs."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:19
msgid "Places those key-value pairs into an internal agnostic structured data format."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:21
msgid "Now that the configuration data is normalized, the user can update and modify the data and then use the resource module to send the configuration data back to the device. This results in a full round-trip configuration update without the need for manual parsing, data manipulation, and data model management."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:23
msgid "The resource module has two top-level keys - ``config`` and ``state``:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:25
msgid "``config`` defines the resource configuration data model as key-value pairs.  The type of the ``config`` option can be ``dict`` or ``list of dict`` based on the resource managed.  That is, if the device has a single global configuration, it should be a ``dict`` (for example, a global LLDP configuration). If the device has multiple instances of configuration, it should be of type ``list`` with each element in the list of type ``dict`` (for example, interfaces configuration)."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:28
msgid "``state`` defines the action the resource module takes on the end device."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:30
msgid "The ``state`` for a new resource module should support the following values (as applicable for the devices that support them):"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:33
#: ../../rst/network/user_guide/network_resource_modules.rst:19
msgid "merged"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:33
#: ../../rst/network/user_guide/network_resource_modules.rst:19
msgid "Ansible merges the on-device configuration with the provided configuration in the task."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:36
#: ../../rst/network/user_guide/network_resource_modules.rst:22
msgid "replaced"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:36
#: ../../rst/network/user_guide/network_resource_modules.rst:22
msgid "Ansible replaces the on-device configuration subsection with the provided configuration subsection in the task."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:39
#: ../../rst/network/user_guide/network_resource_modules.rst:25
msgid "overridden"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:39
#: ../../rst/network/user_guide/network_resource_modules.rst:25
msgid "Ansible overrides the on-device configuration for the resource with the provided configuration in the task. Use caution with this state as you could remove your access to the device (for example, by overriding the management interface configuration)."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:42
#: ../../rst/network/user_guide/network_resource_modules.rst:28
msgid "deleted"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:42
#: ../../rst/network/user_guide/network_resource_modules.rst:28
msgid "Ansible deletes the on-device configuration subsection and restores any default settings."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:45
#: ../../rst/network/user_guide/network_resource_modules.rst:31
msgid "gathered"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:45
#: ../../rst/network/user_guide/network_resource_modules.rst:31
msgid "Ansible displays the resource details gathered from the network device and accessed with the ``gathered`` key in the result."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:48
#: ../../rst/network/user_guide/network_resource_modules.rst:34
msgid "rendered"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:48
#: ../../rst/network/user_guide/network_resource_modules.rst:34
msgid "Ansible renders the provided configuration in the task in the device-native format (for example, Cisco IOS CLI). Ansible returns this rendered configuration in the ``rendered`` key in the result. Note this state does not communicate with the network device and can be used offline."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:52
#: ../../rst/network/user_guide/network_resource_modules.rst:37
msgid "parsed"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:51
#: ../../rst/network/user_guide/network_resource_modules.rst:37
msgid "Ansible parses the configuration from the ``running_configuration`` option into Ansible structured data in the ``parsed`` key in the result. Note this does not gather the configuration from the network device so this state can be used offline."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:54
msgid "Modules in Ansible-maintained collections must support these state values. If you develop a module with only \"present\" and \"absent\" for state, you may submit it to a community collection."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:58
msgid "The states ``rendered``, ``gathered``, and ``parsed`` do not perform any change on the device."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:62
msgid "`Deep Dive on VLANs Resource Modules for Network Automation <https://www.ansible.com/blog/deep-dive-on-vlans-resource-modules-for-network-automation>`_"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:63
msgid "Walkthrough of how state values are implemented for VLANs."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:67
msgid "Developing network and security resource modules"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:69
msgid "The Ansible Engineering team ensures the module design and code pattern  within Ansible-maintained collections is uniform across resources and across platforms to give a vendor-agnostic feel and deliver good quality code. We recommend you use the `resource module builder <https://github.com/ansible-network/resource_module_builder>`_ to  develop a resource module."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:72
msgid "The highlevel process for developing a resource module is:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:74
msgid "Create and share a resource model design in the `resource module models repository <https://github.com/ansible-network/resource_module_models>`_ as a PR for review."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:75
msgid "Download the latest version of the `resource module builder <https://github.com/ansible-network/resource_module_builder>`_."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:76
msgid "Run the ``resource module builder`` to create a collection scaffold from your approved resource model."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:77
msgid "Write the code to implement your resource module."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:78
msgid "Develop integration and unit tests to verify your resource module."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:79
msgid "Create a PR to the appropriate collection that you want to add your new resource module to. See :ref:`contributing_maintained_collections` for details on determining the correct collection for your module."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:83
msgid "Understanding the model and resource module builder"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:85
msgid "The resource module builder is an Ansible Playbook that helps developers scaffold and maintain an Ansible resource module. It uses a model as the single source of truth for the module. This model is a ``yaml`` file that is used for the module DOCUMENTATION section and the argument spec."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:87
msgid "The resource module builder has the following capabilities:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:89
msgid "Uses a defined model to scaffold a resource module directory layout and initial class files."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:90
msgid "Scaffolds either an Ansible role or a collection."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:91
msgid "Subsequent uses of the resource module builder will only replace the module arspec and file containing the module docstring."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:92
msgid "Allows you to store complex examples along side the model in the same directory."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:93
msgid "Maintains the model as the source of truth for the module and use resource module builder to update the source files as needed."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:94
msgid "Generates working sample modules for both ``<network_os>_<resource>`` and ``<network_os>_facts``."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:97
msgid "Accessing the resource module builder"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:99
msgid "To access the resource module builder:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:101
msgid "clone the github repository:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:107
msgid "Install the requirements:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:114
msgid "Creating a model"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:116
msgid "You must create a model for your new resource. The model is the single source of truth for both the argspec and docstring, keeping them in sync. Once your model is approved, you can use the resource module builder to generate three items based on the model:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:118
msgid "The scaffold for a new module"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:119
msgid "The argspec for the new module"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:120
msgid "The docstring for the new module"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:122
msgid "For any subsequent changes to the functionality, update the model first and use the resource module builder to update the module argspec and docstring."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:124
msgid "For example, the resource model builder includes the ``myos_interfaces.yml`` sample in the :file:`models` directory, as seen below:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:196
msgid "Notice that you should include examples for each of the states that the resource supports. The resource module builder also includes these in the sample model."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:198
msgid "Share this model as a PR for review at `resource module models repository <https://github.com/ansible-network/resource_module_models>`_. You can also see more model examples at that location."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:202
msgid "Creating a collection scaffold from a resource model"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:204
msgid "To use the resource module builder to create a collection scaffold from your approved resource model:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:215
msgid "Where the parameters are as follows:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:217
msgid "``rm_dest``: The directory where the resource module builder places the files and directories for the resource module and facts modules."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:218
msgid "``structure``: The directory layout type (role or collection)"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:220
msgid "``role``: Generate a role directory layout."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:221
msgid "``collection``: Generate a collection directory layout."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:223
msgid "``collection_org``: The organization of the collection, required when `structure=collection`."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:224
msgid "``collection_name``: The name of the collection, required when `structure=collection`."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:225
msgid "``model``: The path to the model file."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:227
msgid "To use the resource module builder to create a role scaffold:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:237
msgid "Examples"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:240
msgid "Collection directory layout"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:242
msgid "This example shows the directory layout for the following:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:244
#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:306
msgid "``network_os``: myos"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:245
#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:307
msgid "``resource``: interfaces"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:302
msgid "Role directory layout"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:304
msgid "This example displays the role directory layout for the following:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:358
msgid "Using the collection"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:360
msgid "This example shows how to use the generated collection in a playbook:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:378
msgid "Using the role"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:380
msgid "This example shows how to use the generated role in a playbook:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:402
msgid "Resource module structure and workflow"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:404
msgid "The resource module structure includes the following components:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:413
msgid "Module"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:407
msgid "``library/<ansible_network_os>_<resource>.py``."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:408
msgid "Imports the ``module_utils`` resource package and calls ``execute_module`` API:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:417
msgid "Module argspec"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:416
msgid "``module_utils/<ansible_network_os>/argspec/<resource>/``."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:417
msgid "Argspec for the resource."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:423
msgid "Facts"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:420
msgid "``module_utils/<ansible_network_os>/facts/<resource>/``."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:421
msgid "Populate facts for the resource."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:422
msgid "Entry in ``module_utils/<ansible_network_os>/facts/facts.py`` for ``get_facts`` API to keep ``<ansible_network_os>_facts`` module and facts gathered for the resource module in sync for every subset."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:423
msgid "Entry of Resource subset in FACTS_RESOURCE_SUBSETS list in ``module_utils/<ansible_network_os>/facts/facts.py`` to make facts collection work."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:430
msgid "Module package in module_utils"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:426
msgid "``module_utils/<ansible_network_os>/<config>/<resource>/``."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:427
msgid "Implement ``execute_module`` API that loads the configuration to device and generates the result with ``changed``, ``commands``, ``before`` and ``after`` keys."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:428
msgid "Call ``get_facts`` API that returns the ``<resource>`` configuration facts or return the difference if the device has onbox diff support."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:429
msgid "Compare facts gathered and given key-values if diff is not supported."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:430
msgid "Generate final configuration."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:434
msgid "Utils"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:433
msgid "``module_utils/<ansible_network_os>/utils``."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:434
msgid "Utilities for the ``<ansible_network_os>`` platform."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:439
msgid "Running  ``ansible-test sanity`` and ``tox`` on resource modules"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:441
msgid "You should run ``ansible-test sanity`` and ``tox -elinters`` from the collection root directory before pushing your PR to an Ansible-maintained collection. The CI runs both and will fail if these tests fail. See :ref:`developing_testing` for details on ``ansible-test sanity``."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:443
msgid "To install the necessary packages:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:445
msgid "Ensure you have a valid Ansible development environment configured. See :ref:`environment_setup` for details."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:446
msgid "Run ``pip install -r requirements.txt`` from the collection root directory."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:449
msgid "Running ``tox -elinters``:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:451
msgid "Reads :file:`tox.ini` from the collection root directory and installs required dependencies (such as ``black`` and ``flake8``)."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:452
msgid "Runs these with preconfigured options (such as line-length and ignores.)"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:453
msgid "Runs  ``black`` in check mode to show  which files will be formatted without actually formatting them."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:456
msgid "Testing resource modules"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:458
msgid "The tests rely on a role generated by the resource module builder. After changes to the resource module builder, the role should be regenerated and the tests modified and run as needed. To generate the role after changes:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:472
msgid "Resource module integration tests"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:474
msgid "High-level integration test requirements for new resource modules are as follows:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:476
msgid "Write a test case for every state."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:477
msgid "Write additional test cases to test the behavior of the module when an empty ``config.yaml`` is given."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:478
msgid "Add a round trip test case. This involves a ``merge`` operation, followed by ``gather_facts``, a ``merge`` update with additional configuration, and then reverting back to the base configuration using the previously gathered facts with the ``state`` set to  ``overridden``."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:479
msgid "Wherever applicable, assertions should check after and before ``dicts`` against a hard coded Source of Truth."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:483
msgid "We use Zuul as the CI to run the integration test."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:485
msgid "To view the report, click :guilabel:`Details` on the CI comment in the PR"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:486
msgid "To view a failure report,  click :guilabel:`ansible/check` and select the failed test."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:487
msgid "To view logs while the test is running, check for your PR number in the `Zull status board <https://dashboard.zuul.ansible.com/t/ansible/status>`_."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:488
msgid "To fix static test failure locally, run the  :command:`tox -e black` **inside the root folder of collection**."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:490
msgid "To view The Ansible run logs and debug test failures:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:492
msgid "Click the failed job to get the summary, and click :guilabel:`Logs` for the log."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:493
msgid "Click :guilabel:`console` and scroll down to find the failed test."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:494
msgid "Click :guilabel:`>` next to the failed test for complete details."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:498
msgid "Integration test structure"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:500
msgid "Each test case should generally follow this pattern:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:502
msgid "setup —> test —> assert —> test again (for idempotency) —> assert —> tear down (if needed) -> done. This keeps test playbooks from becoming monolithic and difficult to troubleshoot."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:503
msgid "Include a name for each task that is not an assertion. You can add names to assertions as well, but it is easier to identify the broken task within a failed test if you add a name for each task."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:504
msgid "Files containing test cases must end in ``.yaml``"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:507
msgid "Implementation"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:509
msgid "For platforms that support ``connection: local`` *and* ``connection: network_cli``  use the following guidance:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:511
msgid "Name the :file:`targets/` directories after the module name."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:512
msgid "The :file:`main.yaml` file should just reference the transport."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:514
msgid "The following example walks through the integration tests for the ``vyos.vyos.vyos_l3_interfaces`` module in the `vyos.vyos <https://github.com/ansible-collections/vyos.vyos/tree/master/tests/integration>`_ collection:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:516
msgid "``test/integration/targets/vyos_l3_interfaces/tasks/main.yaml``"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:525
msgid "``test/integration/targets/vyos_l3_interfaces/tasks/cli.yaml``"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:552
msgid "``test/integration/targets/vyos_l3_interfaces/tests/cli/overridden.yaml``"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:620
msgid "Detecting test resources at runtime"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:622
msgid "Your tests should detect resources (such as interfaces) at runtime rather than hard-coding them into the test. This allows the test to run on a variety of systems."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:624
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:203
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:262
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:298
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:327
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:358
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:405
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:611
msgid "For example:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:648
msgid "See the complete test example of this at https://github.com/ansible-collections/cisco.nxos/blob/master/tests/integration/targets/prepare_nxos_tests/tasks/main.yml."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:652
msgid "Running network integration tests"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:654
msgid "Ansible uses Zuul to run an integration test suite on every PR, including new tests introduced by that PR. To find and fix problems in network modules, run the network integration test locally before you submit a PR."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:657
msgid "First, create an inventory file that points to your test machines. The inventory group should match the platform name (for example, ``eos``, ``ios``):"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:666
msgid "To run these network integration tests, use ``ansible-test network-integration --inventory </path/to/inventory> <tests_to_run>``:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:675
msgid "To run all network tests for a particular platform:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:681
msgid "This example will run against all ``vyos`` modules. Note that ``vyos_.*`` is a regex match, not a bash wildcard - include the `.` if you modify this example."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:683
msgid "To run integration tests for a specific module:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:689
msgid "To run a single test case on a specific module:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:696
msgid "To run integration tests for a specific transport:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:706
msgid "See `test/integration/targets/nxos_bgp/tasks/main.yaml <https://github.com/ansible-collections/cisco.nxos/blob/master/tests/integration/targets/nxos_bgp/tasks/main.yaml>`_ for how this is implemented in the tests."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:708
msgid "For more options:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:714
msgid "If you need additional help or feedback, reach out in ``#ansible-network`` on Freenode."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:717
msgid "Unit test requirements"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:719
msgid "High-level unit test requirements that new resource modules should follow:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:721
msgid "Write test cases for all the states with all possible combinations of config values."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:722
msgid "Write test cases to test the error conditions ( negative scenarios)."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:723
msgid "Check the  value of ``changed`` and ``commands`` keys in every test case."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:725
msgid "We run all unit test cases on our Zuul test suite, on the latest python version supported by our CI setup."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:727
msgid "Use the :ref:`same procedure <using_zuul_resource_modules>` as the integration tests to view Zuul unit tests reports and logs."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:729
msgid "See  :ref:`unit module testing <testing_units_modules>` for general unit test details."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:735
msgid "Example: Unit testing Ansible network resource modules"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:738
msgid "This section walks through an example of how to develop unit tests for Ansible resource modules."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:741
msgid "See :ref:`testing_units` and :ref:`testing_units_modules` for general documentation on Ansible unit tests for modules. Please read those pages first to understand unit tests and why and when you should use them."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:746
msgid "Using mock objects to unit test Ansible network resource modules"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:749
msgid "`Mock objects <https://docs.python.org/3/library/unittest.mock.html>`_ can be very useful in building unit tests for special or difficult cases, but they can also lead to complex and confusing coding situations.  One good use for mocks would be to simulate an API. The ``mock`` Python package is bundled with Ansible (use ``import units.compat.mock``)."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:755
msgid "You can mock the device connection and output from the device as follows:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:789
msgid "The facts file of the module now includes a new method, ``get_device_data``. Call ``get_device_data`` here to emulate the device output."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:793
msgid "Mocking device data"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:795
msgid "To mock fetching results from devices or provide other complex data structures that come from external libraries, you can use ``fixtures`` to read in pre-generated data. The text files for this pre-generated data live in ``test/units/modules/network/PLATFORM/fixtures/``. See for example the `eos_l2_interfaces.cfg file <https://github.com/ansible-collections/arista.eos/blob/master/tests/unit/modules/network/eos/fixtures/eos_l2_interfaces_config.cfg>`_."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:798
msgid "Load data using the ``load_fixture`` method and set this data as the return value of the ``get_device_data`` method in the facts file:"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:808
msgid "See the unit test file `test_eos_l2_interfaces <https://github.com/ansible-collections/arista.eos/blob/master/tests/unit/modules/network/eos/test_eos_l2_interfaces.py>`_ for a practical example."
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:814
msgid ":ref:`testing_units`"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:815
msgid "Deep dive into developing unit tests for Ansible modules"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:816
msgid ":ref:`testing_running_locally`"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:817
msgid "Running tests locally including gathering and reporting coverage data"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:818
msgid ":ref:`developing_modules_general`"
msgstr ""

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:819
msgid "Get started developing a module"
msgstr ""

#: ../../rst/network/dev_guide/documenting_modules_network.rst:6
msgid "Documenting new network platforms"
msgstr ""

#: ../../rst/network/dev_guide/documenting_modules_network.rst:11
msgid "When you create network modules for a new platform, or modify the connections provided by an existing network platform(such as ``network_cli`` and ``httpapi``), you also need to update  the :ref:`settings_by_platform` table and add or modify the Platform Options file for your platform."
msgstr ""

#: ../../rst/network/dev_guide/documenting_modules_network.rst:13
msgid "You should already have documented each module as described in :ref:`developing_modules_documenting`."
msgstr ""

#: ../../rst/network/dev_guide/documenting_modules_network.rst:16
msgid "Modifying the platform options table"
msgstr ""

#: ../../rst/network/dev_guide/documenting_modules_network.rst:18
msgid "The :ref:`settings_by_platform` table is a convenient summary of the connections options provided by each network platform that has modules in Ansible. Add a row for your platform to this table, in alphabetical order.  For example:"
msgstr ""

#: ../../rst/network/dev_guide/documenting_modules_network.rst:25
msgid "Ensure that the table stays formatted correctly. That is:"
msgstr ""

#: ../../rst/network/dev_guide/documenting_modules_network.rst:27
msgid "Each row is inserted in alphabetical order."
msgstr ""

#: ../../rst/network/dev_guide/documenting_modules_network.rst:28
msgid "The cell division ``|`` markers line up with the ``+`` markers."
msgstr ""

#: ../../rst/network/dev_guide/documenting_modules_network.rst:29
msgid "The check marks appear only for the connection types provided by the network modules."
msgstr ""

#: ../../rst/network/dev_guide/documenting_modules_network.rst:34
msgid "Adding a platform-specific options section"
msgstr ""

#: ../../rst/network/dev_guide/documenting_modules_network.rst:36
msgid "The platform- specific sections are individual ``.rst`` files that provide more detailed information for the users of your network platform modules.   Name your new file ``platform_<name>.rst`` (for example, ``platform_myos.rst``).  The platform name should match the module prefix. See `platform_eos.rst <https://github.com/ansible/ansible/blob/devel/docs/docsite/rst/network/user_guide/platform_eos.rst>`_ and :ref:`eos_platform_options` for an example of the details you should provide in your platform-specific options section."
msgstr ""

#: ../../rst/network/dev_guide/documenting_modules_network.rst:38
msgid "Your platform-specific section should include the following:"
msgstr ""

#: ../../rst/network/dev_guide/documenting_modules_network.rst:40
msgid "**Connections available table** - a deeper dive into each connection type, including details on credentials, indirect access, connections settings, and enable mode."
msgstr ""

#: ../../rst/network/dev_guide/documenting_modules_network.rst:41
msgid "**How to use each connection type** - with working examples of each connection type."
msgstr ""

#: ../../rst/network/dev_guide/documenting_modules_network.rst:43
msgid "If your network platform supports SSH connections, also include the following at the bottom of your ``.rst`` file:"
msgstr ""

#: ../../rst/network/dev_guide/documenting_modules_network.rst:50
msgid "Adding your new file to the table of contents"
msgstr ""

#: ../../rst/network/dev_guide/documenting_modules_network.rst:52
msgid "As a final step, add your new file in alphabetical order in the ``platform_index.rst`` file. You should then build the documentation to verify your additions. See :ref:`community_documentation_contributions` for more details."
msgstr ""

#: ../../rst/network/dev_guide/index.rst:5
msgid "Network Developer Guide"
msgstr ""

#: ../../rst/network/dev_guide/index.rst:7
msgid "Welcome to the Developer Guide for Ansible Network Automation!"
msgstr ""

#: ../../rst/network/dev_guide/index.rst:9
#: ../../rst/network/getting_started/index.rst:15
#: ../../rst/network/user_guide/index.rst:9
msgid "**Who should use this guide?**"
msgstr ""

#: ../../rst/network/dev_guide/index.rst:11
msgid "If you want to extend Ansible for Network Automation by creating a module or plugin, this guide is for you. This guide is specific to networking. You should already be familiar with how to create, test, and document modules and plugins, as well as the prerequisites for getting your module or plugin accepted into the main Ansible repository.  See the  :ref:`developer_guide` for details. Before you proceed, please read:"
msgstr ""

#: ../../rst/network/dev_guide/index.rst:13
msgid "How  to :ref:`add a custom plugin or module locally <developing_locally>`."
msgstr ""

#: ../../rst/network/dev_guide/index.rst:14
msgid "How to figure out if :ref:`developing a module is the right approach <module_dev_should_you>` for my use case."
msgstr ""

#: ../../rst/network/dev_guide/index.rst:15
msgid "How to :ref:`set up my Python development environment <environment_setup>`."
msgstr ""

#: ../../rst/network/dev_guide/index.rst:16
msgid "How to :ref:`get started writing a module <developing_modules_general>`."
msgstr ""

#: ../../rst/network/dev_guide/index.rst:19
msgid "Find the network developer task that best describes what you want to do:"
msgstr ""

#: ../../rst/network/dev_guide/index.rst:21
msgid "I want to :ref:`develop a network resource module <developing_resource_modules>`."
msgstr ""

#: ../../rst/network/dev_guide/index.rst:22
msgid "I want to :ref:`develop a network connection plugin <developing_plugins_network>`."
msgstr ""

#: ../../rst/network/dev_guide/index.rst:23
msgid "I want to :ref:`document my set of modules for a network platform <documenting_modules_network>`."
msgstr ""

#: ../../rst/network/dev_guide/index.rst:25
msgid "If you prefer to read the entire guide, here's a list of the pages in order."
msgstr ""

#: ../../rst/network/getting_started/basic_concepts.rst:3
msgid "Basic Concepts"
msgstr ""

#: ../../rst/network/getting_started/basic_concepts.rst:5
msgid "These concepts are common to all uses of Ansible, including network automation. You need to understand them to use Ansible for network automation. This basic introduction provides the background you need to follow the examples in this guide."
msgstr ""

#: ../../rst/shared_snippets/basic_concepts.txt:2
msgid "Control node"
msgstr ""

#: ../../rst/shared_snippets/basic_concepts.txt:4
msgid "Any machine with Ansible installed. You can run Ansible commands and playbooks by invoking the ``ansible`` or ``ansible-playbook`` command from any control node. You can use any computer that has a Python installation as a control node - laptops, shared desktops, and servers can all run Ansible. However, you cannot use a Windows machine as a control node. You can have multiple control nodes."
msgstr ""

#: ../../rst/shared_snippets/basic_concepts.txt:7
msgid "Managed nodes"
msgstr ""

#: ../../rst/shared_snippets/basic_concepts.txt:9
msgid "The network devices (and/or servers) you manage with Ansible. Managed nodes are also sometimes called \"hosts\". Ansible is not installed on managed nodes."
msgstr ""

#: ../../rst/shared_snippets/basic_concepts.txt:12
msgid "Inventory"
msgstr ""

#: ../../rst/shared_snippets/basic_concepts.txt:14
msgid "A list of managed nodes. An inventory file is also sometimes called a \"hostfile\". Your inventory can specify information like IP address for each managed node. An inventory can also organize managed nodes, creating and nesting groups for easier scaling. To learn more about inventory, see :ref:`the Working with Inventory<intro_inventory>` section."
msgstr ""

#: ../../rst/shared_snippets/basic_concepts.txt:19
msgid "Collections are a distribution format for Ansible content that can include playbooks, roles, modules, and plugins. You can install and use collections through `Ansible Galaxy <https://galaxy.ansible.com>`_. To learn more about collections, see :ref:`collections`."
msgstr ""

#: ../../rst/shared_snippets/basic_concepts.txt:22
msgid "Modules"
msgstr ""

#: ../../rst/shared_snippets/basic_concepts.txt:24
msgid "The units of code Ansible executes. Each module has a particular use, from administering users on a specific type of database to managing VLAN interfaces on a specific type of network device. You can invoke a single module with a task, or invoke several different modules in a playbook. Starting in Ansible 2.10, modules are grouped in collections. For an idea of how many collections Ansible includes, take a look at the :ref:`list_of_collections`."
msgstr ""

#: ../../rst/shared_snippets/basic_concepts.txt:27
msgid "Tasks"
msgstr ""

#: ../../rst/shared_snippets/basic_concepts.txt:29
msgid "The units of action in Ansible. You can execute a single task once with an ad-hoc command."
msgstr ""

#: ../../rst/shared_snippets/basic_concepts.txt:32
msgid "Playbooks"
msgstr ""

#: ../../rst/shared_snippets/basic_concepts.txt:34
msgid "Ordered lists of tasks, saved so you can run those tasks in that order repeatedly. Playbooks can include variables as well as tasks. Playbooks are written in YAML and are easy to read, write, share and understand. To learn more about playbooks, see :ref:`about_playbooks`."
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:3
msgid "Build Your Inventory"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:5
msgid "Running a playbook without an inventory requires several command-line flags. Also, running a playbook against a single device is not a huge efficiency gain over making the same change manually. The next step to harnessing the full power of Ansible is to use an inventory file to organize your managed nodes into groups with information like the ``ansible_network_os`` and the SSH user. A fully-featured inventory file can serve as the source of truth for your network. Using an inventory file, a single playbook can maintain hundreds of network devices with a single command. This page shows you how to build an inventory file, step by step."
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:11
msgid "Basic inventory"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:13
msgid "First, group your inventory logically. Best practice is to group servers and network devices by their What (application, stack or microservice), Where (datacenter or region), and When (development stage):"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:15
msgid "**What**: db, web, leaf, spine"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:16
msgid "**Where**: east, west, floor_19, building_A"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:17
msgid "**When**: dev, test, staging, prod"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:19
msgid "Avoid spaces, hyphens, and preceding numbers (use ``floor_19``, not ``19th_floor``) in your group names. Group names are case sensitive."
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:21
msgid "This tiny example data center illustrates a basic group structure. You can group groups using the syntax ``[metagroupname:children]`` and listing groups as members of the metagroup. Here, the group ``network`` includes all leafs and all spines; the group ``datacenter`` includes all network devices plus all webservers."
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:60
msgid "You can also create this same inventory in INI format."
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:86
msgid "Add variables to the inventory"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:88
msgid "Next, you can set values for many of the variables you needed in your first Ansible command in the inventory, so you can skip them in the ``ansible-playbook`` command. In this example, the inventory includes each network device's IP, OS, and SSH user. If your network devices are only accessible by IP, you must add the IP to the inventory file. If you access your network devices using hostnames, the IP is not necessary."
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:137
msgid "Group variables within inventory"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:139
msgid "When devices in a group share the same variable values, such as OS or SSH user, you can reduce duplication and simplify maintenance by consolidating these into group variables:"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:185
msgid "Variable syntax"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:187
msgid "The syntax for variable values is different in inventory, in playbooks, and in the ``group_vars`` files, which are covered below. Even though playbook and ``group_vars`` files are both written in YAML, you use variables differently in each."
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:189
msgid "In an ini-style inventory file you **must** use the syntax ``key=value`` for variable values: ``ansible_network_os=vyos.vyos.vyos``."
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:190
msgid "In any file with the ``.yml`` or ``.yaml`` extension, including playbooks and ``group_vars`` files, you **must** use YAML syntax: ``key: value``."
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:192
msgid "In ``group_vars`` files, use the full ``key`` name: ``ansible_network_os: vyos.vyos.vyos``."
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:193
msgid "In playbooks, use the short-form ``key`` name, which drops the ``ansible`` prefix: ``network_os: vyos.vyos.vyos``."
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:197
msgid "Group inventory by platform"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:199
msgid "As your inventory grows, you may want to group devices by platform. This allows you to specify platform-specific variables easily for all devices on that platform:"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:242
msgid "With this setup, you can run ``first_playbook.yml`` with only two flags:"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:248
msgid "With the ``-k`` flag, you provide the SSH password(s) at the prompt. Alternatively, you can store SSH and other secrets and passwords securely in your group_vars files with ``ansible-vault``. See :ref:`network_vault` for details."
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:251
msgid "Verifying the inventory"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:253
msgid "You can use the :ref:`ansible-inventory` CLI command to display the inventory as Ansible sees it."
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:336
msgid "Protecting sensitive variables with ``ansible-vault``"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:338
msgid "The ``ansible-vault`` command provides encryption for files and/or individual variables like passwords. This tutorial will show you how to encrypt a single SSH password. You can use the commands below to encrypt other sensitive information, such as database passwords, privilege-escalation passwords and more."
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:340
msgid "First you must create a password for ansible-vault itself. It is used as the encryption key, and with this you can encrypt dozens of different passwords across your Ansible project. You can access all those secrets (encrypted values) with a single password (the ansible-vault password) when you run your playbooks. Here's a simple example."
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:342
msgid "Create a file and write your password for ansible-vault to it:"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:348
msgid "Create the encrypted ssh password for your VyOS network devices, pulling your ansible-vault password from the file you just created:"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:354
msgid "If you prefer to type your ansible-vault password rather than store it in a file, you can request a prompt:"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:360
msgid "and type in the vault password for ``my_user``."
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:362
msgid "The :option:`--vault-id <ansible-playbook --vault-id>` flag allows different vault passwords for different users or different levels of access. The output includes the user name ``my_user`` from your ``ansible-vault`` command and uses the YAML syntax ``key: value``:"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:375
msgid "This is an example using an extract from a  YAML inventory, as the INI format does not support inline vaults:"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:396
msgid "To use an inline vaulted variables with an INI inventory you need to store it in a 'vars' file in YAML format, it can reside in host_vars/ or group_vars/ to be automatically picked up or referenced from a play via ``vars_files`` or ``include_vars``."
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:399
msgid "To run a playbook with this setup, drop the ``-k`` flag and add a flag for your ``vault-id``:"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:405
msgid "Or with a prompt instead of the vault password file:"
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:411
msgid "To see the original value, you can use the debug module. Please note if your YAML file defines the `ansible_connection` variable (as we used in our example), it will take effect when you execute the command below. To prevent this, please make a copy of the file without the ansible_connection variable."
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:427
msgid "Vault content can only be decrypted with the password that was used to encrypt it. If you want to stop using one password and move to a new one, you can update and re-encrypt existing vault content with ``ansible-vault rekey myfile``, then provide the old password and the new password. Copies of vault content still encrypted with the old password can still be decrypted with old password."
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:429
msgid "For more details on building inventory files, see :ref:`the introduction to inventory<intro_inventory>`; for more details on ansible-vault, see :ref:`the full Ansible Vault documentation<vault>`."
msgstr ""

#: ../../rst/network/getting_started/first_inventory.rst:431
msgid "Now that you understand the basics of commands, playbooks, and inventory, it's time to explore some more complex Ansible Network examples."
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:6
msgid "Run Your First Command and Playbook"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:8
msgid "Put the concepts you learned to work with this quick tutorial. Install Ansible, execute a network configuration command manually, execute the same command with Ansible, then create a playbook so you can execute the command any time on multiple network devices."
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:14
#: ../../rst/network/user_guide/network_best_practices_2.5.rst:13
msgid "Prerequisites"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:16
msgid "Before you work through this tutorial you need:"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:18
msgid "Ansible 2.10 (or higher) installed"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:19
msgid "One or more network devices that are compatible with Ansible"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:20
msgid "Basic Linux command line knowledge"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:21
msgid "Basic knowledge of network switch & router configuration"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:24
msgid "Install Ansible"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:26
msgid "Install Ansible using your preferred method. See :ref:`installation_guide`. Then return to this tutorial."
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:28
msgid "Confirm the version of Ansible (must be >= 2.10):"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:36
msgid "Establish a manual connection to a managed node"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:38
msgid "To confirm your credentials, connect to a network device manually and retrieve its configuration. Replace the sample user and device name with your real credentials. For example, for a VyOS router:"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:46
msgid "This manual connection also establishes the authenticity of the network device, adding its RSA key fingerprint to your list of known hosts. (If you have connected to the device before, you have already established its authenticity.)"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:50
msgid "Run your first network Ansible command"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:52
msgid "Instead of manually connecting and running a command on the network device, you can retrieve its configuration with a single, stripped-down Ansible command:"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:65
msgid "The flags in this command set seven values:"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:59
msgid "the host group(s) to which the command should apply (in this case, all)"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:60
msgid "the inventory (-i, the device or devices to target - without the trailing comma -i points to an inventory file)"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:61
msgid "the connection method (-c, the method for connecting and executing ansible)"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:62
msgid "the user (-u, the username for the SSH connection)"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:63
msgid "the SSH connection method (-k, please prompt for the password)"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:64
msgid "the module (-m, the Ansible module to run, using the fully qualified collection name (FQCN))"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:65
msgid "an extra variable ( -e, in this case, setting the network OS value)"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:67
msgid "NOTE: If you use ``ssh-agent`` with ssh keys, Ansible loads them automatically. You can omit ``-k`` flag."
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:71
msgid "If you are running Ansible in a virtual environment, you will also need to add the variable ``ansible_python_interpreter=/path/to/venv/bin/python``"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:75
msgid "Create and run your first network Ansible Playbook"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:77
msgid "If you want to run this command every day, you can save it in a playbook and run it with ``ansible-playbook`` instead of ``ansible``. The playbook can store a lot of the parameters you provided with flags at the command line, leaving less to type at the command line. You need two files for this - a playbook and an inventory file."
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:79
msgid "Download :download:`first_playbook.yml <sample_files/first_playbook.yml>`, which looks like this:"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:84
msgid "The playbook sets three of the seven values from the command line above: the group (``hosts: all``), the connection method (``connection: ansible.netcommon.network_cli``) and the module (in each task). With those values set in the playbook, you can omit them on the command line. The playbook also adds a second task to show the config output. When a module runs in a playbook, the output is held in memory for use by future tasks instead of written to the console. The debug task here lets you see the results in your shell."
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:86
msgid "Run the playbook with the command:"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:92
msgid "The playbook contains one play with two tasks, and should generate output like this:"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:111
msgid "Now that you can retrieve the device config, try updating it with Ansible. Download :download:`first_playbook_ext.yml <sample_files/first_playbook_ext.yml>`, which is an extended version of the first playbook:"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:116
msgid "The extended first playbook has four tasks in a single play. Run it with the same command you used above. The output shows you the change Ansible made to the config:"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:158
msgid "Gathering facts from network devices"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:160
msgid "The ``gather_facts`` keyword now supports gathering network device facts in standardized key/value pairs. You can feed these network facts into further tasks to manage the network device."
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:162
msgid "You can also use the new ``gather_network_resources`` parameter with the network ``*_facts`` modules (such as :ref:`arista.eos.eos_facts <ansible_collections.arista.eos.eos_facts_module>`) to return just a subset of the device configuration, as shown below."
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:173
msgid "The playbook returns the following interface facts:"
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:210
msgid "Note that this returns a subset of what is returned by just setting ``gather_subset: interfaces``."
msgstr ""

#: ../../rst/network/getting_started/first_playbook.rst:212
msgid "You can store these facts and use them directly in another task, such as with the :ref:`eos_interfaces <ansible_collections.arista.eos.eos_interfaces_module>` resource module."
msgstr ""

#: ../../rst/network/getting_started/index.rst:23
msgid "Getting Started Guide"
msgstr ""

#: ../../rst/network/getting_started/index.rst:5
msgid "Network Getting Started"
msgstr ""

#: ../../rst/network/getting_started/index.rst:7
msgid "Ansible collections support a wide range of vendors, device types, and actions, so you can manage your entire network with a single automation tool. With Ansible, you can:"
msgstr ""

#: ../../rst/network/getting_started/index.rst:9
msgid "Automate repetitive tasks to speed routine network changes and free up your time for more strategic work"
msgstr ""

#: ../../rst/network/getting_started/index.rst:10
msgid "Leverage the same simple, powerful, and agentless automation tool for network tasks that operations and development use"
msgstr ""

#: ../../rst/network/getting_started/index.rst:11
msgid "Separate the data model (in a playbook or role) from the execution layer (via Ansible modules) to manage heterogeneous network devices"
msgstr ""

#: ../../rst/network/getting_started/index.rst:12
msgid "Benefit from community and vendor-generated sample playbooks and roles to help accelerate network automation projects"
msgstr ""

#: ../../rst/network/getting_started/index.rst:13
msgid "Communicate securely with network hardware over SSH or HTTPS"
msgstr ""

#: ../../rst/network/getting_started/index.rst:17
msgid "This guide is intended for network engineers using Ansible for the first time. If you understand networks but have never used Ansible, work through the guide from start to finish."
msgstr ""

#: ../../rst/network/getting_started/index.rst:19
msgid "This guide is also useful for experienced Ansible users automating network tasks for the first time. You can use Ansible commands, playbooks and modules to configure hubs, switches, routers, bridges and other network devices. But network modules are different from Linux/Unix and Windows modules, and you must understand some network-specific concepts to succeed. If you understand Ansible but have never automated a network task, start with the second section."
msgstr ""

#: ../../rst/network/getting_started/index.rst:21
msgid "This guide introduces basic Ansible concepts and guides you through your first Ansible commands, playbooks and inventory entries."
msgstr ""

#: ../../rst/network/getting_started/intermediate_concepts.rst:3
msgid "Beyond the basics"
msgstr ""

#: ../../rst/network/getting_started/intermediate_concepts.rst:5
msgid "This page introduces some concepts that help you manage your Ansible workflow with directory structure and source control. Like the Basic Concepts at the beginning of this guide, these intermediate concepts are common to all uses of Ansible."
msgstr ""

#: ../../rst/network/getting_started/intermediate_concepts.rst:12
msgid "A typical Ansible filetree"
msgstr ""

#: ../../rst/network/getting_started/intermediate_concepts.rst:14
msgid "Ansible expects to find certain files in certain places. As you expand your inventory and create and run more network playbooks, keep your files organized in your working Ansible project directory like this:"
msgstr ""

#: ../../rst/network/getting_started/intermediate_concepts.rst:33
msgid "The ``backup`` directory and the files in it get created when you run modules like ``vyos_config`` with the ``backup: yes`` parameter."
msgstr ""

#: ../../rst/network/getting_started/intermediate_concepts.rst:37
msgid "Tracking changes to inventory and playbooks: source control with git"
msgstr ""

#: ../../rst/network/getting_started/intermediate_concepts.rst:39
msgid "As you expand your inventory, roles and playbooks, you should place your Ansible projects under source control. We recommend ``git`` for source control. ``git`` provides an audit trail, letting you track changes, roll back mistakes, view history and share the workload of managing, maintaining and expanding your Ansible ecosystem. There are plenty of tutorials and guides to using ``git`` available."
msgstr ""

#: ../../rst/network/getting_started/network_connection_options.rst:5
msgid "Working with network connection options"
msgstr ""

#: ../../rst/network/getting_started/network_connection_options.rst:7
msgid "Network modules can support multiple connection protocols, such as ``ansible.netcommon.network_cli``, ``ansible.netcommon.netconf``, and ``ansible.netcommon.httpapi``. These connections include some common options you can set to control how the connection to your network device behaves."
msgstr ""

#: ../../rst/network/getting_started/network_connection_options.rst:9
msgid "Common options are:"
msgstr ""

#: ../../rst/network/getting_started/network_connection_options.rst:11
msgid "``become`` and ``become_method`` as described in :ref:`privilege_escalation`."
msgstr ""

#: ../../rst/network/getting_started/network_connection_options.rst:12
msgid "``network_os`` - set to match your network platform you are communicating with. See the :ref:`platform-specific <platform_options>` pages."
msgstr ""

#: ../../rst/network/getting_started/network_connection_options.rst:13
msgid "``remote_user`` as described in :ref:`connection_set_user`."
msgstr ""

#: ../../rst/network/getting_started/network_connection_options.rst:14
msgid "Timeout options - ``persistent_command_timeout``, ``persistent_connect_timeout``, and ``timeout``."
msgstr ""

#: ../../rst/network/getting_started/network_connection_options.rst:19
msgid "Setting timeout options"
msgstr ""

#: ../../rst/network/getting_started/network_connection_options.rst:21
msgid "When communicating with a remote device, you have control over how long Ansible maintains the connection to that device, as well as how long Ansible waits for a command to complete on that device. Each of these options can be set as variables in your playbook files, environment variables, or settings in your :ref:`ansible.cfg file <ansible_configuration_settings>`."
msgstr ""

#: ../../rst/network/getting_started/network_connection_options.rst:23
msgid "For example, the three options for controlling the connection timeout are as follows."
msgstr ""

#: ../../rst/network/getting_started/network_connection_options.rst:25
msgid "Using vars (per task):"
msgstr ""

#: ../../rst/network/getting_started/network_connection_options.rst:35
msgid "Using the environment variable:"
msgstr ""

#: ../../rst/network/getting_started/network_connection_options.rst:41
msgid "Using the global configuration (in :file:`ansible.cfg`)"
msgstr ""

#: ../../rst/network/getting_started/network_connection_options.rst:48
msgid "See :ref:`ansible_variable_precedence` for details on the relative precedence of each of these variables. See the individual connection type to understand each option."
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:3
msgid "How Network Automation is Different"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:5
msgid "Network automation leverages the basic Ansible concepts, but there are important differences in how the network modules work. This introduction prepares you to understand the exercises in this guide."
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:11
msgid "Execution on the control node"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:13
msgid "Unlike most Ansible modules, network modules do not run on the managed nodes. From a user's point of view, network modules work like any other modules. They work with ad-hoc commands, playbooks, and roles. Behind the scenes, however, network modules use a different methodology than the other (Linux/Unix and Windows) modules use. Ansible is written and executed in Python. Because the majority of network devices can not run Python, the Ansible network modules are executed on the Ansible control node, where ``ansible`` or ``ansible-playbook`` runs."
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:15
msgid "Network modules also use the control node as a destination for backup files, for those modules that offer a ``backup`` option. With Linux/Unix modules, where a configuration file already exists on the managed node(s), the backup file gets written by default in the same directory as the new, changed file. Network modules do not update configuration files on the managed nodes, because network configuration is not written in files. Network modules write backup files on the control node, usually in the `backup` directory under the playbook root directory."
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:18
msgid "Multiple communication protocols"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:20
msgid "Because network modules execute on the control node instead of on the managed nodes, they can support multiple communication protocols. The communication protocol (XML over SSH, CLI over SSH, API over HTTPS) selected for each network module depends on the platform and the purpose of the module. Some network modules support only one protocol; some offer a choice. The most common protocol is CLI over SSH. You set the communication protocol with the ``ansible_connection`` variable:"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "Value of ansible_connection"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
#: ../../rst/network/user_guide/platform_ce.rst:23
#: ../../rst/network/user_guide/platform_cnos.rst:21
#: ../../rst/network/user_guide/platform_dellos10.rst:21
#: ../../rst/network/user_guide/platform_dellos6.rst:21
#: ../../rst/network/user_guide/platform_dellos9.rst:21
#: ../../rst/network/user_guide/platform_enos.rst:21
#: ../../rst/network/user_guide/platform_eos.rst:21
#: ../../rst/network/user_guide/platform_eric_eccli.rst:21
#: ../../rst/network/user_guide/platform_exos.rst:22
#: ../../rst/network/user_guide/platform_frr.rst:21
#: ../../rst/network/user_guide/platform_icx.rst:21
#: ../../rst/network/user_guide/platform_ios.rst:21
#: ../../rst/network/user_guide/platform_iosxr.rst:25
#: ../../rst/network/user_guide/platform_ironware.rst:21
#: ../../rst/network/user_guide/platform_junos.rst:24
#: ../../rst/network/user_guide/platform_meraki.rst:21
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:23
#: ../../rst/network/user_guide/platform_netvisor.rst:22
#: ../../rst/network/user_guide/platform_nos.rst:22
#: ../../rst/network/user_guide/platform_nxos.rst:21
#: ../../rst/network/user_guide/platform_routeros.rst:22
#: ../../rst/network/user_guide/platform_slxos.rst:22
#: ../../rst/network/user_guide/platform_voss.rst:22
#: ../../rst/network/user_guide/platform_vyos.rst:21
msgid "Protocol"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "Requires"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "Persistent?"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "ansible.netcommon.network_cli"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "CLI over SSH"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "network_os setting"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "yes"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "ansible.netcommon.netconf"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
#: ../../rst/network/user_guide/platform_ce.rst:23
#: ../../rst/network/user_guide/platform_iosxr.rst:25
#: ../../rst/network/user_guide/platform_junos.rst:24
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:23
msgid "XML over SSH"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "ansible.netcommon.httpapi"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "API over HTTP/HTTPS"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
#: ../../rst/network/user_guide/platform_index.rst:60
msgid "local"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "depends on provider"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "provider setting"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "no"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:32
msgid "``ansible.netcommon.httpapi`` deprecates ``eos_eapi`` and ``nxos_nxapi``. See :ref:`httpapi_plugins` for details and an example."
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:34
msgid "The ``ansible_connection: local`` has been deprecated. Please use one of the persistent connection types listed above instead. With persistent connections, you can define the hosts and credentials only once, rather than in every task. You also need to set the ``network_os`` variable for the specific network platform you are communicating with. For more details on using each connection type on various platforms, see the :ref:`platform-specific <platform_options>` pages."
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:38
msgid "Collections organized by network platform"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:40
msgid "A network platform is a set of network devices with a common operating system that can be managed by an Ansible collection, for example:"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:42
msgid "Arista: `arista.eos <https://galaxy.ansible.com/arista/eos>`_"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:43
msgid "Cisco: `cisco.ios <https://galaxy.ansible.com/cisco/ios>`_, `cisco.iosxr <https://galaxy.ansible.com/cisco/iosxr>`_, `cisco.nxos <https://galaxy.ansible.com/cisco/nxos>`_"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:44
msgid "Juniper: `junipernetworks.junos <https://galaxy.ansible.com/junipernetworks/junos>`_"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:45
msgid "VyOS `vyos.vyos <https://galaxy.ansible.com/vyos/vyos>`_"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:47
msgid "All modules within a network platform share certain requirements. Some network platforms have specific differences - see the :ref:`platform-specific <platform_options>` documentation for details."
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:52
msgid "Privilege Escalation: ``enable`` mode, ``become``, and ``authorize``"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:54
msgid "Several network platforms support privilege escalation, where certain tasks must be done by a privileged user. On network devices this is called the ``enable`` mode (the equivalent of ``sudo`` in \\*nix administration). Ansible network modules offer privilege escalation for those network devices that support it. For details of which platforms support ``enable`` mode, with examples of how to use it, see the :ref:`platform-specific <platform_options>` documentation."
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:57
msgid "Using ``become`` for privilege escalation"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:59
msgid "Use the top-level Ansible parameter ``become: yes`` with ``become_method: enable`` to run a task, play, or playbook with escalated privileges on any network platform that supports privilege escalation. You must use either ``connection: network_cli`` or ``connection: httpapi`` with ``become: yes`` with ``become_method: enable``. If you are using ``network_cli`` to connect Ansible to your network devices, a ``group_vars`` file would look like:"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:68
msgid "For more information, see :ref:`Become and Networks<become_network>`"
msgstr ""

#: ../../rst/network/getting_started/network_resources.rst:6
msgid "Resources and next steps"
msgstr ""

#: ../../rst/network/getting_started/network_resources.rst:12
msgid "Documents"
msgstr ""

#: ../../rst/network/getting_started/network_resources.rst:14
msgid "Read more about Ansible for Network Automation:"
msgstr ""

#: ../../rst/network/getting_started/network_resources.rst:16
msgid "Network Automation on the `Ansible website <https://www.ansible.com/overview/networking>`_"
msgstr ""

#: ../../rst/network/getting_started/network_resources.rst:17
msgid "Ansible Network `Blog posts <https://www.ansible.com/blog/topic/networks>`_"
msgstr ""

#: ../../rst/network/getting_started/network_resources.rst:20
msgid "Events (on video and in person)"
msgstr ""

#: ../../rst/network/getting_started/network_resources.rst:22
msgid "All sessions at Ansible events are recorded and include many Network-related topics (use Filter by Category to view only Network topics). You can also join us for future events in your area. See:"
msgstr ""

#: ../../rst/network/getting_started/network_resources.rst:24
msgid "`Recorded AnsibleFests <https://www.ansible.com/resources/videos/ansiblefest>`_"
msgstr ""

#: ../../rst/network/getting_started/network_resources.rst:25
msgid "`Recorded AnsibleAutomates <https://www.ansible.com/resources/webinars-training>`_"
msgstr ""

#: ../../rst/network/getting_started/network_resources.rst:26
msgid "`Upcoming Ansible Events <https://www.ansible.com/community/events>`_ page."
msgstr ""

#: ../../rst/network/getting_started/network_resources.rst:29
msgid "GitHub repos"
msgstr ""

#: ../../rst/network/getting_started/network_resources.rst:31
msgid "Ansible hosts module code, examples, demonstrations, and other content on GitHub. Anyone with a GitHub account is able to create Pull Requests (PRs) or issues on these repos:"
msgstr ""

#: ../../rst/network/getting_started/network_resources.rst:33
msgid "`Network-Automation <https://github.com/network-automation>`_ is an open community for all things network automation. Have an idea, some playbooks, or roles to share? Email ansible-network@redhat.com and we will add you as a contributor to the repository."
msgstr ""

#: ../../rst/network/getting_started/network_resources.rst:35
msgid "`Ansible collections <https://github.com/ansible-collections>`_ is the main repository for Ansible-maintained and community collections, including collections for network devices."
msgstr ""

#: ../../rst/network/getting_started/network_resources.rst:40
msgid "IRC and Slack"
msgstr ""

#: ../../rst/network/getting_started/network_resources.rst:42
msgid "Join us on:"
msgstr ""

#: ../../rst/network/getting_started/network_resources.rst:44
msgid "Freenode IRC - ``#ansible-network`` Freenode channel"
msgstr ""

#: ../../rst/network/getting_started/network_resources.rst:46
msgid "Slack - `<https://ansiblenetwork.slack.com>`_"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:6
msgid "Use Ansible network roles"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:8
msgid "Roles are sets of Ansible defaults, files, tasks, templates, variables, and other Ansible components that work together. As you saw on :ref:`first_network_playbook`, moving from a command to a playbook makes it easy to run multiple tasks and repeat the same tasks in the same order. Moving from a playbook to a role makes it even easier to reuse and share your ordered tasks. You can look at :ref:`Ansible Galaxy <ansible_galaxy>`, which lets you share your roles and use others' roles, either directly or as inspiration."
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:14
msgid "Understanding roles"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:16
msgid "So what exactly is a role, and why should you care? Ansible roles are basically playbooks broken up into a known file structure. Moving to roles from a playbook makes sharing, reading, and updating your Ansible workflow easier. Users can write their own roles. So for example, you don't have to write your own DNS playbook. Instead, you specify a DNS server and a role to configure it for you."
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:18
msgid "To simplify your workflow even further, the Ansible Network team has written a series of roles for common network use cases. Using these roles means you don't have to reinvent the wheel. Instead of writing and maintaining your own ``create_vlan`` playbooks or roles, you can concentrate on designing, codifying and maintaining the parser templates that describe your network topologies and inventory, and let Ansible's network roles do the work. See the `network-related roles <https://galaxy.ansible.com/ansible-network>`_ on Ansible Galaxy."
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:21
msgid "A sample DNS playbook"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:23
msgid "To demonstrate the concept of what a role is, the example ``playbook.yml`` below is a single YAML file containing a two-task playbook.  This Ansible Playbook configures the hostname on a Cisco IOS XE device, then it configures the DNS (domain name system) servers."
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:44
msgid "If you run this playbook using the ``ansible-playbook`` command, you'll see the output below.  This example used ``-l`` option to limit the playbook to only executing on the **rtr1** node."
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:62
msgid "This playbook configured the hostname and DNS servers.  You can verify that configuration on the Cisco IOS XE **rtr1** router:"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:71
msgid "Convert the playbook into a role"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:73
msgid "The next step is to convert this playbook into a reusable role. You can create the directory structure manually, or you can use ``ansible-galaxy init`` to create the standard framework for a role."
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:98
msgid "This first demonstration uses only the **tasks** and **vars** directories.  The directory structure would look as follows:"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:109
msgid "Next, move the content of the ``vars`` and ``tasks`` sections from the original Ansible Playbook into the role. First, move the two tasks into the ``tasks/main.yml`` file:"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:123
msgid "Next, move the variables into the ``vars/main.yml`` file:"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:131
msgid "Finally, modify the original Ansible Playbook to remove the ``tasks`` and ``vars`` sections and add the keyword ``roles``  with the name of the role, in this case ``system-demo``.  You'll have this playbook:"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:144
msgid "To summarize, this demonstration now has a total of three directories and three YAML files.  There is the ``system-demo`` folder, which represents the role.  This ``system-demo`` contains two folders, ``tasks`` and ``vars``.  There is a ``main.yml`` is each respective folder.  The ``vars/main.yml`` contains the variables from ``playbook.yml``.  The ``tasks/main.yml`` contains the tasks from ``playbook.yml``.  The ``playbook.yml`` file has been modified to call the role rather than specifying vars and tasks directly.  Here is a tree of the current working directory:"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:157
msgid "Running the playbook results in identical behavior with slightly different output:"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:174
msgid "As seen above each task is now prepended with the role name, in this case ``system-demo``.  When running a playbook that contains several roles, this will help pinpoint where a task is being called from.  This playbook returned ``ok`` instead of ``changed`` because it has identical behavior for the single file playbook we started from."
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:176
msgid "As before, the playbook will generate the following configuration on a Cisco IOS-XE router:"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:185
msgid "This is why Ansible roles can be simply thought of as deconstructed playbooks. They are simple, effective and reusable.  Now another user can simply include the ``system-demo`` role instead of having to create a custom \"hard coded\" playbook."
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:188
msgid "Variable precedence"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:190
msgid "What if you want to change the DNS servers?  You aren't expected to change the ``vars/main.yml`` within the role structure. Ansible has many places where you can specify variables for a given play. See :ref:`playbooks_variables` for details on variables and precedence. There are actually 21 places to put variables.  While this list can seem overwhelming at first glance, the vast majority of use cases only involve knowing the spot for variables of least precedence and how to pass variables with most precedence. See :ref:`ansible_variable_precedence` for more guidance on where you should put variables."
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:193
msgid "Lowest precedence"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:195
msgid "The lowest precedence is the ``defaults`` directory within a role.  This means all the other 20 locations you could potentially specify the variable will all take higher precedence than ``defaults``, no matter what.  To immediately give the vars from the ``system-demo`` role the least precedence, rename the ``vars`` directory to ``defaults``."
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:207
msgid "Add a new ``vars`` section to the playbook to override the default behavior (where the variable ``dns`` is set to 8.8.8.8 and 8.8.4.4).  For this demonstration, set ``dns`` to 1.1.1.1, so ``playbook.yml`` becomes:"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:221
msgid "Run this updated playbook on **rtr2**:"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:227
msgid "The configuration on the **rtr2** Cisco router will look as follows:"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:234
msgid "The variable configured in the playbook now has precedence over the ``defaults`` directory.  In fact, any other spot you configure variables would win over the values in the ``defaults`` directory."
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:237
msgid "Highest precedence"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:239
msgid "Specifying variables in the ``defaults`` directory within a role will always take the lowest precedence, while specifying ``vars`` as extra vars with the ``-e`` or ``--extra-vars=`` will always take the highest precedence, no matter what.  Re-running the playbook with the ``-e`` option overrides both the ``defaults`` directory (8.8.4.4 and 8.8.8.8) as well as the newly created ``vars`` within the playbook that contains the 1.1.1.1 dns server."
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:245
msgid "The result on the Cisco IOS XE router will only contain the highest precedence setting of 192.168.1.1:"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:252
msgid "How is this useful?  Why should you care?  Extra vars are commonly used by network operators to override defaults.  A powerful example of this is with Red Hat Ansible Tower and the Survey feature.  It is possible through the web UI to prompt a network operator to fill out parameters with a Web form.  This can be really simple for non-technical playbook writers to execute a playbook using their Web browser. See `Ansible Tower Job Template Surveys <https://docs.ansible.com/ansible-tower/latest/html/userguide/workflow_templates.html#surveys>`_ for more details."
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:256
msgid "Update an installed role"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:258
msgid "The Ansible Galaxy page for a role lists all available versions. To update a locally installed role to a new or different version, use the ``ansible-galaxy install`` command with the version and ``--force`` option. You may also need to manually update any dependent roles to support this version. See the role **Read Me** tab in Galaxy for dependent role minimum version requirements."
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:266
msgid "`Ansible Galaxy documentation <https://galaxy.ansible.com/docs/>`_"
msgstr ""

#: ../../rst/network/getting_started/network_roles.rst:267
msgid "Ansible Galaxy user guide"
msgstr ""

#: ../../rst/network/index.rst:7
msgid "Ansible for Network Automation"
msgstr ""

#: ../../rst/network/index.rst:9
msgid "Ansible Network modules extend the benefits of simple, powerful, agentless automation to network administrators and teams. Ansible Network modules can configure your network stack, test and validate existing network state, and discover and correct network configuration drift."
msgstr ""

#: ../../rst/network/index.rst:11
msgid "If you're new to Ansible, or new to using Ansible for network management, start with :ref:`network_getting_started`. If you are already familiar with network automation with Ansible, see :ref:`network_advanced`."
msgstr ""

#: ../../rst/network/index.rst:13
msgid "For documentation on using a particular network module, consult the :ref:`list of all network modules<network_modules>`. Network modules for various hardware are supported by different teams including the hardware vendors themselves, volunteers from the Ansible community, and the Ansible Network Team."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:5
msgid "Parsing semi-structured text with Ansible"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:7
msgid "The :ref:`cli_parse <ansible_collections.ansible.netcommon.cli_parse_module>` module parses semi-structured data such as network configurations into structured data to allow programmatic use of the data from that device. You can pull information from a network device and update a CMDB in one playbook. Use cases include automated troubleshooting, creating dynamic documentation, updating IPAM (IP address management) tools and so on."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:15
msgid "Understanding the CLI parser"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:17
msgid "The `ansible.netcommon <https://galaxy.ansible.com/ansible/netcommon>`_ collection version 1.2.0 or later  includes the :ref:`cli_parse <ansible_collections.ansible.netcommon.cli_parse_module>` module that can run CLI commands and parse the semi-structured text output. You can use the ``cli_parse`` module on a device, host, or platform that only supports a command-line interface and the commands issued return semi-structured text. The ``cli_parse`` module can either run a CLI command on a device and return a parsed result or can simply parse any text document. The ``cli_parse`` module includes cli_parser plugins to interface with a variety of parsing engines."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:20
msgid "Why parse the text?"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:22
msgid "Parsing semi-structured data such as network configurations into structured data allows programmatic use of the data from that device. Use cases include automated troubleshooting, creating dynamic documentation, updating IPAM (IP address management) tools and so on. You may prefer to do this with Ansible natively to take advantage of native Ansible constructs such as:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:24
msgid "The ``when`` clause to conditionally run other tasks or roles"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:25
msgid "The ``assert`` module to check configuration and operational state compliance"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:26
msgid "The ``template`` module to generate reports about configuration and operational state information"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:27
msgid "Templates and ``command`` or ``config`` modules to generate host, device, or platform commands or configuration"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:28
msgid "The current platform ``facts`` modules to supplement native facts information"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:30
msgid "By parsing semi-structured text into Ansible native data structures, you can take full advantage of Ansible's network modules and plugins."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:34
msgid "When not to parse the text"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:36
msgid "You should not parse semi-structured text when:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:38
msgid "The device, host, or platform has a RESTAPI and returns JSON."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:39
msgid "Existing Ansible facts modules already return the desired data."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:40
msgid "Ansible network resource modules exist for configuration management of the device and resource."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:43
msgid "Parsing the CLI"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:45
msgid "The ``cli_parse`` module includes the following cli_parsing plugins:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:47
msgid "``native``"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:48
msgid "The native parsing engine built into Ansible and requires no addition python libraries"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:49
msgid "``xml``"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:50
msgid "Convert XML to an Ansible native data structure"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:51
msgid "``textfsm``"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:52
msgid "A python module which implements a template based state machine for parsing semi-formatted text"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:53
msgid "``ntc_templates``"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:54
msgid "Predefined ``textfsm`` templates packages supporting a variety of platforms and commands"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:55
msgid "``ttp``"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:56
msgid "A library for semi-structured text parsing using templates, with added capabilities to simplify the process"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:57
msgid "``pyats``"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:58
msgid "Uses the parsers included with the Cisco Test Automation & Validation Solution"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:60
msgid "``json``"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:60
msgid "Converts JSON output at the CLI to an Ansible native data structure"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:62
#: ../../rst/network/user_guide/cli_parsing.rst:589
msgid "Although Ansible contains a number of plugins that can convert XML to Ansible native data structures, the``cli_parse`` module runs the command on devices that return XML and returns the converted data in a single task."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:64
msgid "Because ``cli_parse`` uses a plugin based architecture, it can use additional parsing engines from any Ansible collection."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:68
msgid "The ``ansible.netcommon.native``  and ``ansible.netcommon.json`` parsing engines are fully supported with a Red Hat Ansible Automation Platform subscription. Red Hat Ansible Automation Platform subscription support is limited to the use of the ``ntc_templates``, pyATS, ``textfsm``, ``xmltodict``, public APIs as documented."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:71
msgid "Parsing with the native parsing engine"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:73
msgid "The native parsing engine is included with the ``cli_parse`` module. It uses data captured using regular expressions to populate the parsed data structure. The native parsing engine requires a YAML template file to parse the command output."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:76
msgid "Networking example"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:78
msgid "This example uses the output of a network device command and applies a native template to produce an output in Ansible structured data format."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:80
msgid "The ``show interface`` command output from the network device looks as follows:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:104
msgid "Create the native template to match this output and store it as ``templates/nxos_show_interface.yaml``:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:134
msgid "This native parser template is structured as a list of parsers, each containing the following key-value pairs:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:136
msgid "``example`` - An example line of the text line to be parsed"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:137
msgid "``getval`` - A regular expression using named capture groups to store the extracted data"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:138
msgid "``result`` - A data tree, populated as a template, from the parsed data"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:139
msgid "``shared`` - (optional) The shared key makes the parsed values available to the rest of the parser entries until matched again."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:141
msgid "The following example task uses ``cli_parse`` with the native parser and the example template above to parse the ``show interface`` command from a Cisco NXOS device:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:152
#: ../../rst/network/user_guide/cli_parsing.rst:300
#: ../../rst/network/user_guide/cli_parsing.rst:326
#: ../../rst/network/user_guide/cli_parsing.rst:386
#: ../../rst/network/user_guide/cli_parsing.rst:495
msgid "Taking a deeper dive into this task:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:154
msgid "The ``command`` option provides the command you want to run on the device or host. Alternately, you can provide text from a previous command with the ``text`` option instead."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:155
msgid "The ``parser`` option provides information specific to the parser engine."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:156
msgid "The ``name`` suboption provides the fully qualified collection name (FQCN) of the parsing engine (``ansible.netcommon.native``)."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:157
msgid "The ``cli_parse`` module, by default, looks for the template in the templates directory as ``{{ short_os }}_{{ command }}.yaml``."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:159
msgid "The ``short_os`` in the template filename is derived from either the host ``ansible_network_os`` or ``ansible_distribution``."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:160
msgid "Spaces in the network or host command are replace with ``_`` in the ``command`` portion of the template filename. In this example, the ``show interfaces`` network CLI command becomes ``show_interfaces`` in the filename."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:164
msgid "``ansible.netcommon.native`` parsing engine is fully supported with a Red Hat Ansible Automation Platform subscription."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:166
msgid "Lastly in this task, the ``set_fact`` option sets the following ``interfaces`` fact for the device based on the now-structured data returned from ``cli_parse``:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:184
msgid "Linux example"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:186
msgid "You can also use the native parser to run commands and parse output from Linux hosts."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:188
msgid "The output of a sample Linux  command (``ip addr show``) looks as follows:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:203
msgid "Create the native template to match this output and store it as ``templates/fedora_ip_addr_show.yaml``:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:241
msgid "The ``shared`` key in the parser template allows the interface name to be used in subsequent parser entries. The use of examples and free-spacing mode with the regular expressions makes the template easier to read."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:243
msgid "The following example task uses ``cli_parse`` with the native parser and the example template above to parse the Linux output:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:254
msgid "This task assumes you previously gathered facts to determine the ``ansible_distribution`` needed to locate the template. Alternately, you could provide the path in the  ``parser/template_path`` option."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:257
msgid "Lastly in this task, the ``set_fact`` option sets the following ``interfaces`` fact for the host, based on the now-structured data returned from ``cli_parse``:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:285
msgid "Parsing JSON"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:287
msgid "Although Ansible will natively convert serialized JSON to Ansible native data when recognized, you can also use the ``cli_parse`` module for this conversion."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:289
#: ../../rst/network/user_guide/cli_parsing.rst:315
#: ../../rst/network/user_guide/cli_parsing.rst:374
msgid "Example task:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:302
msgid "The ``show interface | json`` command is issued on the device."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:303
msgid "The output is set as the ``interfaces`` fact for the device."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:304
msgid "JSON support is provided primarily for playbook consistency."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:308
msgid "The use of ``ansible.netcommon.json`` is fully supported with a Red Hat Ansible Automation Platform subscription"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:311
msgid "Parsing with ntc_templates"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:313
msgid "The ``ntc_templates`` python library includes pre-defined ``textfsm`` templates for parsing a variety of network device commands output."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:328
msgid "The ``ansible_network_os`` of the device is converted to the ntc_template format ``cisco_nxos``. Alternately, you can provide the ``os`` with the ``parser/os`` option instead."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:329
msgid "The ``cisco_nxos_show_interface.textfsm`` template, included with the ``ntc_templates`` package, parses the output."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:330
msgid "See `the ntc_templates README <https://github.com/networktocode/ntc-templates/blob/master/README.md>`_ for additional information about the ``ntc_templates`` python library."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:334
msgid "Red Hat Ansible Automation Platform subscription support is limited to the use of the ``ntc_templates`` public APIs as documented."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:337
msgid "This task and and the predefined template sets the following fact as the ``interfaces`` fact for the host:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:370
msgid "Parsing with pyATS"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:372
msgid "``pyATS`` is part of the Cisco Test Automation & Validation Solution. It includes many predefined parsers for a number of network platforms and commands. You can use the predefined parsers that are part of the ``pyATS`` package with the ``cli_parse`` module."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:388
msgid "The ``cli_parse`` modules converts the ``ansible_network_os`` automatically (in this example, ``ansible_network_os`` set to ``cisco.nxos.nxos``, converts to ``nxos`` for pyATS.  Alternately, you can set the OS with the ``parser/os`` option instead."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:389
#, python-format
msgid "Using a combination of the command and OS, the pyATS selects the following parser: https://pubhub.devnetcloud.com/media/genie-feature-browser/docs/#/parsers/show%2520interface."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:390
msgid "The ``cli_parse`` module sets ``cisco.ios.ios`` to ``iosxe`` for pyATS. You can override this with the ``parser/os`` option."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:391
msgid "``cli_parse`` only uses the predefined parsers in pyATS. See the `pyATS documentation <https://developer.cisco.com/docs/pyats/>`_ and the full list of `pyATS included parsers <https://pubhub.devnetcloud.com/media/genie-feature-browser/docs/#/parsers>`_."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:395
msgid "Red Hat Ansible Automation Platform subscription support is limited to the use of the pyATS public APIs as documented."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:398
#: ../../rst/network/user_guide/cli_parsing.rst:506
msgid "This task sets the following fact as the ``interfaces`` fact for the host:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:436
msgid "Parsing with textfsm"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:438
msgid "``textfsm`` is a Python module which implements a template-based state machine for parsing semi-formatted text."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:440
msgid "The following sample``textfsm`` template is stored as ``templates/nxos_show_interface.textfsm``"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:484
msgid "The following task uses the example template for ``textfsm`` with the ``cli_parse`` module."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:497
msgid "The ``ansible_network_os`` for the device (``cisco.nxos.nxos``) is converted to ``nxos``. Alternately you can provide the OS in the ``parser/os`` option instead."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:498
msgid "The textfsm template name defaulted to ``templates/nxos_show_interface.textfsm`` using a combination of the OS and command run. Alternately you can override the generated template path with the ``parser/template_path`` option."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:499
msgid "See the `textfsm README <https://github.com/google/textfsm>`_ for details."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:500
msgid "``textfsm`` was previously made available as a filter plugin. Ansible users should transition to the ``cli_parse`` module."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:504
msgid "Red Hat Ansible Automation Platform subscription support is limited to the use of the ``textfsm`` public APIs as documented."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:537
msgid "Parsing with TTP"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:539
msgid "TTP is a Python library for semi-structured text parsing using templates. TTP uses a jinja-like syntax to limit the need for regular expressions. Users familiar with jinja templating may find the TTP template syntax familiar."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:541
msgid "The following is an example TTP template stored as ``templates/nxos_show_interfaces.ttp``:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:548
msgid "The following task uses this template to parse the ``show interface`` command output:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:559
msgid "Taking a deeper dive in this task:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:561
msgid "The default template path ``templates/nxos_show_interface.ttp`` was generated using the ``ansible_network_os`` for the host and ``command`` provided."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:562
msgid "TTP supports several additional variables that will be passed to the parser. These include:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:564
msgid "``parser/vars/ttp_init`` -  Additional parameter passed when the parser is initialized."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:565
msgid "``parser/vars/ttp_results`` -  Additional parameters used to influence the parser output."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:566
msgid "``parser/vars/ttp_vars`` -  Additional variables made available in the template."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:568
msgid "See the `TTP documentation <https://ttp.readthedocs.io>`_ for details."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:571
msgid "The task sets the follow fact as the ``interfaces`` fact for the host:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:587
msgid "Converting XML"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:591
msgid "This example task runs the ``show interface`` command and parses the output as XML:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:604
msgid "Red Hat Ansible Automation Platform subscription support is limited to the use of the ``xmltodict`` public APIs as documented."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:606
msgid "This task sets the ``interfaces`` fact for the host based on this returned output:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:629
msgid "Advanced use cases"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:631
msgid "The ``cli_parse`` module supports several features to support more complex uses cases."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:634
msgid "Provide a full template path"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:636
msgid "Use the ``template_path`` option to override the default template path in the task:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:649
msgid "Provide command to parser different than the command run"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:651
msgid "Use the ``command`` suboption for the ``parser`` to configure the command the parser expects if it is different from the command ``cli_parse`` runs:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:663
msgid "Provide a custom OS value"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:665
msgid "Use the ``os`` suboption to the parser to directly set the OS instead of using ``ansible_network_os`` or ``ansible_distribution`` to generate the template path or with the specified parser engine:"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:685
msgid "Parse existing text"
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:687
msgid "Use the ``text`` option  instead of ``command`` to parse text collected earlier in the playbook."
msgstr ""

#: ../../rst/network/user_guide/cli_parsing.rst:719
msgid ":ref:`develop_cli_parse_plugins`"
msgstr ""

#: ../../rst/network/user_guide/faq.rst:5
msgid "Ansible Network FAQ"
msgstr ""

#: ../../rst/network/user_guide/faq.rst:7
msgid "Topics"
msgstr ""

#: ../../rst/network/user_guide/faq.rst:12
msgid "How can I improve performance for network playbooks?"
msgstr ""

#: ../../rst/network/user_guide/faq.rst:17
msgid "Consider ``strategy: free`` if you are running on multiple hosts"
msgstr ""

#: ../../rst/network/user_guide/faq.rst:19
msgid "The ``strategy`` plugin tells Ansible how to order multiple tasks on multiple hosts. :ref:`Strategy<strategy_plugins>` is set at the playbook level."
msgstr ""

#: ../../rst/network/user_guide/faq.rst:21
msgid "The default strategy is ``linear``. With strategy set to ``linear``, Ansible waits until the current task has run on all hosts before starting the next task on any host. Ansible may have forks free, but will not use them until all hosts have completed the current task. If each task in your playbook must succeed on all hosts before you run the next task, use the ``linear`` strategy."
msgstr ""

#: ../../rst/network/user_guide/faq.rst:23
msgid "Using the ``free`` strategy, Ansible uses available forks to execute tasks on each host as quickly as possible. Even if an earlier task is still running on one host, Ansible executes later tasks on other hosts. The ``free`` strategy uses available forks more efficiently. If your playbook stalls on each task, waiting for one slow host, consider using ``strategy: free`` to boost overall performance."
msgstr ""

#: ../../rst/network/user_guide/faq.rst:28
msgid "Execute ``show running`` only if you absolutely must"
msgstr ""

#: ../../rst/network/user_guide/faq.rst:30
msgid "The ``show running`` command is the most resource-intensive command to execute on a network device, because of the way queries are handled by the network OS. Using the command in your Ansible playbook will slow performance significantly, especially on large devices; repeating it will multiply the performance hit. If you have a playbook that checks the running config, then executes changes, then checks the running config again, you should expect that playbook to be very slow."
msgstr ""

#: ../../rst/network/user_guide/faq.rst:35
msgid "Use ``ProxyCommand`` only if you absolutely must"
msgstr ""

#: ../../rst/network/user_guide/faq.rst:37
msgid "Network modules support the use of a :ref:`proxy or jump host<network_delegate_to_vs_ProxyCommand>` with the ``ProxyCommand`` parameter. However, when you use a jump host, Ansible must open a new SSH connection for every task, even if you are using a persistent connection type (``network_cli`` or ``netconf``). To maximize the performance benefits of the persistent connection types introduced in version 2.5, avoid using jump hosts whenever possible."
msgstr ""

#: ../../rst/network/user_guide/faq.rst:42
msgid "Set ``--forks`` to match your needs"
msgstr ""

#: ../../rst/network/user_guide/faq.rst:44
msgid "Every time Ansible runs a task, it forks its own process. The ``--forks`` parameter defines the number of concurrent tasks - if you retain the default setting, which is ``--forks=5``, and you are running a playbook on 10 hosts, five of those hosts will have to wait until a fork is available. Of course, the more forks you allow, the more memory and processing power Ansible will use. Since most network tasks are run on the control host, this means your laptop can quickly become cpu- or memory-bound."
msgstr ""

#: ../../rst/network/user_guide/faq.rst:49
msgid "Why is my output sometimes replaced with ``********``?"
msgstr ""

#: ../../rst/network/user_guide/faq.rst:51
msgid "Ansible replaces any string marked ``no_log``, including passwords, with ``********`` in Ansible output. This is done by design, to protect your sensitive data. Most users are happy to have their passwords redacted. However, Ansible replaces every string that matches your password with ``********``. If you use a common word for your password, this can be a problem. For example, if you choose ``Admin`` as your password, Ansible will replace every instance of the word ``Admin`` with ``********`` in your output. This may make your output harder to read. To avoid this problem, select a secure password that will not occur elsewhere in your Ansible output."
msgstr ""

#: ../../rst/network/user_guide/faq.rst:56
msgid "Why do the ``*_config`` modules always return ``changed=true`` with abbreviated commands?"
msgstr ""

#: ../../rst/network/user_guide/faq.rst:58
msgid "When you issue commands directly on a network device, you can use abbreviated commands. For example, ``int g1/0/11`` and ``interface GigabitEthernet1/0/11`` do the same thing; ``shut`` and ``shutdown`` do the same thing. Ansible Network ``*_command`` modules work with abbreviations, because they run commands through the network OS."
msgstr ""

#: ../../rst/network/user_guide/faq.rst:60
msgid "When committing configuration, however, the network OS converts abbreviations into long-form commands. Whether you use ``shut`` or ``shutdown`` on ``GigabitEthernet1/0/11``, the result in the configuration is the same: ``shutdown``."
msgstr ""

#: ../../rst/network/user_guide/faq.rst:62
msgid "Ansible Network ``*_config`` modules compare the text of the commands you specify in ``lines`` to the text in the configuration. If you use ``shut`` in the ``lines`` section of your task, and the configuration reads  ``shutdown``, the module returns ``changed=true`` even though the configuration is already correct. Your task will update the configuration every time it runs."
msgstr ""

#: ../../rst/network/user_guide/faq.rst:64
msgid "To avoid this problem, use long-form commands with the ``*_config`` modules:"
msgstr ""

#: ../../rst/network/user_guide/index.rst:15
msgid "Advanced Topics"
msgstr ""

#: ../../rst/network/user_guide/index.rst:5
msgid "Network Advanced Topics"
msgstr ""

#: ../../rst/network/user_guide/index.rst:7
msgid "Once you have mastered the basics of network automation with Ansible, as presented in :ref:`network_getting_started`, use this guide understand platform-specific details, optimization, and troubleshooting tips for Ansible for network automation."
msgstr ""

#: ../../rst/network/user_guide/index.rst:11
msgid "This guide is intended for network engineers using Ansible for automation. It covers advanced topics. If you understand networks and Ansible, this guide is for you. You may read through the entire guide if you choose, or use the links below to find the specific information you need."
msgstr ""

#: ../../rst/network/user_guide/index.rst:13
msgid "If you're new to Ansible, or new to using Ansible for network automation, start with the :ref:`network_getting_started`."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:5
msgid "Ansible Network Examples"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:7
msgid "This document describes some examples of using Ansible to manage your network infrastructure."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:15
msgid "This example requires the following:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:17
msgid "**Ansible 2.10** (or higher) installed. See :ref:`intro_installation_guide` for more information."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:18
msgid "One or more network devices that are compatible with Ansible."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:19
msgid "Basic understanding of YAML :ref:`yaml_syntax`."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:20
msgid "Basic understanding of Jinja2 templates. See :ref:`playbooks_templating` for more information."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:21
msgid "Basic Linux command line use."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:22
msgid "Basic knowledge of network switch & router configurations."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:26
msgid "Groups and variables in an inventory file"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:28
msgid "An ``inventory`` file is a YAML or INI-like configuration file that defines the mapping of hosts into groups."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:30
msgid "In our example, the inventory file defines the groups ``eos``, ``ios``, ``vyos`` and a \"group of groups\" called ``switches``. Further details about subgroups and inventory files can be found in the :ref:`Ansible inventory Group documentation <subgroups>`."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:32
msgid "Because Ansible is a flexible tool, there are a number of ways to specify connection information and credentials. We recommend using the ``[my_group:vars]`` capability in your inventory file."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:81
msgid "If you use ssh-agent, you do not need the ``ansible_password`` lines. If you use ssh keys, but not ssh-agent, and you have multiple keys, specify the key to use for each connection in the ``[group:vars]`` section with ``ansible_ssh_private_key_file=/path/to/correct/key``. For more information on ``ansible_ssh_`` options see :ref:`behavioral_parameters`."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:85
msgid "Never store passwords in plain text."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:88
msgid "Ansible vault for password encryption"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:90
msgid "The \"Vault\" feature of Ansible allows you to keep sensitive data such as passwords or keys in encrypted files, rather than as plain text in your playbooks or roles. These vault files can then be distributed or placed in source control. See :ref:`playbooks_vault` for more information."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:92
msgid "Here's what it would look like if you specified your SSH passwords (encrypted with Ansible Vault) among your variables:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:108
msgid "Common inventory variables"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:110
msgid "The following variables are common for all platforms in the inventory, though they can be overwritten for a particular inventory group or host."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst
msgid "ansible_connection"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:114
msgid "Ansible uses the ansible-connection setting to determine how to connect to a remote device. When working with Ansible Networking, set this to an appropriate network connection option, such as``ansible.netcommon.network_cli``, so Ansible treats the remote node as a network device with a limited execution environment. Without this setting, Ansible would attempt to use ssh to connect to the remote and execute the Python script on the network device, which would fail because Python generally isn't available on network devices."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst
msgid "ansible_network_os"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:116
msgid "Informs Ansible which Network platform this hosts corresponds to. This is required when using the ``ansible.netcommon.*`` connection options."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst
msgid "ansible_user"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:117
msgid "The user to connect to the remote device (switch) as. Without this the user that is running ``ansible-playbook`` would be used. Specifies which user on the network device the connection"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst
msgid "ansible_password"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:120
msgid "The corresponding password for ``ansible_user`` to log in as. If not specified SSH key will be used."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst
msgid "ansible_become"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:122
msgid "If enable mode (privilege mode) should be used, see the next section."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst
msgid "ansible_become_method"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:124
msgid "Which type of `become` should be used, for ``network_cli`` the only valid choice is ``enable``."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:127
msgid "Privilege escalation"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:129
msgid "Certain network platforms, such as Arista EOS and Cisco IOS, have the concept of different privilege modes. Certain network modules, such as those that modify system state including users, will only work in high privilege states. Ansible supports ``become`` when using ``connection: ansible.netcommon.network_cli``. This allows privileges to be raised for the specific tasks that need them. Adding ``become: yes`` and ``become_method: enable`` informs Ansible to go into privilege mode before executing the task, as shown here:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:139
msgid "For more information, see the :ref:`using become with network modules<become_network>` guide."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:143
msgid "Jump hosts"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:145
msgid "If the Ansible Controller does not have a direct route to the remote device and you need to use a Jump Host, please see the :ref:`Ansible Network Proxy Command <network_delegate_to_vs_ProxyCommand>` guide for details on how to achieve this."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:148
msgid "Example 1: collecting facts and creating backup files with a playbook"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:150
msgid "Ansible facts modules gather system information 'facts' that are available to the rest of your playbook."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:152
msgid "Ansible Networking ships with a number of network-specific facts modules. In this example, we use the ``_facts`` modules :ref:`arista.eos.eos_facts <ansible_collections.arista.eos.eos_facts_module>`, :ref:`cisco.ios.ios_facts <ansible_collections.cisco.ios.ios_facts_module>` and :ref:`vyos.vyos.vyos_facts <ansible_collections.vyos.vyos.vyos_facts_module>` to connect to the remote networking device. As the credentials are not explicitly passed with module arguments, Ansible uses the username and password from the inventory file."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:154
msgid "Ansible's \"Network Fact modules\" gather information from the system and store the results in facts prefixed with ``ansible_net_``. The data collected by these modules is documented in the `Return Values` section of the module docs, in this case :ref:`arista.eos.eos_facts <ansible_collections.arista.eos.eos_facts_module>` and :ref:`vyos.vyos.vyos_facts <ansible_collections.vyos.vyos.vyos_facts_module>`. We can use the facts, such as ``ansible_net_version`` late on in the \"Display some facts\" task."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:156
msgid "To ensure we call the correct mode (``*_facts``) the task is conditionally run based on the group defined in the inventory file, for more information on the use of conditionals in Ansible Playbooks see :ref:`the_when_statement`."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:158
msgid "In this example, we will create an inventory file containing some network switches, then run a playbook to connect to the network devices and return some information about them."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:161
msgid "Step 1: Creating the inventory"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:163
msgid "First, create a file called ``inventory``, containing:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:183
msgid "Step 2: Creating the playbook"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:185
msgid "Next, create a playbook file called ``facts-demo.yml`` containing the following:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:285
msgid "Step 3: Running the playbook"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:287
msgid "To run the playbook, run the following from a console prompt:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:293
msgid "This should return output similar to the following:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:303
msgid "Step 4: Examining the playbook results"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:305
msgid "Next, look at the contents of the file we created containing the switch facts:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:311
msgid "You can also look at the backup files:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:318
msgid "If `ansible-playbook` fails, please follow the debug steps in :ref:`network_debug_troubleshooting`."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:324
msgid "Example 2: simplifying playbooks with network agnostic modules"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:326
msgid "(This example originally appeared in the `Deep Dive on cli_command for Network Automation <https://www.ansible.com/blog/deep-dive-on-cli-command-for-network-automation>`_ blog post by Sean Cavanaugh -`@IPvSean <https://github.com/IPvSean>`_)."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:328
msgid "If you have two or more network platforms in your environment, you can use the network agnostic modules to simplify your playbooks. You can use network agnostic modules such as ``ansible.netcommon.cli_command`` or ``ansible.netcommon.cli_config`` in place of the platform-specific modules such as ``arista.eos.eos_config``, ``cisco.ios.ios_config``, and ``junipernetworks.junos.junos_config``. This reduces the number of tasks and conditionals you need in your playbooks."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:331
msgid "Network agnostic modules require the :ref:`ansible.netcommon.network_cli <ansible_collections.ansible.netcommon.network_cli_connection>` connection plugin."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:335
msgid "Sample playbook with platform-specific modules"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:337
msgid "This example assumes three platforms, Arista EOS, Cisco NXOS, and Juniper JunOS.  Without the network agnostic modules, a sample playbook might contain the following three tasks with platform-specific commands:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:358
msgid "Simplified playbook with ``cli_command`` network agnostic module"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:360
msgid "You can replace these platform-specific modules with the network agnostic ``ansible.netcommon.cli_command`` module as follows:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:407
msgid "If you use groups and group_vars by platform type, this playbook can be further simplified to :"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:423
msgid "You can see a full example of this using group_vars and also a configuration backup example at `Network agnostic examples <https://github.com/network-automation/agnostic_example>`_."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:426
msgid "Using multiple prompts with the  ``ansible.netcommon.cli_command``"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:428
msgid "The ``ansible.netcommon.cli_command`` also supports multiple prompts."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:449
msgid "See the :ref:`ansible.netcommon.cli_command <cli_command_module>` for full documentation on this command."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:453
msgid "Implementation Notes"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:457
msgid "Demo variables"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:459
msgid "Although these tasks are not needed to write data to disk, they are used in this example to demonstrate some methods of accessing facts about the given devices or a named host."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:461
msgid "Ansible ``hostvars`` allows you to access variables from a named host. Without this we would return the details for the current host, rather than the named host."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:463
msgid "For more information, see :ref:`magic_variables_and_hostvars`."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:466
msgid "Get running configuration"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:468
msgid "The :ref:`arista.eos.eos_config <ansible_collections.arista.eos.eos_config_module>` and :ref:`vyos.vyos.vyos_config <ansible_collections.vyos.vyos.vyos_config_module>` modules have a ``backup:`` option that when set will cause the module to create a full backup of the current ``running-config`` from the remote device before any changes are made. The backup file is written to the ``backup`` folder in the playbook root directory. If the directory does not exist, it is created."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:470
msgid "To demonstrate how we can move the backup file to a different location, we register the result and move the file to the path stored in ``backup_path``."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:472
msgid "Note that when using variables from tasks in this way we use double quotes (``\"``) and double curly-brackets (``{{...}}`` to tell Ansible that this is a variable."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:475
msgid "Troubleshooting"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:477
msgid "If you receive an connection error please double check the inventory and playbook for typos or missing lines. If the issue still occurs follow the debug steps in :ref:`network_debug_troubleshooting`."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:481
msgid ":ref:`network_guide`"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:482
msgid ":ref:`intro_inventory`"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:483
msgid ":ref:`Keeping vaulted variables visible <tip_for_variables_and_vaults>`"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:5
msgid "Network Debug and Troubleshooting Guide"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:7
msgid "This section discusses how to debug and troubleshoot network modules in Ansible."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:14
msgid "How to troubleshoot"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:16
msgid "Ansible network automation errors generally fall into one of the following categories:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst
msgid "Authentication issues"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:19
msgid "Not correctly specifying credentials"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:20
msgid "Remote device (network switch/router) not falling back to other other authentication methods"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:21
msgid "SSH key issues"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:439
msgid "Timeout issues"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:23
msgid "Can occur when trying to pull a large amount of data"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:24
msgid "May actually be masking a authentication issue"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:600
msgid "Playbook issues"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:26
msgid "Use of ``delegate_to``, instead of ``ProxyCommand``. See :ref:`network proxy guide <network_delegate_to_vs_ProxyCommand>` for more information."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:28
msgid "``unable to open shell``"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:30
msgid "The ``unable to open shell`` message means that the ``ansible-connection`` daemon has not been able to successfully talk to the remote network device. This generally means that there is an authentication issue. See the \"Authentication and connection issues\" section in this document for more information."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:37
msgid "Enabling Networking logging and how to read the logfile"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:39
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:96
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:156
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:199
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:256
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:294
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:321
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:426
msgid "**Platforms:** Any"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:41
msgid "Ansible includes logging to help diagnose and troubleshoot issues regarding Ansible Networking modules."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:43
msgid "Because logging is very verbose, it is disabled by default. It can be enabled with the :envvar:`ANSIBLE_LOG_PATH` and :envvar:`ANSIBLE_DEBUG` options on the ansible-controller, that is the machine running ``ansible-playbook``."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:45
msgid "Before running ``ansible-playbook``, run the following commands to enable logging::"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:55
msgid "After Ansible has finished running you can inspect the log file which has been created on the ansible-controller:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:73
msgid "From the log notice:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:75
msgid "``p=28990`` Is the PID (Process ID) of the ``ansible-connection`` process"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:76
msgid "``u=fred`` Is the user `running` ansible, not the remote-user you are attempting to connect as"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:77
msgid "``creating new control socket for host veos01:22 as user admin`` host:port as user"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:78
msgid "``control socket path is`` location on disk where the persistent connection socket is created"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:79
msgid "``using connection plugin network_cli`` Informs you that persistent connection is being used"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:80
msgid "``connection established to veos01 in 0:00:22.580626`` Time taken to obtain a shell on the remote device"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:88
msgid "Because the log files are verbose, you can use grep to look for specific information. For example, once you have identified the ``pid`` from the ``creating new control socket for host`` line you can search for other connection log entries::"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:94
msgid "Enabling Networking device interaction logging"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:98
msgid "Ansible includes logging of device interaction in the log file to help diagnose and troubleshoot issues regarding Ansible Networking modules. The messages are logged in the file pointed to by the ``log_path`` configuration option in the Ansible configuration file or by setting the  :envvar:`ANSIBLE_LOG_PATH`."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:103
msgid "The device interaction messages consist of command executed on the target device and the returned response. Since this log data can contain sensitive information including passwords in plain text it is disabled by default. Additionally, in order to prevent accidental leakage of data, a warning will be shown on every task with this setting enabled, specifying which host has it enabled and where the data is being logged."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:108
msgid "Be sure to fully understand the security implications of enabling this option. The device interaction logging can be enabled either globally by setting in configuration file or by setting environment or enabled on per task basis by passing a special variable to the task."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:110
msgid "Before running ``ansible-playbook`` run the following commands to enable logging:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:118
msgid "Enable device interaction logging for a given task"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:130
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:756
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:823
msgid "To make this a global setting, add the following to your ``ansible.cfg`` file:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:137
msgid "or enable the environment variable `ANSIBLE_PERSISTENT_LOG_MESSAGES`:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:144
msgid "If the task is failing on connection initialization itself, you should enable this option globally. If an individual task is failing intermittently this option can be enabled for that task itself to find the root cause."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:147
msgid "After Ansible has finished running you can inspect the log file which has been created on the ansible-controller"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:149
msgid "Be sure to fully understand the security implications of enabling this option as it can log sensitive information in log file thus creating security vulnerability."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:154
msgid "Isolating an error"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:158
msgid "As with any effort to troubleshoot it's important to simplify the test case as much as possible."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:160
msgid "For Ansible this can be done by ensuring you are only running against one remote device:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:162
msgid "Using ``ansible-playbook --limit switch1.example.net...``"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:163
msgid "Using an ad-hoc ``ansible`` command"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:165
msgid "`ad-hoc` refers to running Ansible to perform some quick command using ``/usr/bin/ansible``, rather than the orchestration language, which is ``/usr/bin/ansible-playbook``. In this case we can ensure connectivity by attempting to execute a single command on the remote device::"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:169
msgid "In the above example, we:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:171
msgid "connect to ``switch1.example.net`` specified in the inventory file ``inventory``"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:172
msgid "use the module ``arista.eos.eos_command``"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:173
msgid "run the command ``?``"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:174
msgid "connect using the username ``admin``"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:175
msgid "inform the ``ansible`` command to prompt for the SSH password by specifying ``-k``"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:177
msgid "If you have SSH keys configured correctly, you don't need to specify the ``-k`` parameter."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:179
msgid "If the connection still fails you can combine it with the enable_network_logging parameter. For example:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:190
msgid "Then review the log file and find the relevant error message in the rest of this document."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:197
msgid "Troubleshooting socket path issues"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:201
msgid "The ``Socket path does not exist or cannot be found``  and ``Unable to connect to socket`` messages indicate that the socket used to communicate with the remote network device is unavailable or does not exist."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:216
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:241
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:378
msgid "or"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:229
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:283
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:309
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:335
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:369
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:419
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:450
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:476
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:502
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:513
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:539
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:623
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:795
msgid "Suggestions to resolve:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:231
msgid "Verify that you have write access to the socket path described in the error message."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:233
msgid "Follow the steps detailed in :ref:`enable network logging <enable_network_logging>`."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:235
msgid "If the identified error message from the log file is:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:247
msgid "Follow the steps detailed in :ref:`timeout issues <timeout_issues>`"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:253
msgid "Category \"Unable to open shell\""
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:258
msgid "The ``unable to open shell`` message means that the ``ansible-connection`` daemon has not been able to successfully talk to the remote network device. This generally means that there is an authentication issue. It is a \"catch all\" message, meaning you need to enable :ref:`logging <a_note_about_logging>` to find the underlying issues."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:270
msgid "or:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:285
msgid "Follow the steps detailed in enable_network_logging_."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:287
msgid "Once you've identified the error message from the log file, the specific solution can be found in the rest of this document."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:292
msgid "Error: \"[Errno -2] Name or service not known\""
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:296
msgid "Indicates that the remote host you are trying to connect to can not be reached"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:311
msgid "If you are using the ``provider:`` options ensure that its suboption ``host:`` is set correctly."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:312
msgid "If you are not using ``provider:`` nor top-level arguments ensure your inventory file is correct."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:319
msgid "Error: \"Authentication failed\""
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:323
msgid "Occurs if the credentials (username, passwords, or ssh keys) passed to ``ansible-connection`` (via ``ansible`` or ``ansible-playbook``) can not be used to connect to the remote device."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:337
msgid "If you are specifying credentials via ``password:`` (either directly or via ``provider:``) or the environment variable `ANSIBLE_NET_PASSWORD` it is possible that ``paramiko`` (the Python SSH library that Ansible uses) is using ssh keys, and therefore the credentials you are specifying are being ignored. To find out if this is the case, disable \"look for keys\". This can be done like this:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:343
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:458
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:485
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:550
msgid "To make this a permanent change, add the following to your ``ansible.cfg`` file:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:352
msgid "Error: \"connecting to host <hostname> returned an error\" or \"Bad address\""
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:354
msgid "This may occur if the SSH fingerprint hasn't been added to Paramiko's (the Python SSH library) know hosts file."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:356
msgid "When using persistent connections with Paramiko, the connection runs in a background process.  If the host doesn't already have a valid SSH key, by default Ansible will prompt to add the host key.  This will cause connections running in background processes to fail."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:371
msgid "Use ``ssh-keyscan`` to pre-populate the known_hosts. You need to ensure the keys are correct."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:380
msgid "You can tell Ansible to automatically accept the keys"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:382
msgid "Environment variable method::"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:387
msgid "``ansible.cfg`` method:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:389
msgid "ansible.cfg"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:403
msgid "Error: \"No authentication methods available\""
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:421
msgid "No password or SSH key supplied"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:424
msgid "Clearing Out Persistent Connections"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:428
msgid "In Ansible 2.3, persistent connection sockets are stored in ``~/.ansible/pc`` for all network devices.  When an Ansible playbook runs, the persistent socket connection is displayed when verbose output is specified."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:430
msgid "``<switch> socket_path: /home/fred/.ansible/pc/f64ddfa760``"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:432
msgid "To clear out a persistent connection before it times out (the default timeout is 30 seconds of inactivity), simple delete the socket file."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:442
msgid "Persistent connection idle timeout"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:444
msgid "By default, ``ANSIBLE_PERSISTENT_CONNECT_TIMEOUT`` is set to 30 (seconds). You may see the following error if this value is too low:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:452
msgid "Increase value of persistent connection idle timeout:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:466
msgid "Command timeout"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:468
msgid "By default, ``ANSIBLE_PERSISTENT_COMMAND_TIMEOUT`` is set to 30 (seconds). Prior versions of Ansible had this value set to 10 seconds by default. You may see the following error if this value is too low:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:478
msgid "Option 1 (Global command timeout setting): Increase value of command timeout in configuration file or by setting environment variable."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:492
msgid "Option 2 (Per task command timeout setting): Increase command timeout per task basis. All network modules support a timeout value that can be set on a per task basis. The timeout value controls the amount of time in seconds before the task will fail if the command has not returned."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:498
msgid "For local connection type:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:523
msgid "Some operations take longer than the default 30 seconds to complete.  One good example is saving the current running config on IOS devices to startup config. In this case, changing the timeout value from the default 30 seconds to 60 seconds will prevent the task from failing before the command completes successfully."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:530
msgid "Persistent connection retry timeout"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:532
msgid "By default, ``ANSIBLE_PERSISTENT_CONNECT_RETRY_TIMEOUT`` is set to 15 (seconds). You may see the following error if this value is too low:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:541
msgid "Increase the value of the persistent connection idle timeout. Note: This value should be greater than the SSH timeout value (the timeout value under the defaults section in the configuration file) and less than the value of the persistent connection idle timeout (connect_timeout)."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:559
msgid "Timeout issue due to platform specific login menu with ``network_cli`` connection type"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:561
msgid "In Ansible 2.9 and later, the network_cli connection plugin configuration options are added to handle the platform specific login menu. These options can be set as group/host or tasks variables."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:565
msgid "Example: Handle single login menu prompts with host variables"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:576
msgid "Example: Handle remote host multiple login menu prompts with host variables"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:590
msgid "To handle multiple login menu prompts:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:592
msgid "The values of ``ansible_terminal_initial_prompt`` and ``ansible_terminal_initial_answer`` should be a list."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:593
msgid "The prompt sequence should match the answer sequence."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:594
msgid "The value of ``ansible_terminal_initial_prompt_checkall`` should be set to ``True``."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:596
msgid "If all the prompts in sequence are not received from remote host at the time connection initialization it will result in a timeout."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:602
msgid "This section details issues are caused by issues with the Playbook itself."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:605
msgid "Error: \"Unable to enter configuration mode\""
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:607
msgid "**Platforms:** Arista EOS and Cisco IOS"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:609
msgid "This occurs when you attempt to run a task that requires privileged mode in a user mode shell."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:625
msgid "Use ``connection: ansible.netcommon.network_cli`` and ``become: yes``"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:629
msgid "Proxy Issues"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:634
msgid "delegate_to vs ProxyCommand"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:636
msgid "In order to use a bastion or intermediate jump host to connect to network devices over ``cli`` transport, network modules support the use of ``ProxyCommand``."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:639
msgid "To use ``ProxyCommand``, configure the proxy settings in the Ansible inventory file to specify the proxy host."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:652
msgid "With the configuration above, simply build and run the playbook as normal with no additional changes necessary.  The network module will now connect to the network device by first connecting to the host specified in ``ansible_ssh_common_args``, which is ``bastion01`` in the above example."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:657
msgid "You can also set the proxy target for all hosts by using environment variables."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:664
msgid "Using bastion/jump host with netconf connection"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:667
msgid "Enabling jump host setting"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:673
msgid "Bastion/jump host with netconf connection can be enabled by:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:671
msgid "Setting Ansible variable ``ansible_netconf_ssh_config`` either to ``True`` or custom ssh config file path"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:672
msgid "Setting environment variable ``ANSIBLE_NETCONF_SSH_CONFIG`` to ``True`` or custom ssh config file path"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:673
msgid "Setting ``ssh_config = 1`` or ``ssh_config = <ssh-file-path>`` under ``netconf_connection`` section"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:675
msgid "If the configuration variable is set to 1 the proxycommand and other ssh variables are read from default ssh config file (~/.ssh/config)."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:678
msgid "If the configuration variable is set to file path the proxycommand and other ssh variables are read from the given custom ssh file path"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:682
msgid "Example ssh config file (~/.ssh/config)"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:709
msgid "Example Ansible inventory file"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:723
msgid "Using ``ProxyCommand`` with passwords via variables"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:725
msgid "By design, SSH doesn't support providing passwords via environment variables. This is done to prevent secrets from leaking out, for example in ``ps`` output."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:728
msgid "We recommend using SSH Keys, and if needed an ssh-agent, rather than passwords, where ever possible."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:731
msgid "Miscellaneous Issues"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:735
msgid "Intermittent failure while using ``ansible.netcommon.network_cli`` connection type"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:737
msgid "If the command prompt received in response is not matched correctly within the ``ansible.netcommon.network_cli`` connection plugin the task might fail intermittently with truncated response or with the error message ``operation requires privilege escalation``. Starting in 2.7.1 a new buffer read timer is added to ensure prompts are matched properly and a complete response is send in output. The timer default value is 0.2 seconds and can be adjusted on a per task basis or can be set globally in seconds."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:744
msgid "Example Per task timer setting"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:763
msgid "This timer delay per command executed on remote host can be disabled by setting the value to zero."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:767
msgid "Task failure due to mismatched error regex within command response using ``ansible.netcommon.network_cli`` connection type"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:769
msgid "In Ansible 2.9 and later, the ``ansible.netcommon.network_cli`` connection plugin configuration options are added to handle the stdout and stderr regex to identify if the command execution response consist of a normal response or an error response. These options can be set group/host variables or as tasks variables."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:774
msgid "Example: For mismatched error response"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:784
msgid "Playbook run output:"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:797
msgid "Modify the error regex for individual task."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:810
msgid "The terminal plugin regex options ``ansible_terminal_stderr_re`` and ``ansible_terminal_stdout_re`` have ``pattern`` and ``flags`` as keys. The value of the ``flags`` key should be a value that is accepted by the ``re.compile`` python method."
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:816
msgid "Intermittent failure while using ``ansible.netcommon.network_cli`` connection type due to slower network or remote target host"
msgstr ""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:818
msgid "In Ansible 2.9 and later, the ``ansible.netcommon.network_cli`` connection plugin configuration option is added to control the number of attempts to connect to a remote host. The default number of attempts is three. After every retry attempt the delay between retries is increased by power of 2 in seconds until either the maximum attempts are exhausted or either the ``persistent_command_timeout`` or ``persistent_connect_timeout`` timers are triggered."
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:5
msgid "Network Resource Modules"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:7
msgid "Ansible network resource modules simplify and standardize how you manage different network devices. Network devices separate configuration into sections (such as interfaces and VLANs) that apply to a network service. Ansible network resource modules take advantage of this to allow you to configure subsections or *resources* within the network device configuration. Network resource modules provide a consistent experience across different network devices."
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:14
msgid "Network resource module states"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:16
msgid "You use the network resource modules by assigning a state to what you want the module to do. The resource modules support the following states:"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:40
msgid "Using network resource modules"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:42
msgid "This example configures the L3 interface resource on a Cisco IOS device, based on different state settings."
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:51
msgid "The following table shows an example of how an initial resource configuration changes with this task for different states."
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:54
msgid "Resource starting configuration"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:54
msgid "task-provided configuration (YAML)"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:54
msgid "Final resource configuration on device"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:61
msgid "*merged*"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:69
msgid "*replaced*"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:73
msgid "*overridden*"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:73
msgid "Incorrect use case. This would remove all interfaces from the device"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:75
msgid "(including the mgmt interface) except"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:76
msgid "the configured loopback100"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:81
msgid "*deleted*"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:85
msgid "Network resource modules return the following details:"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:87
msgid "The *before* state -  the existing resource configuration before the task was executed."
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:88
msgid "The *after* state - the new resource configuration that exists on the network device after the task was executed."
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:89
msgid "Commands - any commands configured on the device."
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:122
msgid "Example: Verifying the network device configuration has not changed"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:124
msgid "The following playbook uses the :ref:`arista.eos.eos_l3_interfaces <ansible_collections.arista.eos.eos_l3_interfaces_module>` module to gather a subset of the network device configuration (Layer 3 interfaces only) and verifies the information is accurate and has not changed. This playbook passes the results of :ref:`arista.eos.eos_facts <ansible_collections.arista.eos.eos_facts_module>` directly to the ``arista.eos.eos_l3_interfaces`` module."
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:148
msgid "Example: Acquiring and updating VLANs on a network device"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:150
msgid "This example shows how you can use resource modules to:"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:152
msgid "Retrieve the current configuration on a network device."
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:153
msgid "Save that configuration locally."
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:154
msgid "Update that configuration and apply it to the network device."
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:156
msgid "This example uses the ``cisco.ios.ios_vlans`` resource module to retrieve and update the VLANs on an IOS device."
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:158
msgid "Retrieve the current IOS VLAN configuration:"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:170
msgid "Store the VLAN configuration locally:"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:179
msgid "Modify the stored file to update the VLAN configuration locally."
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:181
msgid "Merge the updated VLAN configuration with the existing configuration on the device:"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:193
msgid "`Network Features in Ansible 2.9 <https://www.ansible.com/blog/network-features-coming-soon-in-ansible-engine-2.9>`_"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:194
msgid "A introductory blog post on network resource modules."
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:195
msgid "`Deep Dive into Network Resource Modules <https://www.ansible.com/deep-dive-into-ansible-network-resource-module>`_"
msgstr ""

#: ../../rst/network/user_guide/network_resource_modules.rst:196
msgid "A deeper dive presentation into network resource modules."
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:5
msgid "Working with command output and prompts in network modules"
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:11
msgid "Conditionals in networking modules"
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:13
msgid "Ansible allows you to use conditionals to control the flow of your playbooks. Ansible networking command modules use the following unique conditional statements."
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:15
msgid "``eq`` - Equal"
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:16
msgid "``neq`` - Not equal"
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:17
msgid "``gt`` - Greater than"
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:18
msgid "``ge`` - Greater than or equal"
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:19
msgid "``lt`` - Less than"
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:20
msgid "``le`` - Less than or equal"
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:21
msgid "``contains`` - Object contains specified item"
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:24
msgid "Conditional statements evaluate the results from the commands that are executed remotely on the device.  Once the task executes the command set, the ``wait_for`` argument can be used to evaluate the results before returning control to the Ansible playbook."
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:29
msgid "For example::"
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:39
msgid "In the above example task, the command :code:`show interface Ethernet4 | json` is executed on the remote device and the results are evaluated.  If the path :code:`(result[0].interfaces.Ethernet4.interfaceStatus)` is not equal to \"connected\", then the command is retried.  This process continues until either the condition is satisfied or the number of retries has expired (by default, this is 10 retries at 1 second intervals)."
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:47
msgid "The commands module can also evaluate more than one set of command results in an interface.  For instance::"
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:60
msgid "In the above example, two commands are executed on the remote device, and the results are evaluated.  By specifying the result index value (0 or 1), the correct result output is checked against the conditional."
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:65
msgid "The ``wait_for`` argument must always start with result and then the command index in ``[]``, where ``0`` is the first command in the commands list, ``1`` is the second command, ``2`` is the third and so on."
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:71
msgid "Handling prompts in network modules"
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:73
msgid "Network devices may require that you answer a prompt before performing a change on the device. Individual network modules such as :ref:`cisco.ios.ios_command <ansible_collections.cisco.ios.ios_command_module>` and :ref:`cisco.nxos.nxos_command <ansible_collections.cisco.nxos.nxos_command_module>` can handle this with a ``prompt`` parameter."
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:77
msgid "``prompt`` is a Python regex. If you add special characters such as ``?`` in the ``prompt`` value, the prompt won't match and you will get a timeout. To avoid this, ensure that the ``prompt`` value is a Python regex that matches the actual device prompt. Any special characters must be handled correctly in the ``prompt`` regex."
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:79
msgid "You can also use the :ref:`ansible.netcommon.cli_command <ansible_collections.ansible.netcommon.cli_command_module>` to handle multiple prompts."
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:97
msgid "You must list the prompt and the answers in the same order (that is, prompt[0] is answered by answer[0])."
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:99
msgid "In the above example, ``check_all: True`` ensures that the task gives the matching answer to each prompt. Without that setting, a task with multiple prompts would give the first answer to every prompt."
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:101
msgid "In the following example, the second answer would be ignored and ``y`` would be the answer given to both prompts. That is, this task only works because both answers are identical. Also notice again that ``prompt`` must be a Python regex, which is why the ``?`` is escaped in the first prompt."
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:119
msgid "`Rebooting network devices with Ansible <https://www.ansible.com/blog/rebooting-network-devices-with-ansible>`_"
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:119
msgid "Examples using ``wait_for``, ``wait_for_connection``, and ``prompt`` for network devices."
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:121
msgid "`Deep dive on cli_command <https://www.ansible.com/blog/deep-dive-on-cli-command-for-network-automation>`_"
msgstr ""

#: ../../rst/network/user_guide/network_working_with_command_output.rst:122
msgid "Detailed overview of how to use the ``cli_command``."
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:5
msgid "CloudEngine OS Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:7
msgid "CloudEngine CE OS is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and supports multiple connections. This page offers details on how each connection works in Ansible and how to use it."
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:13
#: ../../rst/network/user_guide/platform_cnos.rst:13
#: ../../rst/network/user_guide/platform_dellos10.rst:13
#: ../../rst/network/user_guide/platform_dellos6.rst:13
#: ../../rst/network/user_guide/platform_dellos9.rst:13
#: ../../rst/network/user_guide/platform_enos.rst:13
#: ../../rst/network/user_guide/platform_eos.rst:13
#: ../../rst/network/user_guide/platform_eric_eccli.rst:13
#: ../../rst/network/user_guide/platform_exos.rst:13
#: ../../rst/network/user_guide/platform_frr.rst:13
#: ../../rst/network/user_guide/platform_icx.rst:13
#: ../../rst/network/user_guide/platform_ios.rst:13
#: ../../rst/network/user_guide/platform_iosxr.rst:13
#: ../../rst/network/user_guide/platform_ironware.rst:13
#: ../../rst/network/user_guide/platform_junos.rst:13
#: ../../rst/network/user_guide/platform_meraki.rst:13
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:13
#: ../../rst/network/user_guide/platform_netvisor.rst:14
#: ../../rst/network/user_guide/platform_nos.rst:14
#: ../../rst/network/user_guide/platform_nxos.rst:13
#: ../../rst/network/user_guide/platform_routeros.rst:14
#: ../../rst/network/user_guide/platform_slxos.rst:14
#: ../../rst/network/user_guide/platform_voss.rst:14
#: ../../rst/network/user_guide/platform_vyos.rst:13
msgid "Connections available"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:19
#: ../../rst/network/user_guide/platform_cnos.rst:19
#: ../../rst/network/user_guide/platform_dellos10.rst:19
#: ../../rst/network/user_guide/platform_dellos6.rst:19
#: ../../rst/network/user_guide/platform_dellos9.rst:19
#: ../../rst/network/user_guide/platform_enos.rst:19
#: ../../rst/network/user_guide/platform_eos.rst:19
#: ../../rst/network/user_guide/platform_eric_eccli.rst:19
#: ../../rst/network/user_guide/platform_exos.rst:20
#: ../../rst/network/user_guide/platform_frr.rst:19
#: ../../rst/network/user_guide/platform_icx.rst:19
#: ../../rst/network/user_guide/platform_ios.rst:19
#: ../../rst/network/user_guide/platform_iosxr.rst:19
#: ../../rst/network/user_guide/platform_ironware.rst:19
#: ../../rst/network/user_guide/platform_junos.rst:19
#: ../../rst/network/user_guide/platform_netvisor.rst:20
#: ../../rst/network/user_guide/platform_nos.rst:20
#: ../../rst/network/user_guide/platform_nxos.rst:19
#: ../../rst/network/user_guide/platform_routeros.rst:20
#: ../../rst/network/user_guide/platform_slxos.rst:20
#: ../../rst/network/user_guide/platform_voss.rst:20
#: ../../rst/network/user_guide/platform_vyos.rst:19
msgid "CLI"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:19
#: ../../rst/network/user_guide/platform_iosxr.rst:19
#: ../../rst/network/user_guide/platform_junos.rst:19
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:18
msgid "NETCONF"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:23
#: ../../rst/network/user_guide/platform_cnos.rst:21
#: ../../rst/network/user_guide/platform_dellos10.rst:21
#: ../../rst/network/user_guide/platform_dellos6.rst:21
#: ../../rst/network/user_guide/platform_dellos9.rst:21
#: ../../rst/network/user_guide/platform_enos.rst:21
#: ../../rst/network/user_guide/platform_eos.rst:21
#: ../../rst/network/user_guide/platform_eric_eccli.rst:21
#: ../../rst/network/user_guide/platform_exos.rst:22
#: ../../rst/network/user_guide/platform_frr.rst:21
#: ../../rst/network/user_guide/platform_icx.rst:21
#: ../../rst/network/user_guide/platform_ios.rst:21
#: ../../rst/network/user_guide/platform_iosxr.rst:25
#: ../../rst/network/user_guide/platform_ironware.rst:21
#: ../../rst/network/user_guide/platform_junos.rst:24
#: ../../rst/network/user_guide/platform_netvisor.rst:22
#: ../../rst/network/user_guide/platform_nos.rst:22
#: ../../rst/network/user_guide/platform_nxos.rst:21
#: ../../rst/network/user_guide/platform_routeros.rst:22
#: ../../rst/network/user_guide/platform_slxos.rst:22
#: ../../rst/network/user_guide/platform_voss.rst:22
#: ../../rst/network/user_guide/platform_vyos.rst:21
msgid "SSH"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:25
#: ../../rst/network/user_guide/platform_cnos.rst:23
#: ../../rst/network/user_guide/platform_dellos10.rst:23
#: ../../rst/network/user_guide/platform_dellos6.rst:23
#: ../../rst/network/user_guide/platform_dellos9.rst:23
#: ../../rst/network/user_guide/platform_enos.rst:23
#: ../../rst/network/user_guide/platform_eos.rst:23
#: ../../rst/network/user_guide/platform_eric_eccli.rst:23
#: ../../rst/network/user_guide/platform_exos.rst:24
#: ../../rst/network/user_guide/platform_frr.rst:23
#: ../../rst/network/user_guide/platform_icx.rst:23
#: ../../rst/network/user_guide/platform_ios.rst:23
#: ../../rst/network/user_guide/platform_iosxr.rst:27
#: ../../rst/network/user_guide/platform_ironware.rst:23
#: ../../rst/network/user_guide/platform_junos.rst:26
#: ../../rst/network/user_guide/platform_meraki.rst:23
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:25
#: ../../rst/network/user_guide/platform_netvisor.rst:24
#: ../../rst/network/user_guide/platform_nos.rst:24
#: ../../rst/network/user_guide/platform_nxos.rst:23
#: ../../rst/network/user_guide/platform_routeros.rst:24
#: ../../rst/network/user_guide/platform_slxos.rst:24
#: ../../rst/network/user_guide/platform_voss.rst:24
#: ../../rst/network/user_guide/platform_vyos.rst:23
msgid "Credentials"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:25
#: ../../rst/network/user_guide/platform_cnos.rst:23
#: ../../rst/network/user_guide/platform_dellos10.rst:23
#: ../../rst/network/user_guide/platform_dellos6.rst:23
#: ../../rst/network/user_guide/platform_dellos9.rst:23
#: ../../rst/network/user_guide/platform_enos.rst:23
#: ../../rst/network/user_guide/platform_eos.rst:23
#: ../../rst/network/user_guide/platform_eric_eccli.rst:23
#: ../../rst/network/user_guide/platform_exos.rst:24
#: ../../rst/network/user_guide/platform_frr.rst:23
#: ../../rst/network/user_guide/platform_icx.rst:23
#: ../../rst/network/user_guide/platform_ios.rst:23
#: ../../rst/network/user_guide/platform_iosxr.rst:27
#: ../../rst/network/user_guide/platform_ironware.rst:23
#: ../../rst/network/user_guide/platform_junos.rst:26
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:25
#: ../../rst/network/user_guide/platform_netvisor.rst:24
#: ../../rst/network/user_guide/platform_nos.rst:24
#: ../../rst/network/user_guide/platform_nxos.rst:23
#: ../../rst/network/user_guide/platform_routeros.rst:24
#: ../../rst/network/user_guide/platform_slxos.rst:24
#: ../../rst/network/user_guide/platform_voss.rst:24
#: ../../rst/network/user_guide/platform_vyos.rst:23
msgid "uses SSH keys / SSH-agent if present"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:27
#: ../../rst/network/user_guide/platform_cnos.rst:25
#: ../../rst/network/user_guide/platform_dellos10.rst:25
#: ../../rst/network/user_guide/platform_dellos6.rst:25
#: ../../rst/network/user_guide/platform_dellos9.rst:25
#: ../../rst/network/user_guide/platform_enos.rst:25
#: ../../rst/network/user_guide/platform_eos.rst:25
#: ../../rst/network/user_guide/platform_eric_eccli.rst:25
#: ../../rst/network/user_guide/platform_exos.rst:26
#: ../../rst/network/user_guide/platform_frr.rst:25
#: ../../rst/network/user_guide/platform_icx.rst:25
#: ../../rst/network/user_guide/platform_ios.rst:25
#: ../../rst/network/user_guide/platform_iosxr.rst:29
#: ../../rst/network/user_guide/platform_ironware.rst:25
#: ../../rst/network/user_guide/platform_junos.rst:28
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:27
#: ../../rst/network/user_guide/platform_netvisor.rst:26
#: ../../rst/network/user_guide/platform_nos.rst:26
#: ../../rst/network/user_guide/platform_nxos.rst:25
#: ../../rst/network/user_guide/platform_routeros.rst:26
#: ../../rst/network/user_guide/platform_slxos.rst:26
#: ../../rst/network/user_guide/platform_voss.rst:26
#: ../../rst/network/user_guide/platform_vyos.rst:25
msgid "accepts ``-u myuser -k`` if using password"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:29
#: ../../rst/network/user_guide/platform_cnos.rst:27
#: ../../rst/network/user_guide/platform_dellos10.rst:27
#: ../../rst/network/user_guide/platform_dellos6.rst:27
#: ../../rst/network/user_guide/platform_dellos9.rst:27
#: ../../rst/network/user_guide/platform_enos.rst:27
#: ../../rst/network/user_guide/platform_eos.rst:27
#: ../../rst/network/user_guide/platform_eric_eccli.rst:27
#: ../../rst/network/user_guide/platform_exos.rst:28
#: ../../rst/network/user_guide/platform_frr.rst:27
#: ../../rst/network/user_guide/platform_icx.rst:27
#: ../../rst/network/user_guide/platform_ios.rst:27
#: ../../rst/network/user_guide/platform_iosxr.rst:31
#: ../../rst/network/user_guide/platform_ironware.rst:27
#: ../../rst/network/user_guide/platform_junos.rst:30
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:29
#: ../../rst/network/user_guide/platform_netvisor.rst:28
#: ../../rst/network/user_guide/platform_nos.rst:28
#: ../../rst/network/user_guide/platform_nxos.rst:27
#: ../../rst/network/user_guide/platform_routeros.rst:28
#: ../../rst/network/user_guide/platform_slxos.rst:28
#: ../../rst/network/user_guide/platform_voss.rst:28
#: ../../rst/network/user_guide/platform_vyos.rst:27
msgid "Indirect Access"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:29
#: ../../rst/network/user_guide/platform_cnos.rst:27
#: ../../rst/network/user_guide/platform_dellos10.rst:27
#: ../../rst/network/user_guide/platform_dellos6.rst:27
#: ../../rst/network/user_guide/platform_dellos9.rst:27
#: ../../rst/network/user_guide/platform_enos.rst:27
#: ../../rst/network/user_guide/platform_eos.rst:27
#: ../../rst/network/user_guide/platform_eric_eccli.rst:27
#: ../../rst/network/user_guide/platform_exos.rst:28
#: ../../rst/network/user_guide/platform_frr.rst:27
#: ../../rst/network/user_guide/platform_icx.rst:27
#: ../../rst/network/user_guide/platform_ios.rst:27
#: ../../rst/network/user_guide/platform_iosxr.rst:31
#: ../../rst/network/user_guide/platform_ironware.rst:27
#: ../../rst/network/user_guide/platform_junos.rst:30
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:29
#: ../../rst/network/user_guide/platform_netvisor.rst:28
#: ../../rst/network/user_guide/platform_nos.rst:28
#: ../../rst/network/user_guide/platform_nxos.rst:27
#: ../../rst/network/user_guide/platform_routeros.rst:28
#: ../../rst/network/user_guide/platform_slxos.rst:28
#: ../../rst/network/user_guide/platform_voss.rst:28
#: ../../rst/network/user_guide/platform_vyos.rst:27
msgid "via a bastion (jump host)"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:31
#: ../../rst/network/user_guide/platform_cnos.rst:29
#: ../../rst/network/user_guide/platform_dellos10.rst:29
#: ../../rst/network/user_guide/platform_dellos6.rst:29
#: ../../rst/network/user_guide/platform_dellos9.rst:29
#: ../../rst/network/user_guide/platform_enos.rst:29
#: ../../rst/network/user_guide/platform_eos.rst:29
#: ../../rst/network/user_guide/platform_eric_eccli.rst:29
#: ../../rst/network/user_guide/platform_exos.rst:30
#: ../../rst/network/user_guide/platform_frr.rst:29
#: ../../rst/network/user_guide/platform_icx.rst:29
#: ../../rst/network/user_guide/platform_ios.rst:29
#: ../../rst/network/user_guide/platform_iosxr.rst:33
#: ../../rst/network/user_guide/platform_ironware.rst:29
#: ../../rst/network/user_guide/platform_junos.rst:32
#: ../../rst/network/user_guide/platform_meraki.rst:25
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:31
#: ../../rst/network/user_guide/platform_netvisor.rst:30
#: ../../rst/network/user_guide/platform_nos.rst:30
#: ../../rst/network/user_guide/platform_nxos.rst:29
#: ../../rst/network/user_guide/platform_routeros.rst:30
#: ../../rst/network/user_guide/platform_slxos.rst:30
#: ../../rst/network/user_guide/platform_voss.rst:30
#: ../../rst/network/user_guide/platform_vyos.rst:29
msgid "Connection Settings"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:32
#: ../../rst/network/user_guide/platform_exos.rst:31
#: ../../rst/network/user_guide/platform_iosxr.rst:34
#: ../../rst/network/user_guide/platform_nxos.rst:30
msgid "``ansible_connection:``"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:32
#: ../../rst/network/user_guide/platform_exos.rst:31
#: ../../rst/network/user_guide/platform_iosxr.rst:34
#: ../../rst/network/user_guide/platform_nxos.rst:30
msgid "``ansible.netcommon.network_cli``"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:32
#: ../../rst/network/user_guide/platform_iosxr.rst:34
msgid "``ansible.netcommon.netconf``"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:34
#: ../../rst/network/user_guide/platform_cnos.rst:31
#: ../../rst/network/user_guide/platform_dellos10.rst:31
#: ../../rst/network/user_guide/platform_dellos6.rst:31
#: ../../rst/network/user_guide/platform_dellos9.rst:31
#: ../../rst/network/user_guide/platform_enos.rst:31
#: ../../rst/network/user_guide/platform_eos.rst:33
#: ../../rst/network/user_guide/platform_eric_eccli.rst:31
#: ../../rst/network/user_guide/platform_exos.rst:33
#: ../../rst/network/user_guide/platform_frr.rst:31
#: ../../rst/network/user_guide/platform_icx.rst:31
#: ../../rst/network/user_guide/platform_ios.rst:31
#: ../../rst/network/user_guide/platform_iosxr.rst:36
#: ../../rst/network/user_guide/platform_ironware.rst:31
#: ../../rst/network/user_guide/platform_junos.rst:35
#: ../../rst/network/user_guide/platform_netvisor.rst:32
#: ../../rst/network/user_guide/platform_nos.rst:32
#: ../../rst/network/user_guide/platform_nxos.rst:32
#: ../../rst/network/user_guide/platform_routeros.rst:32
#: ../../rst/network/user_guide/platform_slxos.rst:32
#: ../../rst/network/user_guide/platform_voss.rst:32
#: ../../rst/network/user_guide/platform_vyos.rst:31
msgid "|enable_mode|"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:34
msgid "not supported by ce OS"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:36
#: ../../rst/network/user_guide/platform_cnos.rst:35
#: ../../rst/network/user_guide/platform_dellos10.rst:35
#: ../../rst/network/user_guide/platform_dellos6.rst:35
#: ../../rst/network/user_guide/platform_dellos9.rst:35
#: ../../rst/network/user_guide/platform_enos.rst:35
#: ../../rst/network/user_guide/platform_eos.rst:39
#: ../../rst/network/user_guide/platform_eric_eccli.rst:33
#: ../../rst/network/user_guide/platform_exos.rst:35
#: ../../rst/network/user_guide/platform_frr.rst:33
#: ../../rst/network/user_guide/platform_icx.rst:34
#: ../../rst/network/user_guide/platform_ios.rst:34
#: ../../rst/network/user_guide/platform_iosxr.rst:38
#: ../../rst/network/user_guide/platform_ironware.rst:35
#: ../../rst/network/user_guide/platform_junos.rst:37
#: ../../rst/network/user_guide/platform_meraki.rst:27
#: ../../rst/network/user_guide/platform_netvisor.rst:34
#: ../../rst/network/user_guide/platform_nos.rst:34
#: ../../rst/network/user_guide/platform_nxos.rst:36
#: ../../rst/network/user_guide/platform_routeros.rst:34
#: ../../rst/network/user_guide/platform_slxos.rst:34
#: ../../rst/network/user_guide/platform_voss.rst:35
#: ../../rst/network/user_guide/platform_vyos.rst:33
msgid "Returned Data Format"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:36
#: ../../rst/network/user_guide/platform_iosxr.rst:38
#: ../../rst/network/user_guide/platform_vyos.rst:33
msgid "Refer to individual module documentation"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:41
msgid "The ``ansible_connection: local`` has been deprecated. Please use  ``ansible_connection: ansible.netcommon.netconf`` or ``ansible_connection=ansible.netcommon.network_cli`` instead."
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:44
#: ../../rst/network/user_guide/platform_cnos.rst:43
#: ../../rst/network/user_guide/platform_dellos10.rst:44
#: ../../rst/network/user_guide/platform_dellos6.rst:43
#: ../../rst/network/user_guide/platform_dellos9.rst:43
#: ../../rst/network/user_guide/platform_enos.rst:45
#: ../../rst/network/user_guide/platform_eos.rst:48
#: ../../rst/network/user_guide/platform_eric_eccli.rst:41
#: ../../rst/network/user_guide/platform_exos.rst:43
#: ../../rst/network/user_guide/platform_frr.rst:40
#: ../../rst/network/user_guide/platform_icx.rst:41
#: ../../rst/network/user_guide/platform_ios.rst:43
#: ../../rst/network/user_guide/platform_iosxr.rst:47
#: ../../rst/network/user_guide/platform_ironware.rst:44
#: ../../rst/network/user_guide/platform_junos.rst:48
#: ../../rst/network/user_guide/platform_netvisor.rst:42
#: ../../rst/network/user_guide/platform_nos.rst:42
#: ../../rst/network/user_guide/platform_nxos.rst:45
#: ../../rst/network/user_guide/platform_routeros.rst:43
#: ../../rst/network/user_guide/platform_slxos.rst:43
#: ../../rst/network/user_guide/platform_voss.rst:44
#: ../../rst/network/user_guide/platform_vyos.rst:42
msgid "Using CLI in Ansible"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:47
msgid "Example CLI inventory ``[ce:vars]``"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:59
#: ../../rst/network/user_guide/platform_cnos.rst:60
#: ../../rst/network/user_guide/platform_dellos10.rst:61
#: ../../rst/network/user_guide/platform_dellos6.rst:60
#: ../../rst/network/user_guide/platform_dellos9.rst:60
#: ../../rst/network/user_guide/platform_enos.rst:62
#: ../../rst/network/user_guide/platform_eos.rst:65
#: ../../rst/network/user_guide/platform_eric_eccli.rst:55
#: ../../rst/network/user_guide/platform_exos.rst:57
#: ../../rst/network/user_guide/platform_frr.rst:54
#: ../../rst/network/user_guide/platform_icx.rst:58
#: ../../rst/network/user_guide/platform_ios.rst:60
#: ../../rst/network/user_guide/platform_iosxr.rst:62
#: ../../rst/network/user_guide/platform_ironware.rst:61
#: ../../rst/network/user_guide/platform_junos.rst:63
#: ../../rst/network/user_guide/platform_netvisor.rst:56
#: ../../rst/network/user_guide/platform_nos.rst:56
#: ../../rst/network/user_guide/platform_nxos.rst:62
#: ../../rst/network/user_guide/platform_routeros.rst:60
#: ../../rst/network/user_guide/platform_slxos.rst:57
#: ../../rst/network/user_guide/platform_voss.rst:60
#: ../../rst/network/user_guide/platform_vyos.rst:56
msgid "If you are using SSH keys (including an ssh-agent) you can remove the ``ansible_password`` configuration."
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:60
#: ../../rst/network/user_guide/platform_cnos.rst:61
#: ../../rst/network/user_guide/platform_dellos10.rst:62
#: ../../rst/network/user_guide/platform_dellos6.rst:61
#: ../../rst/network/user_guide/platform_dellos9.rst:61
#: ../../rst/network/user_guide/platform_enos.rst:63
#: ../../rst/network/user_guide/platform_eos.rst:66
#: ../../rst/network/user_guide/platform_eric_eccli.rst:56
#: ../../rst/network/user_guide/platform_exos.rst:58
#: ../../rst/network/user_guide/platform_frr.rst:55
#: ../../rst/network/user_guide/platform_icx.rst:59
#: ../../rst/network/user_guide/platform_ios.rst:61
#: ../../rst/network/user_guide/platform_iosxr.rst:63
#: ../../rst/network/user_guide/platform_ironware.rst:62
#: ../../rst/network/user_guide/platform_junos.rst:64
#: ../../rst/network/user_guide/platform_netvisor.rst:57
#: ../../rst/network/user_guide/platform_nos.rst:57
#: ../../rst/network/user_guide/platform_nxos.rst:63
#: ../../rst/network/user_guide/platform_routeros.rst:61
#: ../../rst/network/user_guide/platform_slxos.rst:58
#: ../../rst/network/user_guide/platform_voss.rst:61
#: ../../rst/network/user_guide/platform_vyos.rst:57
msgid "If you are accessing your host directly (not through a bastion/jump host) you can remove the ``ansible_ssh_common_args`` configuration."
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:61
#: ../../rst/network/user_guide/platform_cnos.rst:62
#: ../../rst/network/user_guide/platform_dellos10.rst:63
#: ../../rst/network/user_guide/platform_dellos6.rst:62
#: ../../rst/network/user_guide/platform_dellos9.rst:62
#: ../../rst/network/user_guide/platform_enos.rst:64
#: ../../rst/network/user_guide/platform_eos.rst:67
#: ../../rst/network/user_guide/platform_eric_eccli.rst:57
#: ../../rst/network/user_guide/platform_exos.rst:59
#: ../../rst/network/user_guide/platform_frr.rst:56
#: ../../rst/network/user_guide/platform_icx.rst:60
#: ../../rst/network/user_guide/platform_ios.rst:62
#: ../../rst/network/user_guide/platform_iosxr.rst:64
#: ../../rst/network/user_guide/platform_ironware.rst:63
#: ../../rst/network/user_guide/platform_junos.rst:65
#: ../../rst/network/user_guide/platform_netvisor.rst:58
#: ../../rst/network/user_guide/platform_nos.rst:58
#: ../../rst/network/user_guide/platform_nxos.rst:64
#: ../../rst/network/user_guide/platform_routeros.rst:62
#: ../../rst/network/user_guide/platform_slxos.rst:59
#: ../../rst/network/user_guide/platform_voss.rst:62
#: ../../rst/network/user_guide/platform_vyos.rst:58
msgid "If you are accessing your host through a bastion/jump host, you cannot include your SSH password in the ``ProxyCommand`` directive. To prevent secrets from leaking out (for example in ``ps`` output), SSH does not support providing passwords via environment variables."
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:64
#: ../../rst/network/user_guide/platform_cnos.rst:65
#: ../../rst/network/user_guide/platform_dellos10.rst:66
#: ../../rst/network/user_guide/platform_dellos6.rst:65
#: ../../rst/network/user_guide/platform_dellos9.rst:65
#: ../../rst/network/user_guide/platform_enos.rst:67
#: ../../rst/network/user_guide/platform_eos.rst:70
#: ../../rst/network/user_guide/platform_eric_eccli.rst:60
#: ../../rst/network/user_guide/platform_exos.rst:62
#: ../../rst/network/user_guide/platform_frr.rst:59
#: ../../rst/network/user_guide/platform_icx.rst:63
#: ../../rst/network/user_guide/platform_ios.rst:65
#: ../../rst/network/user_guide/platform_iosxr.rst:67
#: ../../rst/network/user_guide/platform_ironware.rst:66
#: ../../rst/network/user_guide/platform_junos.rst:68
#: ../../rst/network/user_guide/platform_netvisor.rst:61
#: ../../rst/network/user_guide/platform_nos.rst:61
#: ../../rst/network/user_guide/platform_nxos.rst:67
#: ../../rst/network/user_guide/platform_routeros.rst:66
#: ../../rst/network/user_guide/platform_slxos.rst:62
#: ../../rst/network/user_guide/platform_voss.rst:65
#: ../../rst/network/user_guide/platform_vyos.rst:61
msgid "Example CLI task"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:75
#: ../../rst/network/user_guide/platform_iosxr.rst:78
#: ../../rst/network/user_guide/platform_junos.rst:79
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:38
msgid "Using NETCONF in Ansible"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:78
#: ../../rst/network/user_guide/platform_iosxr.rst:81
#: ../../rst/network/user_guide/platform_junos.rst:82
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:41
msgid "Enabling NETCONF"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:80
#: ../../rst/network/user_guide/platform_iosxr.rst:83
#: ../../rst/network/user_guide/platform_junos.rst:84
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:43
msgid "Before you can use NETCONF to connect to a switch, you must:"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:82
#: ../../rst/network/user_guide/platform_iosxr.rst:85
#: ../../rst/network/user_guide/platform_junos.rst:86
msgid "install the ``ncclient`` python package on your control node(s) with ``pip install ncclient``"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:83
msgid "enable NETCONF on the CloudEngine OS device(s)"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:85
msgid "To enable NETCONF on a new switch using Ansible, use the ``community.network.ce_config`` module with the CLI connection. Set up your platform-level variables just like in the CLI example above, then run a playbook task like this:"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:96
#: ../../rst/network/user_guide/platform_iosxr.rst:97
#: ../../rst/network/user_guide/platform_junos.rst:98
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:58
msgid "Once NETCONF is enabled, change your variables to use the NETCONF connection."
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:99
msgid "Example NETCONF inventory ``[ce:vars]``"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:112
#: ../../rst/network/user_guide/platform_iosxr.rst:113
#: ../../rst/network/user_guide/platform_junos.rst:114
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:73
msgid "Example NETCONF task"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:124
msgid "Notes"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:127
msgid "Modules that work with ``ansible.netcommon.network_cli``"
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:157
msgid "Modules that work with ``ansible.netcommon.netconf``"
msgstr ""

#: ../../rst/network/user_guide/shared_snippets/SSH_warning.txt:2
msgid "Never store passwords in plain text. We recommend using SSH keys to authenticate SSH connections. Ansible supports ssh-agent to manage your SSH keys. If you must use passwords to authenticate SSH connections, we recommend encrypting them with :ref:`Ansible Vault <playbooks_vault>`."
msgstr ""

#: ../../rst/network/user_guide/platform_ce.rst:213
#: ../../rst/network/user_guide/platform_cnos.rst:78
#: ../../rst/network/user_guide/platform_dellos10.rst:80
#: ../../rst/network/user_guide/platform_dellos6.rst:79
#: ../../rst/network/user_guide/platform_dellos9.rst:79
#: ../../rst/network/user_guide/platform_enos.rst:80
#: ../../rst/network/user_guide/platform_eos.rst:140
#: ../../rst/network/user_guide/platform_eric_eccli.rst:73
#: ../../rst/network/user_guide/platform_exos.rst:108
#: ../../rst/network/user_guide/platform_frr.rst:73
#: ../../rst/network/user_guide/platform_icx.rst:77
#: ../../rst/network/user_guide/platform_ios.rst:79
#: ../../rst/network/user_guide/platform_iosxr.rst:130
#: ../../rst/network/user_guide/platform_ironware.rst:80
#: ../../rst/network/user_guide/platform_junos.rst:129
#: ../../rst/network/user_guide/platform_meraki.rst:44
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:133
#: ../../rst/network/user_guide/platform_netvisor.rst:78
#: ../../rst/network/user_guide/platform_nos.rst:76
#: ../../rst/network/user_guide/platform_nxos.rst:164
#: ../../rst/network/user_guide/platform_routeros.rst:80
#: ../../rst/network/user_guide/platform_slxos.rst:77
#: ../../rst/network/user_guide/platform_voss.rst:78
#: ../../rst/network/user_guide/platform_vyos.rst:74
msgid ":ref:`timeout_options`"
msgstr ""

#: ../../rst/network/user_guide/platform_cnos.rst:5
msgid "CNOS Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_cnos.rst:7
msgid "CNOS is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and supports Enable Mode (Privilege Escalation). This page offers details on how to use Enable Mode on CNOS in Ansible."
msgstr ""

#: ../../rst/network/user_guide/platform_cnos.rst:29
#: ../../rst/network/user_guide/platform_dellos10.rst:29
#: ../../rst/network/user_guide/platform_dellos6.rst:29
#: ../../rst/network/user_guide/platform_dellos9.rst:29
#: ../../rst/network/user_guide/platform_enos.rst:29
#: ../../rst/network/user_guide/platform_eric_eccli.rst:29
#: ../../rst/network/user_guide/platform_frr.rst:29
#: ../../rst/network/user_guide/platform_icx.rst:29
#: ../../rst/network/user_guide/platform_ios.rst:29
#: ../../rst/network/user_guide/platform_ironware.rst:29
#: ../../rst/network/user_guide/platform_netvisor.rst:30
#: ../../rst/network/user_guide/platform_slxos.rst:30
#: ../../rst/network/user_guide/platform_voss.rst:30
#: ../../rst/network/user_guide/platform_vyos.rst:29
msgid "``ansible_connection: ansible.netcommon.network_cli``"
msgstr ""

#: ../../rst/network/user_guide/platform_cnos.rst:31
#: ../../rst/network/user_guide/platform_dellos10.rst:31
#: ../../rst/network/user_guide/platform_dellos6.rst:31
#: ../../rst/network/user_guide/platform_dellos9.rst:31
#: ../../rst/network/user_guide/platform_enos.rst:31
#: ../../rst/network/user_guide/platform_icx.rst:31
#: ../../rst/network/user_guide/platform_ios.rst:31
#: ../../rst/network/user_guide/platform_ironware.rst:31
#: ../../rst/network/user_guide/platform_nxos.rst:32
msgid "supported: use ``ansible_become: yes`` with ``ansible_become_method: enable`` and ``ansible_become_password:``"
msgstr ""

#: ../../rst/network/user_guide/platform_cnos.rst:35
#: ../../rst/network/user_guide/platform_dellos10.rst:35
#: ../../rst/network/user_guide/platform_dellos6.rst:35
#: ../../rst/network/user_guide/platform_dellos9.rst:35
#: ../../rst/network/user_guide/platform_enos.rst:35
#: ../../rst/network/user_guide/platform_eos.rst:39
#: ../../rst/network/user_guide/platform_eric_eccli.rst:33
#: ../../rst/network/user_guide/platform_exos.rst:35
#: ../../rst/network/user_guide/platform_frr.rst:33
#: ../../rst/network/user_guide/platform_icx.rst:34
#: ../../rst/network/user_guide/platform_ios.rst:34
#: ../../rst/network/user_guide/platform_ironware.rst:35
#: ../../rst/network/user_guide/platform_junos.rst:37
#: ../../rst/network/user_guide/platform_netvisor.rst:34
#: ../../rst/network/user_guide/platform_nos.rst:34
#: ../../rst/network/user_guide/platform_nxos.rst:36
#: ../../rst/network/user_guide/platform_routeros.rst:34
#: ../../rst/network/user_guide/platform_slxos.rst:34
#: ../../rst/network/user_guide/platform_voss.rst:35
msgid "``stdout[0].``"
msgstr ""

#: ../../rst/network/user_guide/platform_cnos.rst:40
#: ../../rst/network/user_guide/platform_dellos10.rst:40
#: ../../rst/network/user_guide/platform_dellos6.rst:40
#: ../../rst/network/user_guide/platform_dellos9.rst:40
#: ../../rst/network/user_guide/platform_enos.rst:42
#: ../../rst/network/user_guide/platform_ios.rst:40
#: ../../rst/network/user_guide/platform_ironware.rst:41
#: ../../rst/network/user_guide/platform_vyos.rst:39
msgid "The ``ansible_connection: local`` has been deprecated. Please use ``ansible_connection: ansible.netcommon.network_cli`` instead."
msgstr ""

#: ../../rst/network/user_guide/platform_cnos.rst:46
msgid "Example CLI ``group_vars/cnos.yml``"
msgstr ""

#: ../../rst/network/user_guide/platform_dellos10.rst:5
msgid "Dell OS10 Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_dellos10.rst:7
msgid "The `dellemc.os10 <https://galaxy.ansible.com/dellemc_networking/os10>`_ collection supports Enable Mode (Privilege Escalation). This page offers details on how to use Enable Mode on OS10 in Ansible."
msgstr ""

#: ../../rst/network/user_guide/platform_dellos10.rst:47
msgid "Example CLI ``group_vars/dellos10.yml``"
msgstr ""

#: ../../rst/network/user_guide/platform_dellos6.rst:5
msgid "Dell OS6 Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_dellos6.rst:7
msgid "The `dellemc.os6 <https://github.com/ansible-collections/dellemc.os6>`_ collection supports Enable Mode (Privilege Escalation). This page offers details on how to use Enable Mode on OS6 in Ansible."
msgstr ""

#: ../../rst/network/user_guide/platform_dellos6.rst:46
msgid "Example CLI ``group_vars/dellos6.yml``"
msgstr ""

#: ../../rst/network/user_guide/platform_dellos9.rst:5
msgid "Dell OS9 Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_dellos9.rst:7
msgid "The `dellemc.os9 <https://github.com/ansible-collections/dellemc.os9>`_ collection  supports Enable Mode (Privilege Escalation). This page offers details on how to use Enable Mode on OS9 in Ansible."
msgstr ""

#: ../../rst/network/user_guide/platform_dellos9.rst:46
msgid "Example CLI ``group_vars/dellos9.yml``"
msgstr ""

#: ../../rst/network/user_guide/platform_enos.rst:5
msgid "ENOS Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_enos.rst:7
msgid "ENOS is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and supports Enable Mode (Privilege Escalation). This page offers details on how to use Enable Mode on ENOS in Ansible."
msgstr ""

#: ../../rst/network/user_guide/platform_enos.rst:48
msgid "Example CLI ``group_vars/enos.yml``"
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:5
msgid "EOS Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:7
msgid "The `Arista EOS <https://galaxy.ansible.com/arista/eos>`_ collection supports multiple connections. This page offers details on how each connection works in Ansible and how to use it."
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:19
msgid "eAPI"
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:21
#: ../../rst/network/user_guide/platform_exos.rst:22
#: ../../rst/network/user_guide/platform_meraki.rst:21
#: ../../rst/network/user_guide/platform_nxos.rst:21
msgid "HTTP(S)"
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:23
#: ../../rst/network/user_guide/platform_exos.rst:24
#: ../../rst/network/user_guide/platform_nxos.rst:23
msgid "uses HTTPS certificates if present"
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:27
#: ../../rst/network/user_guide/platform_exos.rst:28
#: ../../rst/network/user_guide/platform_nxos.rst:27
msgid "via a web proxy"
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:29
msgid "``ansible_connection:`` ``ansible.netcommon.network_cli``"
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:29
msgid "``ansible_connection:`` ``ansible.netcommon.httpapi``"
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:33
msgid "supported: |br|"
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:35
msgid "use ``ansible_become: yes`` with ``ansible_become_method: enable``"
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:35
msgid "``httpapi`` uses ``ansible_become: yes`` with ``ansible_become_method: enable``"
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:39
#: ../../rst/network/user_guide/platform_exos.rst:35
#: ../../rst/network/user_guide/platform_nxos.rst:36
msgid "``stdout[0].messages[0].``"
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:45
#: ../../rst/network/user_guide/platform_nxos.rst:42
msgid "The ``ansible_connection: local`` has been deprecated. Please use ``ansible_connection: ansible.netcommon.network_cli`` or ``ansible_connection: ansible.netcommon.httpapi`` instead."
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:51
msgid "Example CLI ``group_vars/eos.yml``"
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:83
msgid "Using eAPI in Ansible"
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:86
msgid "Enabling eAPI"
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:88
msgid "Before you can use eAPI to connect to a switch, you must enable eAPI. To enable eAPI on a new switch with Ansible, use the ``arista.eos.eos_eapi`` module through the CLI connection. Set up ``group_vars/eos.yml`` just like in the CLI example above, then run a playbook task like this:"
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:100
msgid "You can find more options for enabling HTTP/HTTPS connections in the :ref:`arista.eos.eos_eapi <ansible_collections.arista.eos.eos_eapi_module>` module documentation."
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:102
msgid "Once eAPI is enabled, change your ``group_vars/eos.yml`` to use the eAPI connection."
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:105
msgid "Example eAPI ``group_vars/eos.yml``"
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:118
#: ../../rst/network/user_guide/platform_exos.rst:88
#: ../../rst/network/user_guide/platform_nxos.rst:111
msgid "If you are accessing your host directly (not through a web proxy) you can remove the ``proxy_env`` configuration."
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:119
#: ../../rst/network/user_guide/platform_exos.rst:89
#: ../../rst/network/user_guide/platform_nxos.rst:112
msgid "If you are accessing your host through a web proxy using ``https``, change ``http_proxy`` to ``https_proxy``."
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:123
msgid "Example eAPI task"
msgstr ""

#: ../../rst/network/user_guide/platform_eos.rst:134
msgid "In this example the ``proxy_env`` variable defined in ``group_vars`` gets passed to the ``environment`` option of the module in the task."
msgstr ""

#: ../../rst/network/user_guide/platform_eric_eccli.rst:5
msgid "ERIC_ECCLI Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_eric_eccli.rst:7
msgid "Extreme ERIC_ECCLI is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and only supports CLI connections today. This page offers details on how to use ``ansible.netcommon.network_cli`` on ERIC_ECCLI in Ansible."
msgstr ""

#: ../../rst/network/user_guide/platform_eric_eccli.rst:31
msgid "not supported by ERIC_ECCLI"
msgstr ""

#: ../../rst/network/user_guide/platform_eric_eccli.rst:38
msgid "ERIC_ECCLI does not support ``ansible_connection: local``. You must use ``ansible_connection: ansible.netcommon.network_cli``."
msgstr ""

#: ../../rst/network/user_guide/platform_eric_eccli.rst:44
msgid "Example CLI ``group_vars/eric_eccli.yml``"
msgstr ""

#: ../../rst/network/user_guide/platform_exos.rst:5
msgid "EXOS Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_exos.rst:7
msgid "Extreme EXOS is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and supports multiple connections. This page offers details on how each connection works in Ansible and how to use it."
msgstr ""

#: ../../rst/network/user_guide/platform_exos.rst:20
msgid "EXOS-API"
msgstr ""

#: ../../rst/network/user_guide/platform_exos.rst:31
#: ../../rst/network/user_guide/platform_nxos.rst:30
msgid "``ansible.netcommon.httpapi``"
msgstr ""

#: ../../rst/network/user_guide/platform_exos.rst:33
msgid "not supported by EXOS"
msgstr ""

#: ../../rst/network/user_guide/platform_exos.rst:40
msgid "EXOS does not support ``ansible_connection: local``. You must use ``ansible_connection: ansible.netcommon.network_cli`` or ``ansible_connection: ansible.netcommon.httpapi``."
msgstr ""

#: ../../rst/network/user_guide/platform_exos.rst:46
msgid "Example CLI ``group_vars/exos.yml``"
msgstr ""

#: ../../rst/network/user_guide/platform_exos.rst:74
msgid "Using EXOS-API in Ansible"
msgstr ""

#: ../../rst/network/user_guide/platform_exos.rst:77
msgid "Example EXOS-API ``group_vars/exos.yml``"
msgstr ""

#: ../../rst/network/user_guide/platform_exos.rst:93
msgid "Example EXOS-API task"
msgstr ""

#: ../../rst/network/user_guide/platform_exos.rst:102
#: ../../rst/network/user_guide/platform_nxos.rst:127
msgid "In this example the ``proxy_env`` variable defined in ``group_vars`` gets passed to the ``environment`` option of the module used in the task."
msgstr ""

#: ../../rst/network/user_guide/platform_frr.rst:5
msgid "FRR Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_frr.rst:7
msgid "The `FRR <https://galaxy.ansible.com/frr/frr>`_ collection supports the ``ansible.netcommon.network_cli`` connection. This section provides details on how to use this connection for Free Range Routing (FRR)."
msgstr ""

#: ../../rst/network/user_guide/platform_frr.rst:31
#: ../../rst/network/user_guide/platform_iosxr.rst:36
#: ../../rst/network/user_guide/platform_vyos.rst:31
msgid "not supported"
msgstr ""

#: ../../rst/network/user_guide/platform_frr.rst:43
msgid "Example CLI ``group_vars/frr.yml``"
msgstr ""

#: ../../rst/network/user_guide/platform_frr.rst:53
msgid "The ``ansible_user`` should be a part of the ``frrvty`` group and should have the default shell set to ``/bin/vtysh``."
msgstr ""

#: ../../rst/network/user_guide/platform_icx.rst:5
msgid "ICX Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_icx.rst:7
msgid "ICX is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection supports Enable Mode (Privilege Escalation). This page offers details on how to use Enable Mode on ICX in Ansible."
msgstr ""

#: ../../rst/network/user_guide/platform_icx.rst:44
msgid "Example CLI ``group_vars/icx.yml``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:5
#: ../../rst/network/user_guide/platform_index.rst:9
msgid "Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:7
msgid "Some Ansible Network platforms support multiple connection types, privilege escalation (``enable`` mode), or other options. The pages in this section offer standardized guides to understanding available options on each network platform. We welcome contributions from community-maintained platforms to this section."
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:41
msgid "Settings by Platform"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:58
msgid "``ansible_connection:`` settings available"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:60
msgid "Network OS"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:60
msgid "``ansible_network_os:``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:60
msgid "network_cli"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:60
msgid "netconf"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:60
msgid "httpapi"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:62
msgid "`Arista EOS`_ `[†]`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:62
msgid "``arista.eos.eos``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:62
#: ../../rst/network/user_guide/platform_index.rst:63
#: ../../rst/network/user_guide/platform_index.rst:64
#: ../../rst/network/user_guide/platform_index.rst:65
#: ../../rst/network/user_guide/platform_index.rst:66
#: ../../rst/network/user_guide/platform_index.rst:67
#: ../../rst/network/user_guide/platform_index.rst:68
#: ../../rst/network/user_guide/platform_index.rst:69
#: ../../rst/network/user_guide/platform_index.rst:70
#: ../../rst/network/user_guide/platform_index.rst:71
#: ../../rst/network/user_guide/platform_index.rst:72
#: ../../rst/network/user_guide/platform_index.rst:73
#: ../../rst/network/user_guide/platform_index.rst:74
#: ../../rst/network/user_guide/platform_index.rst:75
#: ../../rst/network/user_guide/platform_index.rst:76
#: ../../rst/network/user_guide/platform_index.rst:77
#: ../../rst/network/user_guide/platform_index.rst:78
#: ../../rst/network/user_guide/platform_index.rst:79
#: ../../rst/network/user_guide/platform_index.rst:80
#: ../../rst/network/user_guide/platform_index.rst:81
#: ../../rst/network/user_guide/platform_index.rst:82
#: ../../rst/network/user_guide/platform_index.rst:83
#: ../../rst/network/user_guide/platform_index.rst:84
#: ../../rst/network/user_guide/platform_index.rst:85
#: ../../rst/network/user_guide/platform_index.rst:86
#: ../../rst/network/user_guide/platform_index.rst:87
#: ../../rst/network/user_guide/platform_index.rst:88
#: ../../rst/network/user_guide/platform_index.rst:89
msgid "✓"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:63
msgid "`Ciena SAOS6`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:63
msgid "``ciena.saos6.saos6``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:64
msgid "`Cisco ASA`_ `[†]`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:64
msgid "``cisco.asa.asa``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:65
msgid "`Cisco IOS`_ `[†]`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:65
msgid "``cisco.ios.ios``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:66
msgid "`Cisco IOS XR`_ `[†]`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:66
msgid "``cisco.iosxr.iosxr``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:67
msgid "`Cisco NX-OS`_ `[†]`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:67
msgid "``cisco.nxos.nxos``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:68
msgid "`Cloudengine OS`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:68
msgid "``community.network.ce``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:69
msgid "`Dell OS6`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:69
msgid "``dellemc.os6.os6``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:70
msgid "`Dell OS9`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:70
msgid "``dellemc.os9.os9``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:71
msgid "`Dell OS10`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:71
msgid "``dellemc.os10.os10``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:72
msgid "`Ericsson ECCLI`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:72
msgid "``community.network.eric_eccli``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:73
msgid "`Extreme EXOS`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:73
msgid "``community.network.exos``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:74
msgid "`Extreme IronWare`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:74
msgid "``community.network.ironware``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:75
msgid "`Extreme NOS`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:75
msgid "``community.network.nos``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:76
msgid "`Extreme SLX-OS`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:76
msgid "``community.network.slxos``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:77
msgid "`Extreme VOSS`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:77
msgid "``community.network.voss``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:78
msgid "`F5 BIG-IP`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:79
msgid "`F5 BIG-IQ`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:80
msgid "`Junos OS`_ `[†]`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:80
msgid "``junipernetworks.junos.junos``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:81
msgid "`Lenovo CNOS`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:81
msgid "``community.network.cnos``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:82
msgid "`Lenovo ENOS`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:82
msgid "``community.network.enos``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:83
msgid "`Meraki`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:84
msgid "`MikroTik RouterOS`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:84
msgid "``community.network.routeros``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:85
msgid "`Nokia SR OS`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:86
msgid "`Pluribus Netvisor`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:86
msgid "``community.network.netvisor``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:87
msgid "`Ruckus ICX`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:87
msgid "``community.network.icx``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:88
msgid "`VyOS`_ `[†]`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:88
msgid "``vyos.vyos.vyos``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:89
msgid "OS that supports Netconf `[†]`_"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:89
msgid "``<network-os>``"
msgstr ""

#: ../../rst/network/user_guide/platform_index.rst:121
msgid "**[†]** Maintained by Ansible Network Team"
msgstr ""

#: ../../rst/network/user_guide/platform_ios.rst:5
msgid "IOS Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_ios.rst:7
msgid "The `Cisco IOS <https://galaxy.ansible.com/cisco/ios>`_ collection supports Enable Mode (Privilege Escalation). This page offers details on how to use Enable Mode on IOS in Ansible."
msgstr ""

#: ../../rst/network/user_guide/platform_ios.rst:46
msgid "Example CLI ``group_vars/ios.yml``"
msgstr ""

#: ../../rst/network/user_guide/platform_iosxr.rst:5
msgid "IOS-XR Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_iosxr.rst:7
msgid "The `Cisco IOS-XR collection <https://galaxy.ansible.com/cisco/iosxr>`_ supports multiple connections. This page offers details on how each connection works in Ansible and how to use it."
msgstr ""

#: ../../rst/network/user_guide/platform_iosxr.rst:21
msgid "only for modules ``iosxr_banner``, ``iosxr_interface``, ``iosxr_logging``, ``iosxr_system``, ``iosxr_user``"
msgstr ""

#: ../../rst/network/user_guide/platform_iosxr.rst:44
#: ../../rst/network/user_guide/platform_junos.rst:45
msgid "The ``ansible_connection: local`` has been deprecated. Please use ``ansible_connection: ansible.netcommon.network_cli`` or ``ansible_connection: ansible.netcommon.netconf`` instead."
msgstr ""

#: ../../rst/network/user_guide/platform_iosxr.rst:50
msgid "Example CLI inventory ``[iosxr:vars]``"
msgstr ""

#: ../../rst/network/user_guide/platform_iosxr.rst:86
msgid "enable NETCONF on the Cisco IOS-XR device(s)"
msgstr ""

#: ../../rst/network/user_guide/platform_iosxr.rst:88
msgid "To enable NETCONF on a new switch via Ansible, use the ``cisco.iosxr.iosxr_netconf`` module through the CLI connection. Set up your platform-level variables just like in the CLI example above, then run a playbook task like this:"
msgstr ""

#: ../../rst/network/user_guide/platform_iosxr.rst:100
msgid "Example NETCONF inventory ``[iosxr:vars]``"
msgstr ""

#: ../../rst/network/user_guide/platform_ironware.rst:5
msgid "IronWare Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_ironware.rst:7
msgid "IronWare is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and supports Enable Mode (Privilege Escalation). This page offers details on how to use Enable Mode on IronWare in Ansible."
msgstr ""

#: ../../rst/network/user_guide/platform_ironware.rst:47
msgid "Example CLI ``group_vars/mlx.yml``"
msgstr ""

#: ../../rst/network/user_guide/platform_junos.rst:5
msgid "Junos OS Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_junos.rst:7
msgid "The `Juniper Junos OS <https://galaxy.ansible.com/junipernetworks/junos>`_ supports multiple connections. This page offers details on how each connection works in Ansible and how to use it."
msgstr ""

#: ../../rst/network/user_guide/platform_junos.rst:21
msgid "``junos_netconf`` & ``junos_command`` modules only"
msgstr ""

#: ../../rst/network/user_guide/platform_junos.rst:21
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:20
msgid "all modules except ``junos_netconf``, which enables NETCONF"
msgstr ""

#: ../../rst/network/user_guide/platform_junos.rst:32
msgid "``ansible_connection: ``ansible.netcommon.network_cli``"
msgstr ""

#: ../../rst/network/user_guide/platform_junos.rst:32
msgid "``ansible_connection: ``ansible.netcommon.netconf``"
msgstr ""

#: ../../rst/network/user_guide/platform_junos.rst:35
msgid "not supported by Junos OS"
msgstr ""

#: ../../rst/network/user_guide/platform_junos.rst:37
msgid "json: ``result[0]['software-information'][0]['host-name'][0]['data'] foo lo0``"
msgstr ""

#: ../../rst/network/user_guide/platform_junos.rst:38
msgid "text: ``result[1].interface-information[0].physical-interface[0].name[0].data foo lo0``"
msgstr ""

#: ../../rst/network/user_guide/platform_junos.rst:39
msgid "xml: ``result[1].rpc-reply.interface-information[0].physical-interface[0].name[0].data foo lo0``"
msgstr ""

#: ../../rst/network/user_guide/platform_junos.rst:51
msgid "Example CLI inventory ``[junos:vars]``"
msgstr ""

#: ../../rst/network/user_guide/platform_junos.rst:87
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:46
msgid "enable NETCONF on the Junos OS device(s)"
msgstr ""

#: ../../rst/network/user_guide/platform_junos.rst:89
msgid "To enable NETCONF on a new switch via Ansible, use the ``junipernetworks.junos.junos_netconf`` module through the CLI connection. Set up your platform-level variables just like in the CLI example above, then run a playbook task like this:"
msgstr ""

#: ../../rst/network/user_guide/platform_junos.rst:101
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:61
msgid "Example NETCONF inventory ``[junos:vars]``"
msgstr ""

#: ../../rst/network/user_guide/platform_meraki.rst:5
msgid "Meraki Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_meraki.rst:7
msgid "The `cisco.meraki <https://galaxy.ansible.com/cisco/meraki>`_ collection only supports the ``local`` connection type at this time."
msgstr ""

#: ../../rst/network/user_guide/platform_meraki.rst:19
msgid "Dashboard API"
msgstr ""

#: ../../rst/network/user_guide/platform_meraki.rst:23
msgid "uses API key from Dashboard"
msgstr ""

#: ../../rst/network/user_guide/platform_meraki.rst:25
msgid "``ansible_connection: localhost``"
msgstr ""

#: ../../rst/network/user_guide/platform_meraki.rst:27
msgid "``data.``"
msgstr ""

#: ../../rst/network/user_guide/platform_meraki.rst:32
msgid "Example Meraki task"
msgstr ""

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:5
msgid "Netconf enabled Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:7
msgid "This page offers details on how the netconf connection works in Ansible and how to use it."
msgstr ""

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:31
msgid "``ansible_connection: ansible.netcommon.netconf``"
msgstr ""

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:35
msgid "The ``ansible_connection: local`` has been deprecated. Please use ``ansible_connection: ansible.netcommon.netconf`` instead."
msgstr ""

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:45
msgid "install the ``ncclient`` Python package on your control node(s) with ``pip install ncclient``"
msgstr ""

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:48
msgid "To enable NETCONF on a new switch via Ansible, use the platform specific module via the CLI connection or set it manually. For example set up your platform-level variables just like in the CLI example above, then run a playbook task like this:"
msgstr ""

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:83
msgid "Example NETCONF task with configurable variables"
msgstr ""

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:94
msgid "Note: For netconf connection plugin configurable variables see :ref:`ansible.netcommon.netconf <ansible_collections.ansible.netcommon.netconf_connection>`."
msgstr ""

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:97
msgid "Bastion/Jumphost configuration"
msgstr ""

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:98
msgid "To use a jump host to connect to a NETCONF enabled device you must set the ``ANSIBLE_NETCONF_SSH_CONFIG`` environment variable."
msgstr ""

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:102
msgid "``ANSIBLE_NETCONF_SSH_CONFIG`` can be set to either:"
msgstr ""

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:101
msgid "1 or TRUE (to trigger the use of the default SSH config file ~/.ssh/config)"
msgstr ""

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:102
msgid "The absolute path to a custom SSH config file."
msgstr ""

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:104
msgid "The SSH config file should look something like:"
msgstr ""

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:112
msgid "Authentication for the jump host must use key based authentication."
msgstr ""

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:114
msgid "You can either specify the private key used in the SSH config file:"
msgstr ""

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:120
msgid "Or you can use an ssh-agent."
msgstr ""

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:123
msgid "ansible_network_os auto-detection"
msgstr ""

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:125
msgid "If ``ansible_network_os`` is not specified for a host, then Ansible will attempt to automatically detect what ``network_os`` plugin to use."
msgstr ""

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:127
msgid "``ansible_network_os`` auto-detection can also be triggered by using ``auto`` as the ``ansible_network_os``. (Note: Previously ``default`` was used instead of ``auto``)."
msgstr ""

#: ../../rst/network/user_guide/platform_netvisor.rst:5
msgid "Pluribus NETVISOR Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_netvisor.rst:7
msgid "Pluribus NETVISOR Ansible is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and only supports CLI connections today. ``httpapi`` modules may be added in future. This page offers details on how to use ``ansible.netcommon.network_cli`` on NETVISOR in Ansible."
msgstr ""

#: ../../rst/network/user_guide/platform_netvisor.rst:32
msgid "not supported by NETVISOR"
msgstr ""

#: ../../rst/network/user_guide/platform_netvisor.rst:39
msgid "Pluribus NETVISOR does not support ``ansible_connection: local``. You must use ``ansible_connection: ansible.netcommon.network_cli``."
msgstr ""

#: ../../rst/network/user_guide/platform_netvisor.rst:45
msgid "Example CLI ``group_vars/netvisor.yml``"
msgstr ""

#: ../../rst/network/user_guide/platform_nos.rst:5
msgid "NOS Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_nos.rst:7
msgid "Extreme NOS is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and only supports CLI connections today. ``httpapi`` modules may be added in future. This page offers details on how to use ``ansible.netcommon.network_cli`` on NOS in Ansible."
msgstr ""

#: ../../rst/network/user_guide/platform_nos.rst:30
msgid "``ansible_connection: community.netcommon.network_cli``"
msgstr ""

#: ../../rst/network/user_guide/platform_nos.rst:32
msgid "not supported by NOS"
msgstr ""

#: ../../rst/network/user_guide/platform_nos.rst:39
msgid "NOS does not support ``ansible_connection: local``. You must use ``ansible_connection: ansible.netcommon.network_cli``."
msgstr ""

#: ../../rst/network/user_guide/platform_nos.rst:45
msgid "Example CLI ``group_vars/nos.yml``"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:5
msgid "NXOS Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:7
msgid "The `Cisco NXOS <https://galaxy.ansible.com/cisco/nxos>`_ supports multiple connections. This page offers details on how each connection works in Ansible and how to use it."
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:19
msgid "NX-API"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:32
msgid "not supported by NX-API"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:48
msgid "Example CLI ``group_vars/nxos.yml``"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:80
msgid "Using NX-API in Ansible"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:83
msgid "Enabling NX-API"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:85
msgid "Before you can use NX-API to connect to a switch, you must enable NX-API. To enable NX-API on a new switch via Ansible, use the ``nxos_nxapi`` module via the CLI connection. Set up group_vars/nxos.yml just like in the CLI example above, then run a playbook task like this:"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:95
msgid "To find out more about the options for enabling HTTP/HTTPS and local http see the :ref:`nxos_nxapi <nxos_nxapi_module>` module documentation."
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:97
msgid "Once NX-API is enabled, change your ``group_vars/nxos.yml`` to use the NX-API connection."
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:100
msgid "Example NX-API ``group_vars/nxos.yml``"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:116
msgid "Example NX-API task"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:132
msgid "Cisco Nexus platform support matrix"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:134
msgid "The following platforms and software versions have been certified by Cisco to work with this version of Ansible."
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:136
msgid "Platform / Software Minimum Requirements"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:140
msgid "Supported Platforms"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:140
msgid "Minimum NX-OS Version"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:142
msgid "Cisco Nexus N3k"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:142
#: ../../rst/network/user_guide/platform_nxos.rst:143
msgid "7.0(3)I2(5) and later"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:143
msgid "Cisco Nexus N9k"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:144
msgid "Cisco Nexus N5k"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:144
#: ../../rst/network/user_guide/platform_nxos.rst:145
msgid "7.3(0)N1(1) and later"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:145
msgid "Cisco Nexus N6k"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:146
msgid "Cisco Nexus N7k"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:146
msgid "7.3(0)D1(1) and later"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:149
msgid "Platform Models"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:153
msgid "Platform"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:153
msgid "Description"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:155
msgid "N3k"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:155
msgid "Support includes N30xx, N31xx and N35xx models"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:156
msgid "N5k"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:156
msgid "Support includes all N5xxx models"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:157
msgid "N6k"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:157
msgid "Support includes all N6xxx models"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:158
msgid "N7k"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:158
msgid "Support includes all N7xxx models"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:159
msgid "N9k"
msgstr ""

#: ../../rst/network/user_guide/platform_nxos.rst:159
msgid "Support includes all N9xxx models"
msgstr ""

#: ../../rst/network/user_guide/platform_routeros.rst:5
msgid "RouterOS Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_routeros.rst:7
msgid "RouterOS is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and only supports CLI connections today. ``httpapi`` modules may be added in future. This page offers details on how to use ``ansible.netcommon.network_cli`` on RouterOS in Ansible."
msgstr ""

#: ../../rst/network/user_guide/platform_routeros.rst:30
msgid "``ansible_connection: ansible.network.network_cli``"
msgstr ""

#: ../../rst/network/user_guide/platform_routeros.rst:32
msgid "not supported by RouterOS"
msgstr ""

#: ../../rst/network/user_guide/platform_routeros.rst:40
msgid "RouterOS does not support ``ansible_connection: local``. You must use ``ansible_connection: ansible.netcommon.network_cli``."
msgstr ""

#: ../../rst/network/user_guide/platform_routeros.rst:46
msgid "Example CLI ``group_vars/routeros.yml``"
msgstr ""

#: ../../rst/network/user_guide/platform_routeros.rst:63
msgid "If you are getting timeout errors you may want to add ``+cet1024w`` suffix to your username which will disable console colors, enable \"dumb\" mode, tell RouterOS not to try detecting terminal capabilities and set terminal width to 1024 columns. See article `Console login process <https://wiki.mikrotik.com/wiki/Manual:Console_login_process>`_ in MikroTik wiki for more information."
msgstr ""

#: ../../rst/network/user_guide/platform_slxos.rst:5
msgid "SLX-OS Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_slxos.rst:7
msgid "Extreme SLX-OS is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and only supports CLI connections today. ``httpapi`` modules may be added in future. This page offers details on how to use ``ansible.netcommon.network_cli`` on SLX-OS in Ansible."
msgstr ""

#: ../../rst/network/user_guide/platform_slxos.rst:32
msgid "not supported by SLX-OS"
msgstr ""

#: ../../rst/network/user_guide/platform_slxos.rst:40
msgid "SLX-OS does not support ``ansible_connection: local``. You must use ``ansible_connection: ansible.netcommon.network_cli``."
msgstr ""

#: ../../rst/network/user_guide/platform_slxos.rst:46
msgid "Example CLI ``group_vars/slxos.yml``"
msgstr ""

#: ../../rst/network/user_guide/platform_voss.rst:5
msgid "VOSS Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_voss.rst:7
msgid "Extreme VOSS is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and only supports CLI connections today. This page offers details on how to use ``ansible.netcommon.network_cli`` on VOSS in Ansible."
msgstr ""

#: ../../rst/network/user_guide/platform_voss.rst:32
msgid "supported: use ``ansible_become: yes`` with ``ansible_become_method: enable``"
msgstr ""

#: ../../rst/network/user_guide/platform_voss.rst:41
msgid "VOSS does not support ``ansible_connection: local``. You must use ``ansible_connection: ansible.netcommon.network_cli``."
msgstr ""

#: ../../rst/network/user_guide/platform_voss.rst:47
msgid "Example CLI ``group_vars/voss.yml``"
msgstr ""

#: ../../rst/network/user_guide/platform_vyos.rst:5
msgid "VyOS Platform Options"
msgstr ""

#: ../../rst/network/user_guide/platform_vyos.rst:7
msgid "The `VyOS <https://galaxy.ansible.com/vyos/vyos>`_ collection supports the ``ansible.netcommon.network_cli`` connection type. This page offers details on connection options to manage VyOS using Ansible."
msgstr ""

#: ../../rst/network/user_guide/platform_vyos.rst:45
msgid "Example CLI ``group_vars/vyos.yml``"
msgstr ""

