# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019 Red Hat, Inc.
# This file is distributed under the same license as the Ansible package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible devel\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-04 13:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../rst/dev_guide/collections_galaxy_meta.rst:5
msgid "Collection Galaxy metadata structure"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:7
msgid "A key component of an Ansible collection is the ``galaxy.yml`` file placed in the root directory of a collection. This file contains the metadata of the collection that is used to generate a collection artifact."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:11
msgid "Structure"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:13
msgid "The ``galaxy.yml`` file must contain the following keys in valid YAML:"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:22
msgid "Key"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:23
msgid "Comment"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:27
msgid "namespace |br|"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:31
#: ../../rst/dev_guide/collections_galaxy_meta.rst:55
#: ../../rst/dev_guide/collections_galaxy_meta.rst:77
#: ../../rst/dev_guide/collections_galaxy_meta.rst:99
#: ../../rst/dev_guide/collections_galaxy_meta.rst:143
#: ../../rst/dev_guide/collections_galaxy_meta.rst:175
#: ../../rst/dev_guide/collections_galaxy_meta.rst:229
#: ../../rst/dev_guide/collections_galaxy_meta.rst:243
#: ../../rst/dev_guide/collections_galaxy_meta.rst:257
#: ../../rst/dev_guide/collections_galaxy_meta.rst:271
msgid "string |_|"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:35
#: ../../rst/dev_guide/collections_galaxy_meta.rst:59
#: ../../rst/dev_guide/collections_galaxy_meta.rst:81
#: ../../rst/dev_guide/collections_galaxy_meta.rst:103
#: ../../rst/dev_guide/collections_galaxy_meta.rst:125
msgid "/ |_|"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:39
#: ../../rst/dev_guide/collections_galaxy_meta.rst:63
#: ../../rst/dev_guide/collections_galaxy_meta.rst:85
#: ../../rst/dev_guide/collections_galaxy_meta.rst:107
#: ../../rst/dev_guide/collections_galaxy_meta.rst:129
#: ../../rst/dev_guide/developing_modules_documenting.rst
#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "required"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:41
msgid "The namespace of the collection."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:43
msgid "This can be a company/brand/organization or product namespace under which all content lives."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:45
msgid "May only contain alphanumeric lowercase characters and underscores. Namespaces cannot start with underscores or numbers and cannot contain consecutive underscores."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:51
msgid "name |br|"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:65
msgid "The name of the collection."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:67
msgid "Has the same character restrictions as ``namespace``."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:73
msgid "version |br|"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:87
msgid "The version of the collection."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:89
msgid "Must be compatible with semantic versioning."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:95
msgid "readme |br|"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:109
msgid "The path to the Markdown (.md) readme file."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:111
#: ../../rst/dev_guide/collections_galaxy_meta.rst:181
msgid "This path is relative to the root of the collection."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:117
msgid "authors |br|"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:121
#: ../../rst/dev_guide/collections_galaxy_meta.rst:157
#: ../../rst/dev_guide/collections_galaxy_meta.rst:193
#: ../../rst/dev_guide/collections_galaxy_meta.rst:285
msgid "list |_|"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:131
msgid "A list of the collection's content authors."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:133
msgid "Can be just the name or in the format 'Full Name <email> (url) @nicks:irc/im.site#channel'."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:139
msgid "description |br|"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:147
msgid "A short summary description of the collection."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:153
msgid "license |br|"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:161
msgid "Either a single license or a list of licenses for content inside of a collection."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:163
msgid "Ansible Galaxy currently only accepts `SPDX <https://spdx.org/licenses/>`_ licenses"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:165
msgid "This key is mutually exclusive with ``license_file``."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:171
msgid "license_file |br|"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:179
msgid "The path to the license file for the collection."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:183
msgid "This key is mutually exclusive with ``license``."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:189
msgid "tags |br|"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:197
msgid "A list of tags you want to associate with the collection for indexing/searching."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:199
msgid "A tag name has the same character requirements as ``namespace`` and ``name``."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:205
msgid "dependencies |br|"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:209
msgid "dictionary |_|"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:213
msgid "Collections that this collection requires to be installed for it to be usable."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:215
msgid "The key of the dict is the collection label ``namespace.name``."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:217
msgid "The value is a version range `specifiers <https://python-semanticversion.readthedocs.io/en/latest/#requirement-specification>`_."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:219
msgid "Multiple version range specifiers can be set and are separated by ``,``."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:225
msgid "repository |br|"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:233
msgid "The URL of the originating SCM repository."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:239
msgid "documentation |br|"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:247
msgid "The URL to any online docs."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:253
msgid "homepage |br|"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:261
msgid "The URL to the homepage of the collection/project."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:267
msgid "issues |br|"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:275
msgid "The URL to the collection issue tracker."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:281
msgid "build_ignore |br|"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:290
msgid "|br| version_added: 2.10"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:292
msgid "|_|"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:293
msgid "A list of file glob-like patterns used to filter any files or directories that should not be included in the build artifact."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:295
msgid "A pattern is matched from the relative path of the file or directory of the collection directory."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:297
msgid "This uses ``fnmatch`` to match the files or directories."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:299
msgid "Some directories and files like ``galaxy.yml``, ``*.pyc``, ``*.retry``, and ``.git`` are always filtered."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:304
msgid "Examples"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:329
msgid ":ref:`developing_collections`"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:330
msgid "Develop or modify a collection."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:331
#: ../../rst/dev_guide/developing_api.rst:40
#: ../../rst/dev_guide/developing_collections.rst:809
#: ../../rst/dev_guide/developing_inventory.rst:413
#: ../../rst/dev_guide/developing_plugins.rst:494
#: ../../rst/dev_guide/testing_units_modules.rst:545
msgid ":ref:`developing_modules_general`"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:332
#: ../../rst/dev_guide/developing_collections.rst:810
#: ../../rst/dev_guide/developing_plugins.rst:495
msgid "Learn about how to write Ansible modules"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:333
#: ../../rst/dev_guide/developing_collections.rst:805
msgid ":ref:`collections`"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:334
#: ../../rst/dev_guide/developing_collections.rst:806
msgid "Learn how to install and use collections."
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:335
#: ../../rst/dev_guide/developing_collections.rst:811
#: ../../rst/dev_guide/developing_core.rst:18
#: ../../rst/dev_guide/developing_modules.rst:48
#: ../../rst/dev_guide/developing_plugins.rst:496
msgid "`Mailing List <https://groups.google.com/group/ansible-devel>`_"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:336
#: ../../rst/dev_guide/developing_collections.rst:812
#: ../../rst/dev_guide/developing_core.rst:19
#: ../../rst/dev_guide/developing_plugins.rst:497
msgid "The development mailing list"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:337
#: ../../rst/dev_guide/developing_api.rst:46
#: ../../rst/dev_guide/developing_collections.rst:813
#: ../../rst/dev_guide/developing_core.rst:20
#: ../../rst/dev_guide/developing_inventory.rst:421
#: ../../rst/dev_guide/developing_modules.rst:50
#: ../../rst/dev_guide/developing_plugins.rst:498
#: ../../rst/dev_guide/style_guide/index.rst:277
msgid "`irc.freenode.net <http://irc.freenode.net>`_"
msgstr ""

#: ../../rst/dev_guide/collections_galaxy_meta.rst:338
#: ../../rst/dev_guide/developing_api.rst:47
#: ../../rst/dev_guide/developing_collections.rst:814
#: ../../rst/dev_guide/developing_inventory.rst:422
#: ../../rst/dev_guide/developing_modules.rst:51
#: ../../rst/dev_guide/developing_plugins.rst:499
msgid "#ansible IRC chat channel"
msgstr ""

#: ../../rst/dev_guide/debugging.rst:5
msgid "Debugging modules"
msgstr ""

#: ../../rst/dev_guide/debugging.rst:13
msgid "Detailed debugging steps"
msgstr ""

#: ../../rst/dev_guide/debugging.rst:15
msgid "Ansible modules are put together as a zip file consisting of the module file and the various Python module boilerplate inside of a wrapper script. To see what is actually happening in the module, you need to extract the file from the wrapper. The wrapper script provides helper methods that let you do that."
msgstr ""

#: ../../rst/dev_guide/debugging.rst:17
msgid "The following steps use ``localhost`` as the target host, but you can use the same steps to debug against remote hosts as well. For a simpler approach to debugging without using the temporary files, see :ref:`simple debugging <simple_debugging>`."
msgstr ""

#: ../../rst/dev_guide/debugging.rst:20
msgid "Set :envvar:`ANSIBLE_KEEP_REMOTE_FILES` to ``1`` on the control host so Ansible will keep the remote module files instead of deleting them after the module finishes executing. Use the ``-vvv`` option to make Ansible more verbose. This will display the file name of the temporary module file."
msgstr ""

#: ../../rst/dev_guide/debugging.rst:40
msgid "Navigate to the temporary directory from the previous step. If the previous command was run against a remote host, connect to that host first before trying to navigate to the temporary directory."
msgstr ""

#: ../../rst/dev_guide/debugging.rst:47
msgid "Run the wrapper's ``explode`` command to turn the string into some Python files that you can work with."
msgstr ""

#: ../../rst/dev_guide/debugging.rst:55
msgid "If you want to examine the wrapper file you can. It will show a small Python script with a large base64 encoded string. The string contains the module to execute."
msgstr ""

#: ../../rst/dev_guide/debugging.rst:57
msgid "When you look into the temporary directory you'll see a structure like this:"
msgstr ""

#: ../../rst/dev_guide/debugging.rst:80
msgid "``AnsiballZ_ping.py`` is the Python script with the module code stored in a base64 encoded string. It contains various helper functions for executing the module."
msgstr ""

#: ../../rst/dev_guide/debugging.rst:82
msgid "``ping.py`` is the code for the module itself. You can modify this code to see what effect it would have on your module, or for debugging purposes."
msgstr ""

#: ../../rst/dev_guide/debugging.rst:84
msgid "The ``args`` file contains a JSON string. The string is a dictionary containing the module arguments and other variables that Ansible passes into the module to change its behavior. Modify this file to change the parameters passed to the module."
msgstr ""

#: ../../rst/dev_guide/debugging.rst:86
msgid "The ``ansible`` directory contains the module code in ``modules`` as well as code from :mod:`ansible.module_utils` that is used by the module. Ansible includes files for any :mod:`ansible.module_utils` imports in the module but not any files from any other module. If your module uses :mod:`ansible.module_utils.url` Ansible will include it for you. But if your module includes `requests <https://requests.readthedocs.io/en/master/api/>`_, then you'll have to make sure that the Python `requests library <https://pypi.org/project/requests/>`_ is installed on the system before running the module."
msgstr ""

#: ../../rst/dev_guide/debugging.rst:88
msgid "You can modify files in this directory if you suspect that the module is having a problem in some of this boilerplate code rather than in the module code you have written."
msgstr ""

#: ../../rst/dev_guide/debugging.rst:90
msgid "Once you edit the code or arguments in the exploded tree, use the ``execute`` subcommand to run it:"
msgstr ""

#: ../../rst/dev_guide/debugging.rst:97
msgid "This subcommand inserts the absolute path to ``debug_dir`` as the first item in ``sys.path`` and invokes the script using the arguments in the ``args`` file. You can continue to run the module like this until you understand the problem. Then you can copy the changes back into your real module file and test that the real module works via ``ansible`` or ``ansible-playbook``."
msgstr ""

#: ../../rst/dev_guide/debugging.rst:103
msgid "Simple debugging"
msgstr ""

#: ../../rst/dev_guide/debugging.rst:105
msgid "The easiest way to run a debugger in a module, either local or remote, is to use `epdb <https://pypi.org/project/epdb/>`_. Add ``import epdb; epdb.serve()`` in the module code on the control node at the desired break point. To connect to the debugger, run ``epdb.connect()``. See the `epdb documentation <https://pypi.org/project/epdb/>`_ for how to specify the ``host`` and ``port``. If connecting to a remote node, make sure to use a port that is allowed by any firewall between the control node and the remote node."
msgstr ""

#: ../../rst/dev_guide/debugging.rst:107
msgid "This technique should work with any remote debugger, but we do not guarantee any particular remote debugging tool will work."
msgstr ""

#: ../../rst/dev_guide/debugging.rst:109
msgid "The `q <https://pypi.org/project/q/>`_ library is another very useful debugging tool."
msgstr ""

#: ../../rst/dev_guide/debugging.rst:111
msgid "Since ``print()`` statements do not work inside modules, raising an exception is a good approach if you just want to see some specific data. Put ``raise Exception(some_value)`` somewhere in the module and run it normally. Ansible will handle this exception, pass the message back to the control node, and display it."
msgstr ""

#: ../../rst/dev_guide/developing_api.rst:5
msgid "Python API"
msgstr ""

#: ../../rst/dev_guide/developing_api.rst:7
#: ../../rst/dev_guide/developing_inventory.rst:17
#: ../../rst/dev_guide/developing_modules_best_practices.rst:9
#: ../../rst/dev_guide/testing_compile.rst:9
#: ../../rst/dev_guide/testing_httptester.rst:7
#: ../../rst/dev_guide/testing_integration.rst:9
#: ../../rst/dev_guide/testing_integration_legacy.rst:9
#: ../../rst/dev_guide/testing_pep8.rst:9
#: ../../rst/dev_guide/testing_sanity.rst:9
#: ../../rst/dev_guide/testing_units.rst:14
#: ../../rst/dev_guide/testing_units_modules.rst:11
#: ../../rst/dev_guide/testing_validate-modules.rst:9
msgid "Topics"
msgstr ""

#: ../../rst/dev_guide/developing_api.rst:9
msgid "This API is intended for internal Ansible use. Ansible may make changes to this API at any time that could break backward compatibility with older versions of the API. Because of this, external use is not supported by Ansible. If you want to use Python API only for executing playbooks or modules, consider `ansible-runner <https://ansible-runner.readthedocs.io/en/latest/>`_ first."
msgstr ""

#: ../../rst/dev_guide/developing_api.rst:11
msgid "There are several ways to use Ansible from an API perspective.   You can use the Ansible Python API to control nodes, you can extend Ansible to respond to various Python events, you can write plugins, and you can plug in inventory data from external data sources.  This document gives a basic overview and examples of the Ansible execution and playbook API."
msgstr ""

#: ../../rst/dev_guide/developing_api.rst:16
msgid "If you would like to use Ansible programmatically from a language other than Python, trigger events asynchronously, or have access control and logging demands, please see the `Ansible Tower documentation <https://docs.ansible.com/ansible-tower/>`_."
msgstr ""

#: ../../rst/dev_guide/developing_api.rst:19
msgid "Because Ansible relies on forking processes, this API is not thread safe."
msgstr ""

#: ../../rst/dev_guide/developing_api.rst:24
msgid "Python API example"
msgstr ""

#: ../../rst/dev_guide/developing_api.rst:26
msgid "This example is a simple demonstration that shows how to minimally run a couple of tasks:"
msgstr ""

#: ../../rst/dev_guide/developing_api.rst:31
msgid "Ansible emits warnings and errors via the display object, which prints directly to stdout, stderr and the Ansible log."
msgstr ""

#: ../../rst/dev_guide/developing_api.rst:33
msgid "The source code for the ``ansible`` command line tools (``lib/ansible/cli/``) is `available on GitHub <https://github.com/ansible/ansible/tree/devel/lib/ansible/cli>`_."
msgstr ""

#: ../../rst/dev_guide/developing_api.rst:38
#: ../../rst/dev_guide/developing_plugins.rst:492
msgid ":ref:`developing_inventory`"
msgstr ""

#: ../../rst/dev_guide/developing_api.rst:39
msgid "Developing dynamic inventory integrations"
msgstr ""

#: ../../rst/dev_guide/developing_api.rst:41
msgid "Getting started on developing a module"
msgstr ""

#: ../../rst/dev_guide/developing_api.rst:42
#: ../../rst/dev_guide/developing_core.rst:16
#: ../../rst/dev_guide/developing_inventory.rst:415
msgid ":ref:`developing_plugins`"
msgstr ""

#: ../../rst/dev_guide/developing_api.rst:43
#: ../../rst/dev_guide/developing_inventory.rst:416
msgid "How to develop plugins"
msgstr ""

#: ../../rst/dev_guide/developing_api.rst:44
#: ../../rst/dev_guide/developing_inventory.rst:419
#: ../../rst/dev_guide/testing_units_modules.rst:553
msgid "`Development Mailing List <https://groups.google.com/group/ansible-devel>`_"
msgstr ""

#: ../../rst/dev_guide/developing_api.rst:45
#: ../../rst/dev_guide/developing_inventory.rst:420
#: ../../rst/dev_guide/testing_units_modules.rst:554
msgid "Mailing list for development topics"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:6
msgid "Developing collections"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:8
msgid "Collections are a distribution format for Ansible content. You can use collections to package and distribute playbooks, roles, modules, and plugins. You can publish and use collections through `Ansible Galaxy <https://galaxy.ansible.com>`_."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:11
msgid "For details on how to *use* collections see :ref:`collections`."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:12
msgid "For the current development status of Collections and FAQ see `Ansible Collections Overview and FAQ <https://github.com/ansible-collections/overview/blob/main/README.rst>`_."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:21
msgid "Collection structure"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:23
msgid "Collections follow a simple data structure. None of the directories are required unless you have specific content that belongs in one of them. A collection does require a ``galaxy.yml`` file at the root level of the collection. This file contains all of the metadata that Galaxy and other tools need in order to package, build and publish the collection::"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:49
msgid "Ansible only accepts ``.md`` extensions for the :file:`README` file and any files in the :file:`/docs` folder."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:50
msgid "See the `ansible-collections <https://github.com/ansible-collections/>`_ GitHub Org for examples of collection structure."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:51
msgid "Not all directories are currently in use. Those are placeholders for future features."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:56
msgid "galaxy.yml"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:58
msgid "A collection must have a ``galaxy.yml`` file that contains the necessary information to build a collection artifact. See :ref:`collections_galaxy_meta` for details."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:64
msgid "docs directory"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:66
msgid "Put general documentation for the collection here. Keep the specific documentation for plugins and modules embedded as Python docstrings. Use the ``docs`` folder to describe how to use the roles and plugins the collection provides, role requirements, and so on. Use markdown and do not add subfolders."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:68
msgid "Use ``ansible-doc`` to view documentation for plugins inside a collection:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:74
msgid "The ``ansible-doc`` command requires the fully qualified collection name (FQCN) to display specific plugin documentation. In this example, ``my_namespace`` is the Galaxy namespace and ``my_collection`` is the collection name within that namespace."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:76
msgid "The Galaxy namespace of an Ansible collection is defined in the ``galaxy.yml`` file. It can be different from the GitHub organization or repository name."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:81
msgid "plugins directory"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:83
msgid "Add a 'per plugin type' specific subdirectory here, including ``module_utils`` which is usable not only by modules, but by most plugins by using their FQCN. This is a way to distribute modules, lookups, filters, and so on without having to import a role in every play."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:85
msgid "Vars plugins are unsupported in collections. Cache plugins may be used in collections for fact caching, but are not supported for inventory plugins."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:90
#: ../../rst/dev_guide/developing_collections.rst:639
msgid "module_utils"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:92
msgid "When coding with ``module_utils`` in a collection, the Python ``import`` statement needs to take into account the FQCN along with the ``ansible_collections`` convention. The resulting Python import will look like ``from ansible_collections.{namespace}.{collection}.plugins.module_utils.{util} import {something}``"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:94
msgid "The following example snippets show a Python and PowerShell module using both default Ansible ``module_utils`` and those provided by a collection. In this example the namespace is ``community``, the collection is ``test_collection``. In the Python example the ``module_util`` in question is called ``qradar`` such that the FQCN is ``community.test_collection.plugins.module_utils.qradar``:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:124
msgid "Note that importing something from an ``__init__.py`` file requires using the file name:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:130
msgid "In the PowerShell example the ``module_util`` in question is called ``hyperv`` such that the FCQN is ``community.test_collection.plugins.module_utils.hyperv``:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:152
msgid "roles directory"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:154
msgid "Collection roles are mostly the same as existing roles, but with a couple of limitations:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:156
msgid "Role names are now limited to contain only lowercase alphanumeric characters, plus ``_`` and start with an alpha character."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:157
msgid "Roles in a collection cannot contain plugins any more. Plugins must live in the collection ``plugins`` directory tree. Each plugin is accessible to all roles in the collection."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:159
msgid "The directory name of the role is used as the role name. Therefore, the directory name must comply with the above role name rules. The collection import into Galaxy will fail if a role name does not comply with these rules."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:163
msgid "You can migrate 'traditional roles' into a collection but they must follow the rules above. You may need to rename roles if they don't conform. You will have to move or link any role-based plugins to the collection specific directories."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:167
msgid "For roles imported into Galaxy directly from a GitHub repository, setting the ``role_name`` value in the role's metadata overrides the role name used by Galaxy. For collections, that value is ignored. When importing a collection, Galaxy uses the role directory as the name of the role and ignores the ``role_name`` metadata value."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:170
msgid "playbooks directory"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:172
msgid "TBD."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:177
msgid "tests directory"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:179
msgid "Ansible Collections are tested much like Ansible itself, by using the `ansible-test` utility which is released as part of Ansible, version 2.9.0 and newer. Because Ansible Collections are tested using the same tooling as Ansible itself, via `ansible-test`, all Ansible developer documentation for testing is applicable for authoring Collections Tests with one key concept to keep in mind."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:185
msgid "See :ref:`testing_collections` for specific information on how to test collections with ``ansible-test``."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:188
msgid "When reading the :ref:`developing_testing` documentation, there will be content that applies to running Ansible from source code via a git clone, which is typical of an Ansible developer. However, it's not always typical for an Ansible Collection author to be running Ansible from source but instead from a stable release, and to create Collections it is not necessary to run Ansible from source. Therefore, when references of dealing with `ansible-test` binary paths, command completion, or environment variables are presented throughout the :ref:`developing_testing` documentation; keep in mind that it is not needed for Ansible Collection Testing because the act of installing the stable release of Ansible containing `ansible-test` is expected to setup those things for you."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:202
msgid "meta directory"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:204
msgid "A collection can store some additional metadata in a ``runtime.yml`` file in the collection's ``meta`` directory. The ``runtime.yml`` file supports the top level keys:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:206
msgid "*requires_ansible*:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:208
msgid "The version of Ansible required to use the collection. Multiple versions can be separated with a comma."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:214
msgid "although the version is a `PEP440 Version Specifier <https://www.python.org/dev/peps/pep-0440/#version-specifiers>`_ under the hood, Ansible deviates from PEP440 behavior by truncating prerelease segments from the Ansible version. This means that Ansible 2.11.0b1 is compatible with something that ``requires_ansible: \">=2.11\"``."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:216
msgid "*plugin_routing*:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:218
msgid "Content in a collection that Ansible needs to load from another location or that has been deprecated/removed. The top level keys of ``plugin_routing`` are types of plugins, with individual plugin names as subkeys. To define a new location for a plugin, set the ``redirect`` field to another name. To deprecate a plugin, use the ``deprecation`` field to provide a custom warning message and the removal version or date. If the plugin has been renamed or moved to a new location, the ``redirect`` field should also be provided. If a plugin is being removed entirely, ``tombstone`` can be used for the fatal error message and removal version or date."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:247
msgid "*import_redirection*"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:249
msgid "A mapping of names for Python import statements and their redirected locations."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:261
msgid "Creating a collection skeleton"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:263
msgid "To start a new collection:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:271
msgid "Both the namespace and collection names use the same strict set of requirements. See `Galaxy namespaces <https://galaxy.ansible.com/docs/contributing/namespaces.html#galaxy-namespaces>`_ on the Galaxy docsite for those requirements."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:273
msgid "Once the skeleton exists, you can populate the directories with the content you want inside the collection. See `ansible-collections <https://github.com/ansible-collections/>`_ GitHub Org to get a better idea of what you can place inside a collection."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:278
msgid "Creating collections"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:280
msgid "To create a collection:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:282
msgid "Create a collection skeleton with the ``collection init`` command. See :ref:`creating_collections_skeleton` above."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:283
msgid "Add your content to the collection."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:284
msgid "Build the collection into a collection artifact with :ref:`ansible-galaxy collection build<building_collections>`."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:285
msgid "Publish the collection artifact to Galaxy with :ref:`ansible-galaxy collection publish<publishing_collections>`."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:287
msgid "A user can then install your collection on their systems."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:289
msgid "Currently the ``ansible-galaxy collection`` command implements the following sub commands:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:291
msgid "``init``: Create a basic collection skeleton based on the default template included with Ansible or your own template."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:292
msgid "``build``: Create a collection artifact that can be uploaded to Galaxy or your own repository."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:293
msgid "``publish``: Publish a built collection artifact to Galaxy."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:294
msgid "``install``: Install one or more collections."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:296
msgid "To learn more about the ``ansible-galaxy`` command-line tool, see the :ref:`ansible-galaxy` man page."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:302
msgid "Using documentation fragments in collections"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:304
msgid "To include documentation fragments in your collection:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:306
msgid "Create the documentation fragment: ``plugins/doc_fragments/fragment_name``."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:308
msgid "Refer to the documentation fragment with its FQCN."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:318
msgid ":ref:`module_docs_fragments` covers the basics for documentation fragments. The `kubernetes <https://github.com/ansible-collections/kubernetes>`_ collection includes a complete example."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:320
msgid "You can also share documentation fragments across collections with the FQCN."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:325
msgid "Building collections"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:327
msgid "To build a collection, run ``ansible-galaxy collection build`` from inside the root directory of the collection:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:333
msgid "This creates a tarball of the built collection in the current directory which can be uploaded to Galaxy.::"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:342
msgid "Certain files and folders are excluded when building the collection artifact. See :ref:`ignoring_files_and_folders_collections`  to exclude other files you would not want to distribute."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:343
msgid "If you used the now-deprecated ``Mazer`` tool for any of your collections, delete any and all files it added to your :file:`releases/` directory before you build your collection with ``ansible-galaxy``."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:344
msgid "The current Galaxy maximum tarball size is 2 MB."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:347
msgid "This tarball is mainly intended to upload to Galaxy as a distribution method, but you can use it directly to install the collection on target systems."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:353
msgid "Ignoring files and folders"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:355
msgid "By default the build step will include all the files in the collection directory in the final build artifact except for the following:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:357
msgid "``galaxy.yml``"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:358
msgid "``*.pyc``"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:359
msgid "``*.retry``"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:360
msgid "``tests/output``"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:361
msgid "previously built artifacts in the root directory"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:362
msgid "various version control directories like ``.git/``"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:364
msgid "To exclude other files and folders when building the collection, you can set a list of file glob-like patterns in the ``build_ignore`` key in the collection's ``galaxy.yml`` file. These patterns use the following special characters for wildcard matching:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:368
msgid "``*``: Matches everything"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:369
msgid "``?``: Matches any single character"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:370
msgid "``[seq]``: Matches and character in seq"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:371
msgid "``[!seq]``:Matches any character not in seq"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:373
msgid "For example, if you wanted to exclude the :file:`sensitive` folder within the ``playbooks`` folder as well any ``.tar.gz`` archives you can set the following in your ``galaxy.yml`` file:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:383
msgid "This feature is only supported when running ``ansible-galaxy collection build`` with Ansible 2.10 or newer."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:389
msgid "Trying collections locally"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:391
msgid "You can try your collection locally by installing it from the tarball. The following will enable an adjacent playbook to access the collection:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:399
msgid "You should use one of the values configured in :ref:`COLLECTIONS_PATHS` for your path. This is also where Ansible itself will expect to find collections when attempting to use them. If you don't specify a path value, ``ansible-galaxy collection install`` installs the collection in the first path defined in :ref:`COLLECTIONS_PATHS`, which by default is ``~/.ansible/collections``."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:403
msgid "If you want to use a collection directly out of a checked out git repository, see :ref:`hacking_collections`."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:405
msgid "Next, try using the local collection inside a playbook. For examples and more details see :ref:`Using collections <using_collections>`"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:410
msgid "Installing collections from a git repository"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:412
msgid "You can also test a version of your collection in development by installing it from a git repository."
msgstr ""

#: ../../rst/shared_snippets/installing_collections_git_repo.txt:1
msgid "You can install a collection in a git repository by providing the URI to the repository instead of a collection name or path to a ``tar.gz`` file. The collection must contain a ``galaxy.yml`` file, which will be used to generate the would-be collection artifact data from the directory. The URI should be prefixed with ``git+`` (or with ``git@`` to use a private repository with ssh authentication) and optionally supports a comma-separated `git commit-ish <https://git-scm.com/docs/gitglossary#def_commit-ish>`_ version (for example, a commit or tag)."
msgstr ""

#: ../../rst/shared_snippets/installing_collections_git_repo.txt:5
msgid "Embedding credentials into a git URI is not secure. Make sure to use safe auth options for security reasons. For example, use `SSH <https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh>`_, `netrc <https://linux.die.net/man/5/netrc>`_ or `http.extraHeader <https://git-scm.com/docs/git-config#Documentation/git-config.txt-httpextraHeader>`_/`url.<base>.pushInsteadOf <https://git-scm.com/docs/git-config#Documentation/git-config.txt-urlltbasegtpushInsteadOf>`_ in Git config to prevent your creds from being exposed in logs."
msgstr ""

#: ../../rst/shared_snippets/installing_collections_git_repo.txt:18
msgid "In a ``requirements.yml`` file, you can also use the ``type`` and ``version`` keys in addition to using the ``git+repo,version`` syntax for the collection name."
msgstr ""

#: ../../rst/shared_snippets/installing_collections_git_repo.txt:27
msgid "Git repositories can be used for collection dependencies as well. This can be helpful for local development and testing but built/published artifacts should only have dependencies on other artifacts."
msgstr ""

#: ../../rst/shared_snippets/installing_collections_git_repo.txt:34
msgid "Default repository search locations"
msgstr ""

#: ../../rst/shared_snippets/installing_collections_git_repo.txt:36
msgid "There are two paths searched in a repository for collections by default."
msgstr ""

#: ../../rst/shared_snippets/installing_collections_git_repo.txt:38
msgid "The first is the ``galaxy.yml`` file in the top level of the repository path. If the ``galaxy.yml`` file exists it's used as the collection metadata and the individual collection will be installed."
msgstr ""

#: ../../rst/shared_snippets/installing_collections_git_repo.txt:49
msgid "The second is a ``galaxy.yml`` file in each directory in the repository path (one level deep). In this scenario, each directory with a ``galaxy.yml`` is installed as a collection."
msgstr ""

#: ../../rst/shared_snippets/installing_collections_git_repo.txt:62
msgid "Specifying the location to search for collections"
msgstr ""

#: ../../rst/shared_snippets/installing_collections_git_repo.txt:64
msgid "If you have a different repository structure or only want to install a subset of collections, you can add a fragment to the end of your URI (before the optional comma-separated version) to indicate which path ansible-galaxy should inspect for ``galaxy.yml`` file(s). The path should be a directory to a collection or multiple collections (rather than the path to a ``galaxy.yml`` file)."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:423
msgid "Publishing collections"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:425
msgid "You can publish collections to Galaxy using the ``ansible-galaxy collection publish`` command or the Galaxy UI itself. You need a namespace on Galaxy to upload your collection. See `Galaxy namespaces <https://galaxy.ansible.com/docs/contributing/namespaces.html#galaxy-namespaces>`_ on the Galaxy docsite for details."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:427
msgid "Once you upload a version of a collection, you cannot delete or modify that version. Ensure that everything looks okay before you upload it."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:432
msgid "Getting your API token"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:434
msgid "To upload your collection to Galaxy, you must first obtain an API token (``--token`` in the ``ansible-galaxy`` CLI command or ``token`` in the :file:`ansible.cfg` file under the ``galaxy_server`` section). The API token is a secret token used to protect your content."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:436
msgid "To get your API token:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:438
msgid "For Galaxy, go to the `Galaxy profile preferences <https://galaxy.ansible.com/me/preferences>`_ page and click :guilabel:`API Key`."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:439
msgid "For Automation Hub, go to https://cloud.redhat.com/ansible/automation-hub/token/ and click :guilabel:`Load token` from the version dropdown."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:442
msgid "Storing or using your API token"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:444
msgid "Once you have retrieved your API token, you can store or use the token for collections in two ways:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:446
msgid "Pass the token to  the ``ansible-galaxy`` command using the ``--token``."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:447
msgid "Specify the token within a Galaxy server list in your :file:`ansible.cfg` file."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:450
msgid "Using the ``token`` argument"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:452
msgid "You can use the ``--token`` argument with the ``ansible-galaxy`` command (in conjunction with the ``--server`` argument or :ref:`GALAXY_SERVER` setting in your :file:`ansible.cfg` file). You cannot use ``apt-key`` with any servers defined in your :ref:`Galaxy server list <galaxy_server_config>`."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:460
msgid "Specify the token within a Galaxy server list"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:462
msgid "With this option, you configure one or more servers for Galaxy in your :file:`ansible.cfg` file under the ``galaxy_server_list`` section. For each server, you also configure the token."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:474
msgid "See :ref:`galaxy_server_config` for complete details."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:479
msgid "Upload using ansible-galaxy"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:482
msgid "By default, ``ansible-galaxy`` uses https://galaxy.ansible.com as the Galaxy server (as listed in the :file:`ansible.cfg` file under :ref:`galaxy_server`). If you are only publishing your collection to Ansible Galaxy, you do not need any further configuration. If you are using Red Hat Automation Hub or any other Galaxy server, see :ref:`Configuring the ansible-galaxy client <galaxy_server_config>`."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:484
msgid "To upload the collection artifact with the ``ansible-galaxy`` command:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:492
msgid "The above command assumes you have retrieved and stored your API token as part of a Galaxy server list. See :ref:`galaxy_get_token` for details."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:494
msgid "The ``ansible-galaxy collection publish`` command triggers an import process, just as if you uploaded the collection through the Galaxy website. The command waits until the import process completes before reporting the status back. If you want to continue without waiting for the import result, use the ``--no-wait`` argument and manually look at the import progress in your `My Imports <https://galaxy.ansible.com/my-imports/>`_ page."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:503
msgid "Upload a collection from the Galaxy website"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:505
msgid "To upload your collection artifact directly on Galaxy:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:507
msgid "Go to the `My Content <https://galaxy.ansible.com/my-content/namespaces>`_ page, and click the **Add Content** button on one of your namespaces."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:508
msgid "From the **Add Content** dialogue, click **Upload New Collection**, and select the collection archive file from your local filesystem."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:510
msgid "When uploading collections it doesn't matter which namespace you select. The collection will be uploaded to the namespace specified in the collection metadata in the ``galaxy.yml`` file. If you're not an owner of the namespace, the upload request will fail."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:514
msgid "Once Galaxy uploads and accepts a collection, you will be redirected to the **My Imports** page, which displays output from the import process, including any errors or warnings about the metadata and content contained in the collection."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:520
msgid "Collection versions"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:522
msgid "Once you upload a version of a collection, you cannot delete or modify that version. Ensure that everything looks okay before uploading. The only way to change a collection is to release a new version. The latest version of a collection (by highest version number) will be the version displayed everywhere in Galaxy; however, users will still be able to download older versions."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:526
msgid "Collection versions use `Semantic Versioning <https://semver.org/>`_ for version numbers. Please read the official documentation for details and examples. In summary:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:528
msgid "Increment major (for example: x in `x.y.z`) version number for an incompatible API change."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:529
msgid "Increment minor (for example: y in `x.y.z`) version number for new functionality in a backwards compatible manner (for example new modules/plugins, parameters, return values)."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:530
msgid "Increment patch (for example: z in `x.y.z`) version number for backwards compatible bug fixes."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:535
msgid "Migrating Ansible content to a different collection"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:537
msgid "First, look at `Ansible Collection Checklist <https://github.com/ansible-collections/overview/blob/main/collection_requirements.rst>`_."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:539
msgid "To migrate content from one collection to another, if the collections are parts of `Ansible distribution <https://github.com/ansible-community/ansible-build-data/blob/main/2.10/ansible.in>`_:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:541
msgid "Copy content from the source (old) collection to the target (new) collection."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:542
msgid "Deprecate the module/plugin with ``removal_version`` scheduled for the next major version in ``meta/runtime.yml`` of the old collection. The deprecation must be released after the copied content has been included in a release of the new collection."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:543
msgid "When the next major release of the old collection is prepared:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:545
msgid "remove the module/plugin from the old collection"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:546
msgid "remove the symlink stored in ``plugin/modules`` directory if appropriate (mainly when removing from ``community.general`` and ``community.network``)"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:547
msgid "remove related unit and integration tests"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:548
msgid "remove specific module utils"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:549
msgid "remove specific documentation fragments if there are any in the old collection"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:550
msgid "add a changelog fragment containing entries for ``removed_features`` and ``breaking_changes``; you can see an example of a changelog fragment in this `pull request <https://github.com/ansible-collections/community.general/pull/1304>`_"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:551
msgid "change ``meta/runtime.yml`` in the old collection:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:553
msgid "add ``redirect`` to the corresponding module/plugin's entry"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:554
msgid "in particular, add ``redirect`` for the removed module utils and documentation fragments if applicable"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:555
msgid "remove ``removal_version`` from there"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:556
msgid "remove related entries from ``tests/sanity/ignore.txt`` files if exist"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:557
msgid "remove changelog fragments for removed content that are not yet part of the changelog (in other words, do not modify `changelogs/changelog.yaml` and do not delete files mentioned in it)"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:558
msgid "remove requirements that are no longer required in ``tests/unit/requirements.txt``, ``tests/requirements.yml`` and ``galaxy.yml``"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:560
msgid "According to the above, you need to create at least three PRs as follows:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:562
msgid "Create a PR against the new collection to copy the content."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:563
msgid "Deprecate the module/plugin in the old collection."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:564
msgid "Later create a PR against the old collection to remove the content according to the schedule."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:568
msgid "Adding the content to the new collection"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:570
msgid "Create a PR in the new collection to:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:572
msgid "Copy ALL the related files from the old collection."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:573
msgid "If it is an action plugin, include the corresponding module with documentation."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:574
msgid "If it is a module, check if it has a corresponding action plugin that should move with it."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:575
msgid "Check ``meta/`` for relevant updates to ``runtime.yml`` if it exists."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:576
msgid "Carefully check the moved ``tests/integration`` and ``tests/units`` and update for FQCN."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:577
msgid "Review ``tests/sanity/ignore-*.txt`` entries in the old collection."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:578
msgid "Update ``meta/runtime.yml`` in the old collection."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:582
msgid "Removing the content from the old collection"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:584
msgid "Create a PR against the source collection repository to remove the modules, module_utils, plugins, and docs_fragments related to this migration:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:586
msgid "If you are removing an action plugin, remove the corresponding module that contains the documentation."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:587
msgid "If you are removing a module, remove any corresponding action plugin that should stay with it."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:588
msgid "Remove any entries about removed plugins from ``meta/runtime.yml``. Ensure they are added into the new repo."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:589
msgid "Remove sanity ignore lines from ``tests/sanity/ignore\\*.txt``"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:590
msgid "Remove associated integration tests from ``tests/integrations/targets/`` and unit tests from ``tests/units/plugins/``."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:591
msgid "if you are removing from content from ``community.general`` or ``community.network``, remove entries from ``.github/BOTMETA.yml``."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:592
msgid "Carefully review ``meta/runtime.yml`` for any entries you may need to remove or update, in particular deprecated entries."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:593
msgid "Update ``meta/runtime.yml`` to contain redirects for EVERY PLUGIN, pointing to the new collection name."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:597
msgid "Maintainers for the old collection have to make sure that the PR is merged in a way that it does not break user experience and semantic versioning:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:599
msgid "A new version containing the merged PR must not be released before the collection the content has been moved to has been released again, with that content contained in it. Otherwise the redirects cannot work and users relying on that content will experience breakage."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:600
msgid "Once 1.0.0 of the collection from which the content has been removed has been released, such PRs can only be merged for a new **major** version (in other words, 2.0.0, 3.0.0, and so on)."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:604
msgid "BOTMETA.yml"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:606
msgid "The ``BOTMETA.yml``, for example in `community.general collection repository <https://github.com/ansible-collections/community.general/blob/main/.github/BOTMETA.yml>`_, is the source of truth for:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:608
msgid "ansibullbot"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:610
msgid "If the old and/or new collection has ``ansibullbot``, its ``BOTMETA.yml`` must be updated correspondingly."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:612
msgid "Ansibulbot will know how to redirect existing issues and PRs to the new repo. The build process for docs.ansible.com will know where to find the module docs."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:632
msgid "`Example PR <https://github.com/ansible/ansible/pull/66981/files>`_"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:634
msgid "The ``migrated_to:`` key must be added explicitly for every *file*. You cannot add ``migrated_to`` at the directory level. This is to allow module and plugin webdocs to be redirected to the new collection docs."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:635
msgid "``migrated_to:`` MUST be added for every:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:637
#: ../../rst/dev_guide/developing_modules_documenting.rst
msgid "module"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:638
msgid "plugin"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:640
msgid "contrib/inventory script"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:642
msgid "You do NOT need to add ``migrated_to`` for:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:644
#: ../../rst/dev_guide/developing_collections.rst:668
msgid "Unit tests"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:645
#: ../../rst/dev_guide/developing_collections.rst:687
#: ../../rst/dev_guide/testing_integration.rst:7
msgid "Integration tests"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:646
msgid "ReStructured Text docs (anything under ``docs/docsite/rst/``)"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:647
msgid "Files that never existed in ``ansible/ansible:devel``"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:652
msgid "Testing collections"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:654
msgid "The main tool for testing collections is ``ansible-test``, Ansible's testing tool described in :ref:`developing_testing`. You can run several compile and sanity checks, as well as run unit and integration tests for plugins using ``ansible-test``. When you test collections, test against the ansible-base version(s) you are targeting."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:656
msgid "You must always execute ``ansible-test`` from the root directory of a collection. You can run ``ansible-test`` in Docker containers without installing any special requirements. The Ansible team uses this approach in Shippable both in the ansible/ansible GitHub repository and in the large community collections such as `community.general <https://github.com/ansible-collections/community.general/>`_ and `community.network <https://github.com/ansible-collections/community.network/>`_. The examples below demonstrate running tests in Docker containers."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:659
msgid "Compile and sanity tests"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:661
msgid "To run all compile and sanity tests::"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:665
msgid "See :ref:`testing_compile` and :ref:`testing_sanity` for more information. See the :ref:`full list of sanity tests <all_sanity_tests>` for details on the sanity tests and how to fix identified issues."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:670
msgid "You must place unit tests in the appropriate``tests/unit/plugins/`` directory. For example, you would place tests for ``plugins/module_utils/foo/bar.py`` in ``tests/unit/plugins/module_utils/foo/test_bar.py`` or ``tests/unit/plugins/module_utils/foo/bar/test_bar.py``. For examples, see the `unit tests in community.general <https://github.com/ansible-collections/community.general/tree/master/tests/unit/>`_."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:672
msgid "To run all unit tests for all supported Python versions::"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:676
msgid "To run all unit tests only for a specific Python version::"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:680
msgid "To run only a specific unit test::"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:684
msgid "You can specify Python requirements in the ``tests/unit/requirements.txt`` file. See :ref:`testing_units` for more information, especially on fixture files."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:689
msgid "You must place integration tests in the appropriate ``tests/integration/targets/`` directory. For module integration tests, you can use the module name alone. For example, you would place integration tests for ``plugins/modules/foo.py`` in a directory called ``tests/integration/targets/foo/``. For non-module plugin integration tests, you must add the plugin type to the directory name. For example, you would place integration tests for ``plugins/connections/bar.py`` in a directory called ``tests/integration/targets/connection_bar/``. For lookup plugins, the directory must be called ``lookup_foo``, for inventory plugins, ``inventory_foo``, and so on."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:691
msgid "You can write two different kinds of integration tests:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:693
msgid "Ansible role tests run with ``ansible-playbook`` and validate various aspects of the module. They can depend on other integration tests (usually named ``prepare_bar`` or ``setup_bar``, which prepare a service or install a requirement named ``bar`` in order to test module ``foo``) to set-up required resources, such as installing required libraries or setting up server services."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:694
msgid "``runme.sh`` tests run directly as scripts. They can set up inventory files, and execute ``ansible-playbook`` or ``ansible-inventory`` with various settings."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:696
msgid "For examples, see the `integration tests in community.general <https://github.com/ansible-collections/community.general/tree/master/tests/integration/targets/>`_. See also :ref:`testing_integration` for more details."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:698
msgid "Since integration tests can install requirements, and set-up, start and stop services, we recommended running them in docker containers or otherwise restricted environments whenever possible. By default, ``ansible-test`` supports Docker images for several operating systems. See the `list of supported docker images <https://github.com/ansible/ansible/blob/devel/test/lib/ansible_test/_data/completion/docker.txt>`_ for all options. Use the ``default`` image mainly for platform-independent integration tests, such as those for cloud modules. The following examples use the ``centos8`` image."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:700
msgid "To execute all integration tests for a collection::"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:704
msgid "If you want more detailed output, run the command with ``-vvv`` instead of ``-v``. Alternatively, specify ``--retry-on-error`` to automatically re-run failed tests with higher verbosity levels."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:706
msgid "To execute only the integration tests in a specific directory::"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:710
msgid "You can specify multiple target names. Each target name is the name of a directory in ``tests/integration/targets/``."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:715
msgid "Contributing to collections"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:717
msgid "If you want to add functionality to an existing collection, modify a collection you are using to fix a bug, or change the behavior of a module in a collection, clone the git repository for that collection and make changes on a branch. You can combine changes to a collection with a local checkout of Ansible (``source hacking/env-setup``)."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:719
msgid "This section describes the process for `community.general <https://github.com/ansible-collections/community.general/>`_. To contribute to other collections, replace the folder names ``community`` and ``general`` with the namespace and collection name of a different collection."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:721
msgid "We assume that you have included ``~/dev/ansible/collections/`` in :ref:`COLLECTIONS_PATHS`, and if that path mentions multiple directories, that you made sure that no other directory earlier in the search path contains a copy of ``community.general``. Create the directory ``~/dev/ansible/collections/ansible_collections/community``, and in it clone `the community.general Git repository <https://github.com/ansible-collections/community.general/>`_ or a fork of it into the folder ``general``::"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:727
msgid "If you clone a fork, add the original repository as a remote ``upstream``::"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:732
msgid "Now you can use this checkout of ``community.general`` in playbooks and roles with whichever version of Ansible you have installed locally, including a local checkout of ``ansible/ansible``'s ``devel`` branch."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:734
msgid "For collections hosted in the ``ansible_collections`` GitHub org, create a branch and commit your changes on the branch. When you are done (remember to add tests, see :ref:`testing_collections`), push your changes to your fork of the collection and create a Pull Request. For other collections, especially for collections not hosted on GitHub, check the ``README.md`` of the collection for information on contributing to it."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:739
msgid "Generating changelogs for a collection"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:741
msgid "We recommend that you use the `antsibull-changelog <https://github.com/ansible-community/antsibull-changelog>`_ tool to generate Ansible-compatible changelogs for your collection. The Ansible changelog uses the output of this tool to collate all the collections included in an Ansible release into one combined changelog for the release."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:745
msgid "Ansible here refers to the Ansible 2.10 or later release that includes a curated set of collections."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:748
msgid "Understanding antsibull-changelog"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:750
msgid "The ``antsibull-changelog`` tool allows you to create and update changelogs for Ansible collections that are compatible with the combined Ansible changelogs. This is an update to the changelog generator used in prior Ansible releases. The tool adds three new changelog fragment categories: ``breaking_changes``, ``security_fixes`` and ``trivial``. The tool also generates the ``changelog.yaml`` file that Ansible uses to create the combined ``CHANGELOG.rst`` file and Porting Guide for the release."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:752
msgid "See :ref:`changelogs_how_to` and the `antsibull-changelog documentation <https://github.com/ansible-community/antsibull-changelog/tree/main/docs>`_ for complete details."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:756
msgid "The collection maintainers set the changelog policy for their collections. See the individual collection contributing guidelines for complete details."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:759
msgid "Generating changelogs"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:761
msgid "To initialize changelog generation:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:763
msgid "Install ``antsibull-changelog``: :code:`pip install antsibull-changelog`."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:764
msgid "Initialize changelogs for your repository: :code:`antsibull-changelog init <path/to/your/collection>`."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:765
msgid "Optionally, edit the ``changelogs/config.yaml`` file to customize the location of the generated changelog ``.rst`` file or other options. See `Bootstrapping changelogs for collections <https://github.com/ansible-community/antsibull-changelog/blob/main/docs/changelogs.rst#bootstrapping-changelogs-for-collections>`_ for details."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:767
msgid "To generate changelogs from the changelog fragments you created:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:769
msgid "Optionally, validate your changelog fragments: :code:`antsibull-changelog lint`."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:770
msgid "Generate the changelog for your release: :code:`antsibull-changelog release [--version version_number]`."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:774
msgid "Add the  ``--reload-plugins`` option if you ran the ``antsibull-changelog release`` command previously and the version of the collection has not changed. ``antsibull-changelog`` caches the information on all plugins and does not update its cache until the collection version changes."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:778
msgid "Porting Guide entries"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:780
msgid "The following changelog fragment categories are consumed by the Ansible changelog generator into the Ansible Porting Guide:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:782
msgid "``major_changes``"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:783
msgid "``breaking_changes``"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:784
msgid "``deprecated_features``"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:785
msgid "``removed_features``"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:788
msgid "Including collection changelogs into Ansible"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:791
msgid "If your collection is part of Ansible, use one of the following three options  to include your changelog into the Ansible release changelog:"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:793
msgid "Use the ``antsibull-changelog`` tool."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:795
msgid "If are not using this tool, include the properly formatted ``changelog.yaml`` file  into your collection. See the `changelog.yaml format <https://github.com/ansible-community/antsibull-changelog/blob/main/docs/changelog.yaml-format.md>`_ for details."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:797
msgid "Add a link to own changelogs or release notes in any format by opening an issue at https://github.com/ansible-community/ansible-build-data/ with the HTML link to that information."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:801
msgid "For the first two options, Ansible pulls the changelog details from Galaxy so your changelogs must be included in the collection version on Galaxy that is included in the upcoming Ansible release."
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:807
msgid ":ref:`collections_galaxy_meta`"
msgstr ""

#: ../../rst/dev_guide/developing_collections.rst:808
msgid "Understand the collections metadata structure."
msgstr ""

#: ../../rst/dev_guide/developing_core.rst:3
msgid "Developing ``ansible-base``"
msgstr ""

#: ../../rst/dev_guide/developing_core.rst:5
msgid "Although ``ansible-base`` (the code hosted in the `ansible/ansible repository <https://github.com/ansible/ansible>`_ on GitHub) includes a few plugins that can be swapped out via playbook directives or configuration, much of the code there is not modular.  The documents here give insight into how the parts of ``ansible-base`` work together."
msgstr ""

#: ../../rst/dev_guide/developing_core.rst:14
#: ../../rst/dev_guide/developing_inventory.rst:411
#: ../../rst/dev_guide/developing_plugins.rst:490
msgid ":ref:`developing_api`"
msgstr ""

#: ../../rst/dev_guide/developing_core.rst:15
#: ../../rst/dev_guide/developing_plugins.rst:491
msgid "Learn about the Python API for task execution"
msgstr ""

#: ../../rst/dev_guide/developing_core.rst:17
msgid "Learn about developing plugins"
msgstr ""

#: ../../rst/dev_guide/developing_core.rst:21
msgid "#ansible-devel IRC chat channel"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:5
msgid "Developing dynamic inventory"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:7
msgid "Ansible can pull inventory information from dynamic sources, including cloud sources, by using the supplied :ref:`inventory plugins <inventory_plugins>`. For details about how to pull inventory information, see :ref:`dynamic_inventory`. If the source you want is not currently covered by existing plugins, you can create your own inventory plugin as with any other plugin type."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:9
msgid "In previous versions, you had to create a script or program that could output JSON in the correct format when invoked with the proper arguments. You can still use and write inventory scripts, as we ensured backwards compatibility via the :ref:`script inventory plugin <script_inventory>` and there is no restriction on the programming language used. If you choose to write a script, however, you will need to implement some features yourself such as caching, configuration management, dynamic variable and group composition, and so on. If you use :ref:`inventory plugins <inventory_plugins>` instead, you can leverage the Ansible codebase and add these common features automatically."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:22
msgid "Inventory sources"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:24
msgid "Inventory sources are the input strings that inventory plugins work with. An inventory source can be a path to a file or to a script, or it can be raw data that the plugin can interpret."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:27
msgid "The table below shows some examples of inventory plugins and the source types that you can pass to them with ``-i`` on the command line."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:30
msgid "Plugin"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:30
msgid "Source"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:32
msgid ":ref:`host list <host_list_inventory>`"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:32
msgid "A comma-separated list of hosts"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:34
msgid ":ref:`yaml <yaml_inventory>`"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:34
msgid "Path to a YAML format data file"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:36
msgid ":ref:`constructed <constructed_inventory>`"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:36
#: ../../rst/dev_guide/developing_inventory.rst:40
msgid "Path to a YAML configuration file"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:38
msgid ":ref:`ini <ini_inventory>`"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:38
msgid "Path to an INI formatted data file"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:40
msgid ":ref:`virtualbox <virtualbox_inventory>`"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:42
msgid ":ref:`script plugin <script_inventory>`"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:42
msgid "Path to an executable that outputs JSON"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:49
#: ../../rst/dev_guide/developing_plugins.rst:313
msgid "Inventory plugins"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:51
msgid "Like most plugin types (except modules), inventory plugins must be developed in Python. They execute on the controller and should therefore adhere to the :ref:`control_node_requirements`."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:53
msgid "Most of the documentation in :ref:`developing_plugins` also applies here. You should read that document first for a general understanding and then come back to this document for specifics on inventory plugins."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:55
msgid "Normally, inventory plugins are executed at the start of a run, and before the playbooks, plays, or roles are loaded. However, you can use the ``meta: refresh_inventory`` task to clear the current inventory and execute the inventory plugins again, and this task will generate a new inventory."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:58
msgid "If you use the persistent cache, inventory plugins can also use the configured cache plugin to store and retrieve data. Caching inventory avoids making repeated and costly external calls."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:63
msgid "Developing an inventory plugin"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:65
msgid "The first thing you want to do is use the base class:"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:75
msgid "If the inventory plugin is in a collection, the NAME should be in the 'namespace.collection_name.myplugin' format. The base class has a couple of methods that each plugin should implement and a few helpers for parsing the inventory source and updating the inventory."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:77
msgid "After you have the basic plugin working, you can incorporate other features by adding more base classes:"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:87
msgid "For the bulk of the work in a plugin, we mostly want to deal with 2 methods ``verify_file`` and ``parse``."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:92
msgid "verify_file method"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:94
msgid "Ansible uses this method to quickly determine if the inventory source is usable by the plugin. The determination does not need to be 100% accurate, as there might be an overlap in what plugins can handle and by default Ansible will try the enabled plugins as per their sequence."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:107
msgid "In the above example, from the :ref:`virtualbox inventory plugin <virtualbox_inventory>`, we screen for specific file name patterns to avoid attempting to consume any valid YAML file. You can add any type of condition here, but the most common one is 'extension matching'. If you implement extension matching for YAML configuration files, the path suffix <plugin_name>.<yml|yaml> should be accepted. All valid extensions should be documented in the plugin description."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:109
msgid "The following is another example that does not use a 'file' but the inventory source string itself, from the :ref:`host list <host_list_inventory>` plugin:"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:124
msgid "This method is just to expedite the inventory process and avoid unnecessary parsing of sources that are easy to filter out before causing a parse error."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:129
msgid "parse method"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:131
msgid "This method does the bulk of the work in the plugin. It takes the following parameters:"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:134
msgid "inventory: inventory object with existing data and the methods to add hosts/groups/variables to inventory"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:135
msgid "loader: Ansible's DataLoader. The DataLoader can read files, auto load JSON/YAML and decrypt vaulted data, and cache read files."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:136
msgid "path: string with inventory source (this is usually a path, but is not required)"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:137
msgid "cache: indicates whether the plugin should use or avoid caches (cache plugin and/or loader)"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:140
msgid "The base class does some minimal assignment for reuse in other methods."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:150
msgid "It is up to the plugin now to parse the provided inventory source and translate it into Ansible inventory. To facilitate this, the example below uses a few helper functions:"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:187
msgid "The specifics will vary depending on API and structure returned. Remember that if you get an inventory source error or any other issue, you should ``raise AnsibleParserError`` to let Ansible know that the source was invalid or the process failed."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:189
msgid "For examples on how to implement an inventory plugin, see the source code here: `lib/ansible/plugins/inventory <https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/inventory>`_."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:195
msgid "inventory cache"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:197
msgid "To cache the inventory, extend the inventory plugin documentation with the inventory_cache documentation fragment and use the Cacheable base class."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:210
msgid "Next, load the cache plugin specified by the user to read from and update the cache. If your inventory plugin uses YAML-based configuration files and the ``_read_config_data`` method, the cache plugin is loaded within that method. If your inventory plugin does not use ``_read_config_data``, you must load the cache explicitly with ``load_cache_plugin``."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:221
msgid "Before using the cache plugin, you must retrieve a unique cache key by using the ``get_cache_key`` method. This task needs to be done by all inventory modules using the cache, so that you don't use/overwrite other parts of the cache."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:231
msgid "Now that you've enabled caching, loaded the correct plugin, and retrieved a unique cache key, you can set up the flow of data between the cache and your inventory using the ``cache`` parameter of the ``parse`` method. This value comes from the inventory manager and indicates whether the inventory is being refreshed (such as via ``--flush-cache`` or the meta task ``refresh_inventory``). Although the cache shouldn't be used to populate the inventory when being refreshed, the cache should be updated with the new inventory if the user has enabled caching. You can use ``self._cache`` like a dictionary. The following pattern allows refreshing the inventory to work in conjunction with caching."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:266
msgid "After the ``parse`` method is complete, the contents of ``self._cache`` is used to set the cache plugin if the contents of the cache have changed."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:271
msgid "You have three other cache methods available:"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:269
msgid "``set_cache_plugin`` forces the cache plugin to be set with the contents of ``self._cache``, before the ``parse`` method completes"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:270
msgid "``update_cache_if_changed`` sets the cache plugin only if ``self._cache`` has been modified, before the ``parse`` method completes"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:271
msgid "``clear_cache`` flushes the cache, ultimately by calling the cache plugin's ``flush()`` method, whose implementation is dependent upon the particular cache plugin in use. Note that if the user is using the same cache backend for facts and inventory, both will get flushed. To avoid this, the user can specify a distinct cache backend in their inventory plugin configuration."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:276
msgid "Common format for inventory sources"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:278
msgid "To simplify development, most plugins use a standard YAML-based configuration file as the inventory source. The file has only one required field ``plugin``, which should contain the name of the plugin that is expected to consume the file. Depending on other common features used, you might need other fields, and you can add custom options in each plugin as required. For example, if you use the integrated caching, ``cache_plugin``, ``cache_timeout`` and other cache-related fields could be present."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:285
msgid "The 'auto' plugin"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:287
msgid "From Ansible 2.5 onwards, we include the :ref:`auto inventory plugin <auto_inventory>` and enable it by default. If the ``plugin`` field in your standard configuration file matches the name of your inventory plugin, the ``auto`` inventory plugin will load your plugin. The 'auto' plugin makes it easier to use your plugin without having to update configurations."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:294
msgid "Inventory scripts"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:296
msgid "Even though we now have inventory plugins, we still support inventory scripts, not only for backwards compatibility but also to allow users to leverage other programming languages."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:302
msgid "Inventory script conventions"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:304
msgid "Inventory scripts must accept the ``--list`` and ``--host <hostname>`` arguments. Although other arguments are allowed, Ansible will not use them. Such arguments might still be useful for executing the scripts directly."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:307
msgid "When the script is called with the single argument ``--list``, the script must output to stdout a JSON-encoded hash or dictionary that contains all the groups to be managed. Each group's value should be either a hash or dictionary containing a list of each host, any child groups, and potential group variables, or simply a list of hosts::"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:329
msgid "If any of the elements of a group are empty, they may be omitted from the output."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:331
msgid "When called with the argument ``--host <hostname>`` (where <hostname> is a host from above), the script must print either an empty JSON hash/dictionary, or a hash/dictionary of variables to make them available to templates and playbooks. For example::"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:339
msgid "Printing variables is optional. If the script does not print variables, it should print an empty hash or dictionary."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:344
msgid "Tuning the external inventory script"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:348
msgid "The stock inventory script system mentioned above works for all versions of Ansible, but calling ``--host`` for every host can be rather inefficient, especially if it involves API calls to a remote subsystem."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:350
msgid "To avoid this inefficiency, if the inventory script returns a top-level element called \"_meta\", it is possible to return all the host variables in a single script execution. When this meta element contains a value for \"hostvars\", the inventory script will not be invoked with ``--host`` for each host. This behavior results in a significant performance increase for large numbers of hosts."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:352
msgid "The data to be added to the top-level JSON dictionary looks like this::"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:371
msgid "To satisfy the requirements of using ``_meta``, to prevent ansible from calling your inventory with ``--host`` you must at least populate ``_meta`` with an empty ``hostvars`` dictionary. For example::"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:387
msgid "If you intend to replace an existing static inventory file with an inventory script, it must return a JSON object which contains an 'all' group that includes every host in the inventory as a member and every group in the inventory as a child. It should also include an 'ungrouped' group which contains all hosts which are not members of any other group. A skeleton example of this JSON object is:"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:407
msgid "An easy way to see how this should look is using :ref:`ansible-inventory`, which also supports ``--list`` and ``--host`` parameters like an inventory script would."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:412
msgid "Python API to Playbooks and Ad Hoc Task Execution"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:414
msgid "Get started with developing a module"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:417
msgid "`Ansible Tower <https://www.ansible.com/products/tower>`_"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:418
msgid "REST API endpoint and GUI for Ansible, syncs with dynamic inventory"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:6
msgid "Adding modules and plugins locally"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:8
msgid "The easiest, quickest, and the most popular way to extend Ansible is to use a local module or a plugin. You can create them or copy existing ones for local use. You can store a local module or plugin on your Ansible control node and share it with your team or organization. You can also share a local plugin or module by including it in a collection or embedding it in a role, then publishing the collection or role on Ansible Galaxy. If you are using roles on Ansible Galaxy, then you are already using local modules and plugins without realizing it."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:10
msgid "If you are using an existing module or plugin but Ansible can't find it, this page is all you need. However, if you want to create a plugin or a module, go to :ref:`developing_plugins` and :ref:`developing_modules_general` topics and then return to this page to know how to add it locally."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:12
msgid "Extending Ansible with local modules and plugins offers lots of shortcuts such as:"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:14
msgid "You can copy other people's modules and plugins."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:15
msgid "When writing a new module, you can choose any programming language you like."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:16
msgid "You do not have to clone any repositories."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:17
msgid "You do not have to open a pull request."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:18
msgid "You do not have to add tests (though we recommend that you do!)."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:20
msgid "To save a local module or plugin such that Ansible can find and use it, add the module or plugin in the appropriate directory (the directories are specified in later parts of this topic)."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:28
msgid "Modules and plugins: what is the difference?"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:29
msgid "If you are looking to add local functionality to Ansible, you might wonder whether you need a module or a plugin. Here is a quick overview to help you decide between the two:"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:31
msgid "Modules are reusable, standalone scripts that can be used by the Ansible API, the :command:`ansible` command, or the :command:`ansible-playbook` command. Modules provide a defined interface. Each module accepts arguments and returns information to Ansible by printing a JSON string to stdout before exiting. Modules execute on the target system (usually that means on a remote system) in separate processes."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:32
msgid ":ref:`Plugins <plugins_lookup>` augment Ansible's core functionality and execute on the control node within the ``/usr/bin/ansible`` process. Plugins offer options and extensions for the core features of Ansible - transforming data, logging output, connecting to inventory, and more."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:37
msgid "Adding a module locally"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:38
msgid "Ansible automatically loads all executable files found in certain directories as modules."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:40
msgid "For local modules, use the name of the file as the module name: for example, if the module file is ``~/.ansible/plugins/modules/local_users.py``, use ``local_users`` as the module name."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:42
msgid "To load your local modules automatically and make them available to all playbooks and roles, add them in any of these locations:"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:44
msgid "any directory added to the ``ANSIBLE_LIBRARY`` environment variable (``$ANSIBLE_LIBRARY`` takes a colon-separated list like ``$PATH``)"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:45
msgid "``~/.ansible/plugins/modules/``"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:46
msgid "``/usr/share/ansible/plugins/modules/``"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:48
msgid "After you save your module file in one of these locations, Ansible loads it and you can use it in any local task, playbook, or role."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:50
msgid "To confirm that ``my_custom_module`` is available:"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:52
msgid "type ``ansible localhost -m my_custom_module``. You should see the output for that module."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:54
msgid "or"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:56
msgid "type ``ansible-doc -t module my_custom_module``. You should see the documentation for that module."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:60
msgid "Currently, the ``ansible-doc`` command can parse module documentation only from modules written in Python. If you have a module written in a programming language other than Python, please write the documentation in a Python file adjacent to the module file."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:62
msgid "You can limit the availability of your local module. If you want to use a local module only with selected playbooks or only with a single role, load it in one of the following locations:"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:64
msgid "In a selected playbook or playbooks: Store the module in a subdirectory called ``library`` in the directory that contains those playbooks."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:65
msgid "In a single role: Store the module in a subdirectory called ``library`` within that role."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:71
msgid "Adding a plugin locally"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:72
msgid "Ansible loads plugins automatically too, and loads each type of plugin separately from a directory named for the type of plugin. Here's the full list of plugin directory names:"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:74
msgid "action_plugins*"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:75
msgid "cache_plugins"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:76
msgid "callback_plugins"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:77
msgid "connection_plugins"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:78
msgid "filter_plugins*"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:79
msgid "inventory_plugins"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:80
msgid "lookup_plugins"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:81
msgid "shell_plugins"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:82
msgid "strategy_plugins"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:83
msgid "test_plugins*"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:84
msgid "vars_plugins"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:88
msgid "After you add the plugins and verify that they are available for use, you can see the documentation for all the plugins except for the ones marked with an asterisk (*) above."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:90
msgid "To load your local plugins automatically, add them in any of these locations:"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:92
msgid "any directory added to the relevant ``ANSIBLE_plugin_type_PLUGINS`` environment variable (these variables, such as ``$ANSIBLE_INVENTORY_PLUGINS`` and ``$ANSIBLE_VARS_PLUGINS`` take colon-separated lists like ``$PATH``)"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:93
msgid "the directory named for the correct ``plugin_type`` within ``~/.ansible/plugins/`` - for example, ``~/.ansible/plugins/callback``"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:94
msgid "the directory named for the correct ``plugin_type`` within ``/usr/share/ansible/plugins/`` - for example, ``/usr/share/ansible/plugins/action``"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:96
msgid "After your plugin file is in one of these locations, Ansible loads it and you can use it in any local module, task, playbook, or role. Alternatively, you can edit your ``ansible.cfg`` file to add directories that contain local plugins. For details about adding directories of local plugins, see :ref:`ansible_configuration_settings`."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:98
msgid "To confirm that ``plugins/plugin_type/my_custom_plugin`` is available:"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:100
msgid "type ``ansible-doc -t <plugin_type> my_custom_lookup_plugin``. For example, ``ansible-doc -t lookup my_custom_lookup_plugin``. You should see the documentation for that plugin. This works for all plugin types except the ones marked with ``*`` in the list above  - see :ref:`ansible-doc` for more details."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:102
msgid "You can limit the availability of your local plugin. If you want to use a local plugin only with selected playbooks or only with a single role, load it in one of the following locations:"
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:104
msgid "In a selected playbook or playbooks: Store the plugin in a subdirectory for the correct ``plugin_type`` (for example, ``callback_plugins`` or ``inventory_plugins``) in the directory that contains the playbooks."
msgstr ""

#: ../../rst/dev_guide/developing_locally.rst:105
msgid "In a single role: Store the plugin in a subdirectory for the correct ``plugin_type`` (for example, ``cache_plugins`` or ``strategy_plugins``) within that role. When shipped as part of a role, the plugin is available as soon as the role is executed."
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:5
msgid "Using and developing module utilities"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:7
msgid "Ansible provides a number of module utilities, or snippets of shared code, that provide helper functions you can use when developing your own modules. The ``basic.py`` module utility provides the main entry point for accessing the Ansible library, and all Python Ansible modules must import something from ``ansible.module_utils``. A common option is to import ``AnsibleModule``::"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:15
msgid "The ``ansible.module_utils`` namespace is not a plain Python package: it is constructed dynamically for each task invocation, by extracting imports and resolving those matching the namespace against a :ref:`search path <ansible_search_path>` derived from the active configuration."
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:20
msgid "To reduce the maintenance burden in a collection or in local modules, you can extract duplicated code into one or more module utilities and import them into your modules. For example, if you have your own custom modules that import a ``my_shared_code`` library, you can place that into a ``./module_utils/my_shared_code.py`` file like this::"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:25
msgid "When you run ``ansible-playbook``, Ansible will merge any files in your local ``module_utils`` directories into the ``ansible.module_utils`` namespace in the order defined by the :ref:`Ansible search path <ansible_search_path>`."
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:28
msgid "Naming and finding module utilities"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:30
msgid "You can generally tell what a module utility does from its name and/or its location. Generic utilities (shared code used by many different kinds of modules) live in the main ansible/ansible codebase, in the ``common`` subdirectory or in the root directory of ``lib/ansible/module_utils``. Utilities used by a particular set of modules generally live in the same collection as those modules. For example:"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:32
msgid "``lib/ansible/module_utils/urls.py`` contains shared code for parsing URLs"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:33
msgid "``openstack.cloud.plugins.module_utils.openstack.py`` contains utilities for modules that work with OpenStack instances"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:34
msgid "``ansible.netcommon.plugins.module_utils.network.common.config.py`` contains utility functions for use by networking modules"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:36
msgid "Following this pattern with your own module utilities makes everything easy to find and use."
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:41
msgid "Standard module utilities"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:43
msgid "Ansible ships with an extensive library of ``module_utils`` files. You can find the module utility source code in the ``lib/ansible/module_utils`` directory under your main Ansible path. We describe the most widely used utilities below. For more details on any specific module utility, please see the `source code for module_utils <https://github.com/ansible/ansible/tree/devel/lib/ansible/module_utils>`_."
msgstr ""

#: ../../rst/dev_guide/shared_snippets/licensing.txt:2
msgid "**LICENSING REQUIREMENTS**  Ansible enforces the following licensing requirements:"
msgstr ""

#: ../../rst/dev_guide/shared_snippets/licensing.txt:7
msgid "Utilities (files in ``lib/ansible/module_utils/``) may have one of two licenses:"
msgstr ""

#: ../../rst/dev_guide/shared_snippets/licensing.txt:5
msgid "A file in ``module_utils`` used **only** for a specific vendor's hardware, provider, or service may be licensed under GPLv3+. Adding a new file under ``module_utils`` with GPLv3+ needs to be approved by the core team."
msgstr ""

#: ../../rst/dev_guide/shared_snippets/licensing.txt:7
msgid "All other ``module_utils`` must be licensed under BSD, so GPL-licensed third-party and Galaxy modules can use them."
msgstr ""

#: ../../rst/dev_guide/shared_snippets/licensing.txt:8
msgid "If there's doubt about the appropriate license for a file in ``module_utils``, the Ansible Core Team will decide during an Ansible Core Community Meeting."
msgstr ""

#: ../../rst/dev_guide/shared_snippets/licensing.txt:9
msgid "All other files shipped with Ansible, including all modules, must be licensed under the GPL license (GPLv3 or later)."
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:47
msgid "``api.py`` - Supports generic API modules"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:48
msgid "``basic.py`` - General definitions and helper utilities for Ansible modules"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:49
msgid "``common/dict_transformations.py`` - Helper functions for dictionary transformations"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:50
msgid "``common/file.py`` - Helper functions for working with files"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:51
msgid "``common/text/`` - Helper functions for converting and formatting text"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:52
msgid "``common/parameters.py`` - Helper functions for dealing with module parameters"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:53
msgid "``common/sys_info.py`` - Functions for getting distribution and platform information"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:54
msgid "``common/validation.py`` - Helper functions for validating module parameters against a module argument spec"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:55
msgid "``facts/`` - Directory of utilities for modules that return facts. See `PR 23012 <https://github.com/ansible/ansible/pull/23012>`_ for more information"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:56
msgid "``json_utils.py`` - Utilities for filtering unrelated output around module JSON output, like leading and trailing lines"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:57
msgid "``powershell/`` - Directory of definitions and helper functions for Windows PowerShell modules"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:58
msgid "``pycompat24.py`` - Exception workaround for Python 2.4"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:59
msgid "``service.py`` - Utilities to enable modules to work with Linux services (placeholder, not in use)"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:60
msgid "``six/__init__.py`` - Bundled copy of the `Six Python library <https://pypi.org/project/six/>`_ to aid in writing code compatible with both Python 2 and Python 3"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:61
msgid "``splitter.py`` - String splitting and manipulation utilities for working with Jinja2 templates"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:62
msgid "``urls.py`` - Utilities for working with http and https requests"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:64
msgid "Several commonly-used utilities migrated to collections in Ansible 2.10, including:"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:66
msgid "``ismount.py`` migrated to ``ansible.posix.plugins.module_utils.mount.py`` - Single helper function that fixes os.path.ismount"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:67
msgid "``known_hosts.py`` migrated to ``community.general.plugins.module_utils.known_hosts.py`` - utilities for working with known_hosts file"
msgstr ""

#: ../../rst/dev_guide/developing_module_utilities.rst:69
msgid "For a list of migrated content with destination collections, see https://github.com/ansible/ansible/blob/devel/lib/ansible/config/ansible_builtin_runtime.yml."
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:6
msgid "Should you develop a module?"
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:8
msgid "Developing Ansible modules is easy, but often it is not necessary. Before you start writing a new module, ask:"
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:10
msgid "Does a similar module already exist?"
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:12
msgid "An existing module may cover the functionality you want. Ansible collections include thousands of modules. Search our :ref:`list of included collections <list_of_collections>` or `Ansible Galaxy <https://galaxy.ansible.com>`_ to see if an existing module does what you need."
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:14
msgid "Should you use or develop an action plugin instead of a module?"
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:16
msgid "An action plugin may be the best way to get the functionality you want. Action plugins run on the control node instead of on the managed node, and their functionality is available to all modules. For more information about developing plugins, read the :ref:`developing plugins page <developing_plugins>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:18
msgid "Should you use a role instead of a module?"
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:20
msgid "A combination of existing modules may cover the functionality you want. You can write a role for this type of use case. Check out the :ref:`roles documentation<playbooks_reuse_roles>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:22
msgid "Should you create a collection instead of a single module?"
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:24
msgid "The functionality you want may be too large for a single module. If you want to connect Ansible to a new cloud provider, database, or network platform, you may need to :ref:`develop a new collection<developing_modules_in_groups>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:26
msgid "Each module should have a concise and well defined functionality. Basically, follow the UNIX philosophy of doing one thing well."
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:28
msgid "A module should not require that a user know all the underlying options of an API/tool to be used. For instance, if the legal values for a required module parameter cannot be documented, that's a sign that the module would be rejected."
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:30
msgid "Modules should typically encompass much of the logic for interacting with a resource. A lightweight wrapper around an API that does not contain much logic would likely cause users to offload too much logic into a playbook, and for this reason the module would be rejected. Instead try creating multiple modules for interacting with smaller individual pieces of the API."
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:32
msgid "If your use case isn't covered by an existing module, an action plugin, or a role, and you don't need to create multiple modules, then you're ready to start developing a new module. Choose from the topics below for next steps:"
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:34
msgid "I want to :ref:`get started on a new module <developing_modules_general>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:35
msgid "I want to review :ref:`tips and conventions for developing good modules <developing_modules_best_practices>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:36
msgid "I want to :ref:`write a Windows module <developing_modules_general_windows>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:37
msgid "I want :ref:`an overview of Ansible's architecture <developing_program_flow_modules>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:38
msgid "I want to :ref:`document my module <developing_modules_documenting>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:39
msgid "I want to :ref:`contribute my module back to Ansible Core <developing_modules_checklist>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:40
msgid "I want to :ref:`add unit and integration tests to my module <developing_testing>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:41
msgid "I want to :ref:`add Python 3 support to my module <developing_python_3>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:42
msgid "I want to :ref:`write multiple modules <developing_modules_in_groups>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:46
#: ../../rst/dev_guide/developing_plugins.rst:488
msgid ":ref:`list_of_collections`"
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:47
#: ../../rst/dev_guide/developing_plugins.rst:489
msgid "Browse existing collections, modules, and plugins"
msgstr ""

#: ../../rst/dev_guide/developing_modules.rst:49
msgid "Development mailing list"
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:6
msgid "Conventions, tips, and pitfalls"
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:11
msgid "As you design and develop modules, follow these basic conventions and tips for clean, usable code:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:14
msgid "Scoping your module(s)"
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:16
msgid "Especially if you want to contribute your module(s) to an existing Ansible Collection, make sure each module includes enough logic and functionality, but not too much. If these guidelines seem confusing, consider :ref:`whether you really need to write a module <module_dev_should_you>` at all."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:18
msgid "Each module should have a concise and well-defined functionality. Basically, follow the UNIX philosophy of doing one thing well."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:19
msgid "Do not add ``get``, ``list`` or ``info`` state options to an existing module - create a new ``_info`` or ``_facts`` module."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:20
msgid "Modules should not require that a user know all the underlying options of an API/tool to be used. For instance, if the legal values for a required module option cannot be documented, the module does not belong in Ansible Core."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:21
msgid "Modules should encompass much of the logic for interacting with a resource. A lightweight wrapper around a complex API forces users to offload too much logic into their playbooks. If you want to connect Ansible to a complex API, :ref:`create multiple modules <developing_modules_in_groups>` that interact with smaller individual pieces of the API."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:22
msgid "Avoid creating a module that does the work of other modules; this leads to code duplication and divergence, and makes things less uniform, unpredictable and harder to maintain. Modules should be the building blocks. If you are asking 'how can I have a module execute other modules' ... you want to write a role."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:25
msgid "Designing module interfaces"
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:27
msgid "If your module is addressing an object, the option for that object should be called ``name`` whenever possible, or accept ``name`` as an alias."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:28
msgid "Modules accepting boolean status should accept ``yes``, ``no``, ``true``, ``false``, or anything else a user may likely throw at them. The AnsibleModule common code supports this with ``type='bool'``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:29
msgid "Avoid ``action``/``command``, they are imperative and not declarative, there are other ways to express the same thing."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:32
msgid "General guidelines & tips"
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:34
msgid "Each module should be self-contained in one file, so it can be auto-transferred by ``ansible-base``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:35
msgid "Module name MUST use underscores instead of hyphens or spaces as a word separator. Using hyphens and spaces will prevent ``ansible-base`` from importing your module."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:36
msgid "Always use the ``hacking/test-module.py`` script when developing modules - it will warn you about common pitfalls."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:37
msgid "If you have a local module that returns information specific to your installations, a good name for this module is ``site_info``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:38
msgid "Eliminate or minimize dependencies. If your module has dependencies, document them at the top of the module file and raise JSON error messages when dependency import fails."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:39
msgid "Don't write to files directly; use a temporary file and then use the ``atomic_move`` function from ``ansible.module_utils.basic`` to move the updated temporary file into place. This prevents data corruption and ensures that the correct context for the file is kept."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:40
msgid "Avoid creating caches. Ansible is designed without a central server or authority, so you cannot guarantee it will not run with different permissions, options or locations. If you need a central authority, have it on top of Ansible (for example, using bastion/cm/ci server or tower); do not try to build it into modules."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:41
msgid "If you package your module(s) in an RPM, install the modules on the control machine in ``/usr/share/ansible``. Packaging modules in RPMs is optional."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:44
msgid "Functions and Methods"
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:46
msgid "Each function should be concise and should describe a meaningful amount of work."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:47
msgid "\"Don't repeat yourself\" is generally a good philosophy."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:48
msgid "Function names should use underscores: ``my_function_name``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:49
msgid "The name of each function should describe what the function does."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:50
msgid "Each function should have a docstring."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:51
msgid "If your code is too nested, that's usually a sign the loop body could benefit from being a function. Parts of our existing code are not the best examples of this at times."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:54
msgid "Python tips"
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:56
msgid "Include a ``main`` function that wraps the normal execution."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:57
msgid "Call your ``main`` function from a conditional so you can import it into unit tests - for example:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:67
msgid "Importing and using shared code"
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:69
msgid "Use shared code whenever possible - don't reinvent the wheel. Ansible offers the ``AnsibleModule`` common Python code, plus :ref:`utilities <developing_module_utilities>` for many common use cases and patterns. You can also create documentation fragments for docs that apply to multiple modules."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:70
msgid "Import ``ansible.module_utils`` code in the same place as you import other libraries."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:71
msgid "Do NOT use wildcards (*) for importing other python modules; instead, list the function(s) you are importing (for example, ``from some.other_python_module.basic import otherFunction``)."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:72
msgid "Import custom packages in ``try``/``except``, capture any import errors, and handle them with ``fail_json()`` in ``main()``. For example:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:89
msgid "Then in ``main()``, just after the argspec, do"
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:98
msgid "And document the dependency in the ``requirements`` section of your module's :ref:`documentation_block`."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:103
msgid "Handling module failures"
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:105
msgid "When your module fails, help users understand what went wrong. If you are using the ``AnsibleModule`` common Python code, the ``failed`` element will be included for you automatically when you call ``fail_json``. For polite module failure behavior:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:107
msgid "Include a key of ``failed`` along with a string explanation in ``msg``. If you don't do this, Ansible will use standard return codes: 0=success and non-zero=failure."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:108
msgid "Don't raise a traceback (stacktrace). Ansible can deal with stacktraces and automatically converts anything unparseable into a failed result, but raising a stacktrace on module failure is not user-friendly."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:109
msgid "Do not use ``sys.exit()``. Use ``fail_json()`` from the module object."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:112
msgid "Handling exceptions (bugs) gracefully"
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:114
msgid "Validate upfront--fail fast and return useful and clear error messages."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:115
msgid "Use defensive programming--use a simple design for your module, handle errors gracefully, and avoid direct stacktraces."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:116
msgid "Fail predictably--if we must fail, do it in a way that is the most expected. Either mimic the underlying tool or the general way the system works."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:117
msgid "Give out a useful message on what you were doing and add exception messages to that."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:118
msgid "Avoid catchall exceptions, they are not very useful unless the underlying API gives very good error messages pertaining the attempted action."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:123
msgid "Creating correct and informative module output"
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:125
msgid "Modules must output valid JSON only. Follow these guidelines for creating correct, useful module output:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:127
msgid "Make your top-level return type a hash (dictionary)."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:128
msgid "Nest complex return values within the top-level hash."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:129
msgid "Incorporate any lists or simple scalar values within the top-level return hash."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:130
msgid "Do not send module output to standard error, because the system will merge standard out with standard error and prevent the JSON from parsing."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:131
msgid "Capture standard error and return it as a variable in the JSON on standard out. This is how the command module is implemented."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:132
msgid "Never do ``print(\"some status message\")`` in a module, because it will not produce valid JSON output."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:133
msgid "Always return useful data, even when there is no change."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:134
msgid "Be consistent about returns (some modules are too random), unless it is detrimental to the state/action."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:135
msgid "Make returns reusable--most of the time you don't want to read it, but you do want to process it and re-purpose it."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:136
msgid "Return diff if in diff mode. This is not required for all modules, as it won't make sense for certain ones, but please include it when applicable."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:137
msgid "Enable your return values to be serialized as JSON with Python's standard `JSON encoder and decoder <https://docs.python.org/3/library/json.html>`_ library. Basic python types (strings, int, dicts, lists, and so on) are serializable."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:138
msgid "Do not return an object using exit_json(). Instead, convert the fields you need from the object into the fields of a dictionary and return the dictionary."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:139
msgid "Results from many hosts will be aggregated at once, so your module should return only relevant output. Returning the entire contents of a log file is generally bad form."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:141
msgid "If a module returns stderr or otherwise fails to produce valid JSON, the actual output will still be shown in Ansible, but the command will not succeed."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:146
msgid "Following Ansible conventions"
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:148
msgid "Ansible conventions offer a predictable user interface across all modules, playbooks, and roles. To follow Ansible conventions in your module development:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:150
msgid "Use consistent names across modules (yes, we have many legacy deviations - don't make the problem worse!)."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:151
msgid "Use consistent options (arguments) within your module(s)."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:152
msgid "Do not use 'message' or 'syslog_facility' as an option name, because this is used internally by Ansible."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:153
msgid "Normalize options with other modules - if Ansible and the API your module connects to use different names for the same option, add aliases to your options so the user can choose which names to use in tasks and playbooks."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:154
msgid "Return facts from ``*_facts`` modules in the ``ansible_facts`` field of the :ref:`result dictionary<common_return_values>` so other modules can access them."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:155
msgid "Implement ``check_mode`` in all ``*_info`` and ``*_facts`` modules. Playbooks which conditionalize based on fact information will only conditionalize correctly in ``check_mode`` if the facts are returned in ``check_mode``. Usually you can add ``supports_check_mode=True`` when instantiating ``AnsibleModule``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:156
msgid "Use module-specific environment variables. For example, if you use the helpers in ``module_utils.api`` for basic authentication with ``module_utils.urls.fetch_url()`` and you fall back on environment variables for default values, use a module-specific environment variable like :code:`API_<MODULENAME>_USERNAME` to avoid conflicts between modules."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:157
msgid "Keep module options simple and focused - if you're loading a lot of choices/states on an existing option, consider adding a new, simple option instead."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:158
msgid "Keep options small when possible. Passing a large data structure to an option might save us a few tasks, but it adds a complex requirement that we cannot easily validate before passing on to the module."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:159
msgid "If you want to pass complex data to an option, write an expert module that allows this, along with several smaller modules that provide a more 'atomic' operation against the underlying APIs and services. Complex operations require complex data. Let the user choose whether to reflect that complexity in tasks and plays or in  vars files."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:160
msgid "Implement declarative operations (not CRUD) so the user can ignore existing state and focus on final state. For example, use ``started/stopped``, ``present/absent``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:161
msgid "Strive for a consistent final state (aka idempotency). If running your module twice in a row against the same system would result in two different states, see if you can redesign or rewrite to achieve consistent final state. If you can't, document the behavior and the reasons for it."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:162
msgid "Provide consistent return values within the standard Ansible return structure, even if NA/None are used for keys normally returned under other options."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:163
msgid "Follow additional guidelines that apply to families of modules if applicable. For example, AWS modules should follow the  :ref:`Amazon development checklist <AWS_module_development>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:167
msgid "Module Security"
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:169
msgid "Avoid passing user input from the shell."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:170
msgid "Always check return codes."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:171
msgid "You must always use ``module.run_command``, not ``subprocess`` or ``Popen`` or ``os.system``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:172
msgid "Avoid using the shell unless absolutely necessary."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:173
msgid "If you must use the shell, you must pass ``use_unsafe_shell=True`` to ``module.run_command``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:174
msgid "If any variables in your module can come from user input with ``use_unsafe_shell=True``, you must wrap them with ``pipes.quote(x)``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:175
msgid "When fetching URLs, use ``fetch_url`` or ``open_url`` from ``ansible.module_utils.urls``. Do not use ``urllib2``, which does not natively verify TLS certificates and so is insecure for https."
msgstr ""

#: ../../rst/dev_guide/developing_modules_best_practices.rst:176
msgid "Sensitive values marked with ``no_log=True`` will automatically have that value stripped from module return values. If your module could return these sensitive values as part of a dictionary key name, you should call the ``ansible.module_utils.basic.sanitize_keys()`` function to strip the values from the keys. See the ``uri`` module for an example."
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:6
msgid "Contributing your module to an existing Ansible collection"
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:8
msgid "If you want to contribute a module to an existing collection, you must meet the community's objective and subjective requirements. Please read the details below, and also review our :ref:`tips for module development <developing_modules_best_practices>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:10
msgid "Modules accepted into certain collections are included in every Ansible release on PyPI. However, contributing to one of these collections is not the only way to distribute a module - you can :ref:`create your own collection <developing_collections>`, embed modules in roles on Galaxy or simply share copies of your module code for :ref:`local use <developing_locally>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:13
msgid "Contributing modules: objective requirements"
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:15
msgid "To contribute a module to most Ansible collections, you must:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:17
msgid "write your module in either Python or Powershell for Windows"
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:18
msgid "use the ``AnsibleModule`` common code"
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:19
msgid "support Python 2.6 and Python 3.5 - if your module cannot support Python 2.6, explain the required minimum Python version and rationale in the requirements section in ``DOCUMENTATION``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:20
msgid "use proper :ref:`Python 3 syntax <developing_python_3>`"
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:21
msgid "follow `PEP 8 <https://www.python.org/dev/peps/pep-0008/>`_ Python style conventions - see :ref:`testing_pep8` for more information"
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:22
msgid "license your module under the GPL license (GPLv3 or later)"
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:23
msgid "understand the :ref:`license agreement <contributor_license_agreement>`, which applies to all contributions"
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:24
msgid "conform to Ansible's :ref:`formatting and documentation <developing_modules_documenting>` standards"
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:25
msgid "include comprehensive :ref:`tests <developing_testing>` for your module"
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:26
msgid "minimize module dependencies"
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:27
msgid "support :ref:`check_mode <check_mode_dry>` if possible"
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:28
msgid "ensure your code is readable"
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:29
msgid "if a module is named ``<something>_facts``, it should be because its main purpose is returning ``ansible_facts``. Do not name modules that do not do this with ``_facts``. Only use ``ansible_facts`` for information that is specific to the host machine, for example network interfaces and their configuration, which operating system and which programs are installed."
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:30
msgid "Modules that query/return general information (and not ``ansible_facts``) should be named ``_info``. General information is non-host specific information, for example information on online/cloud services (you can access different accounts for the same online service from the same host), or information on VMs and containers accessible from the machine."
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:32
msgid "Additional requirements may apply for certain collections. Review the individual collection repositories for more information."
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:34
msgid "Please make sure your module meets these requirements before you submit your PR/proposal. If you have questions, reach out via `Ansible's IRC chat channel <http://irc.freenode.net>`_ or the `Ansible development mailing list <https://groups.google.com/group/ansible-devel>`_."
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:37
msgid "Contributing to Ansible: subjective requirements"
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:39
msgid "If your module meets these objective requirements, collection maintainers will review your code to see if they think it's clear, concise, secure, and maintainable. They will consider whether your module provides a good user experience, helpful error messages, reasonable defaults, and more. This process is subjective, with no exact standards for acceptance. For the best chance of getting your module accepted, follow our :ref:`tips for module development <developing_modules_best_practices>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:42
msgid "Other checklists"
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:44
msgid ":ref:`Tips for module development <developing_modules_best_practices>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:45
msgid ":ref:`Amazon development checklist <AWS_module_development>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules_checklist.rst:46
msgid ":ref:`Windows development checklist <developing_modules_general_windows>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:6
msgid "Module format and documentation"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:8
msgid "If you want to contribute your module to most Ansible collections, you must write your module in Python and follow the standard format described below. (Unless you're writing a Windows module, in which case the :ref:`Windows guidelines <developing_modules_general_windows>` apply.) In addition to following this format, you should review our :ref:`submission checklist <developing_modules_checklist>`, :ref:`programming tips <developing_modules_best_practices>`, and :ref:`strategy for maintaining Python 2 and Python 3 compatibility <developing_python_3>`, as well as information about :ref:`testing <developing_testing>` before you open a pull request."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:10
msgid "Every Ansible module written in Python must begin with seven standard sections in a particular order, followed by the code. The sections in order are:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:16
msgid "Why don't the imports go first?"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:18
msgid "Keen Python programmers may notice that contrary to PEP 8's advice we don't put ``imports`` at the top of the file. This is because the ``DOCUMENTATION`` through ``RETURN`` sections are not used by the module code itself; they are essentially extra docstrings for the file. The imports are placed after these special variables for the same reason as PEP 8 puts the imports after the introductory comments and docstrings. This keeps the active parts of the code together and the pieces which are purely informational apart. The decision to exclude E402 is based on readability (which is what PEP 8 is about). Documentation strings in a module are much more similar to module level docstrings, than code, and are never utilized by the module itself. Placing the imports below this documentation and closer to the code, consolidates and groups all related code in a congruent manner to improve readability, debugging and understanding."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:20
msgid "**Copy old modules with care!**"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:22
msgid "Some older Ansible modules have ``imports`` at the bottom of the file, ``Copyright`` notices with the full GPL prefix, and/or ``DOCUMENTATION`` fields in the wrong order. These are legacy files that need updating - do not copy them into new modules. Over time we are updating and correcting older modules. Please follow the guidelines on this page!"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:27
msgid "Python shebang & UTF-8 coding"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:29
msgid "Begin your Ansible module with ``#!/usr/bin/python`` - this \"shebang\" allows ``ansible_python_interpreter`` to work. Follow the shebang immediately with ``# -*- coding: utf-8 -*-`` to clarify that the file is UTF-8 encoded."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:34
msgid "Copyright and license"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:36
msgid "After the shebang and UTF-8 coding, add a `copyright line <https://www.gnu.org/licenses/gpl-howto.en.html>`_ with the original copyright holder and a license declaration. The license declaration should be ONLY one line, not the full GPL prefix.:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:46
msgid "Major additions to the module (for instance, rewrites) may add additional copyright lines. Any legal review will include the source control history, so an exhaustive copyright header is not necessary. Please do not edit the existing copyright year. This simplifies project administration and is unlikely to cause any interesting legal issues. When adding a second copyright line for a significant feature or rewrite, add the newer line above the older one:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:62
msgid "ANSIBLE_METADATA block"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:64
msgid "Since we moved to collections we have deprecated the METADATA functionality, it is no longer required for modules, but it will not break anything if present."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:70
msgid "DOCUMENTATION block"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:72
msgid "After the shebang, the UTF-8 coding, the copyright line, and the license section comes the ``DOCUMENTATION`` block. Ansible's online module documentation is generated from the ``DOCUMENTATION`` blocks in each module's source code. The ``DOCUMENTATION`` block must be valid YAML. You may find it easier to start writing your ``DOCUMENTATION`` string in an :ref:`editor with YAML syntax highlighting <other_tools_and_programs>` before you include it in your Python file. You can start by copying our `example documentation string <https://github.com/ansible/ansible/blob/devel/examples/DOCUMENTATION.yml>`_ into your module file and modifying it. If you run into syntax issues in your YAML, you can validate it on the `YAML Lint <http://www.yamllint.com/>`_ website."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:80
msgid "Module documentation should briefly and accurately define what each module and option does, and how it works with others in the underlying system. Documentation should be written for broad audience--readable both by experts and non-experts."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:75
msgid "Descriptions should always start with a capital letter and end with a full stop. Consistency always helps."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:76
msgid "Verify that arguments in doc and module spec dict are identical."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:77
msgid "For password / secret arguments ``no_log=True`` should be set."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:78
msgid "For arguments that seem to contain sensitive information but **do not** contain secrets, such as \"password_length\", set ``no_log=False`` to disable the warning message."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:79
#: ../../rst/dev_guide/developing_modules_documenting.rst:146
msgid "If an option is only sometimes required, describe the conditions. For example, \"Required when I(state=present).\""
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:80
msgid "If your module allows ``check_mode``, reflect this fact in the documentation."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:82
msgid "To create clear, concise, consistent, and useful documentation, follow the :ref:`style guide <style_guide>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:84
msgid "Each documentation field is described below. Before committing your module documentation, please test it at the command line and as HTML:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:86
msgid "As long as your module file is :ref:`available locally <local_modules>`, you can use ``ansible-doc -t module my_module_name`` to view your module documentation at the command line. Any parsing errors will be obvious - you can view details by adding ``-vvv`` to the command."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:87
msgid "You should also :ref:`test the HTML output <testing_module_documentation>` of your module documentation."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:90
msgid "Documentation fields"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:92
msgid "All fields in the ``DOCUMENTATION`` block are lower-case. All fields are required unless specified otherwise:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:96
msgid "The name of the module."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:97
msgid "Must be the same as the filename, without the ``.py`` extension."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst
msgid "short_description"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:101
msgid "A short description which is displayed on the :ref:`list_of_collections` page and ``ansible-doc -l``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:102
msgid "The ``short_description`` is displayed by ``ansible-doc -l`` without any category grouping, so it needs enough detail to explain the module's purpose without the context of the directory structure in which it lives."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:104
msgid "Unlike ``description:``, ``short_description`` should not have a trailing period/full stop."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst
msgid "description"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:108
msgid "A detailed description (generally two or more sentences)."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:109
msgid "Must be written in full sentences, in other words, with capital letters and periods/full stops."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:110
msgid "Shouldn't mention the module name."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:111
msgid "Make use of multiple entries rather than using one long paragraph."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:112
msgid "Don't quote complete values unless it is required by YAML."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst
msgid "version_added"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:116
msgid "The version of Ansible when the module was added."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:117
msgid "This is a string, and not a float, for example, ``version_added: '2.1'``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst
msgid "author"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:121
msgid "Name of the module author in the form ``First Last (@GitHubID)``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:122
msgid "Use a multi-line list if there is more than one author."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:123
msgid "Don't use quotes as it should not be required by YAML."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst
msgid "deprecated"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:127
msgid "Marks modules that will be removed in future releases. See also :ref:`module_lifecycle`."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst
#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "options"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:131
msgid "Options are often called `parameters` or `arguments`. Because the documentation field is called `options`, we will use that term."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:132
msgid "If the module has no options (for example, it's a ``_facts`` module), all you need is one line: ``options: {}``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:133
msgid "If your module has options (in other words, accepts arguments), each option should be documented thoroughly. For each module option, include:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst
msgid "option-name"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:137
msgid "Declarative operation (not CRUD), to focus on the final state, for example `online:`, rather than `is_online:`."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:138
msgid "The name of the option should be consistent with the rest of the module, as well as other modules in the same category."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:139
msgid "When in doubt, look for other modules to find option names that are used for the same purpose, we like to offer consistency to our users."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:143
msgid "Detailed explanation of what this option does. It should be written in full sentences."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:144
msgid "The first entry is a description of the option itself; subsequent entries detail its use, dependencies, or format of possible values."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:145
msgid "Should not list the possible values (that's what ``choices:`` is for, though it should explain what the values do if they aren't obvious)."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:147
msgid "Mutually exclusive options must be documented as the final sentence on each of the options."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:151
msgid "Only needed if ``true``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:152
msgid "If missing, we assume the option is not required."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst
#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "default"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:156
msgid "If ``required`` is false/missing, ``default`` may be specified (assumed 'null' if missing)."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:157
msgid "Ensure that the default value in the docs matches the default value in the code."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:158
msgid "The default field must not be listed as part of the description, unless it requires additional information or conditions."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:159
msgid "If the option is a boolean value, you can use any of the boolean values recognized by Ansible: (such as true/false or yes/no).  Choose the one that reads better in the context of the option."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst
#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "choices"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:164
msgid "List of option values."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:165
msgid "Should be absent if empty."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst
#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "type"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:169
msgid "Specifies the data type that option accepts, must match the ``argspec``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:170
msgid "If an argument is ``type='bool'``, this field should be set to ``type: bool`` and no ``choices`` should be specified."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:171
msgid "If an argument is ``type='list'``, ``elements`` should be specified."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst
#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "elements"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:175
msgid "Specifies the data type for list elements in case ``type='list'``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst
#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "aliases"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:178
msgid "List of optional name aliases."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:179
msgid "Generally not needed."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:183
msgid "Only needed if this option was extended after initial Ansible release, in other words, this is greater than the top level `version_added` field."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:184
msgid "This is a string, and not a float, for example, ``version_added: '2.3'``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst
msgid "suboptions"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:188
msgid "If this option takes a dict or list of dicts, you can define the structure here."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:189
msgid "See :ref:`ansible_collections.azure.azcollection.azure_rm_securitygroup_module`, :ref:`ansible_collections.azure.azcollection.azure_rm_azurefirewall_module`, and :ref:`ansible_collections.openstack.cloud.baremetal_node_action_module` for examples."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst
msgid "requirements"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:193
msgid "List of requirements (if applicable)."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:194
msgid "Include minimum versions."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst
msgid "seealso"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:198
msgid "A list of references to other modules, documentation or Internet resources"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:199
msgid "In Ansible 2.10 and later, references to modules must use  the FQCN or ``ansible.builtin`` for modules in ``ansible-base``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:200
msgid "A reference can be one of the following formats:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst
msgid "notes"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:225
msgid "Details of any important information that doesn't fit in one of the above sections."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:226
msgid "For example, whether ``check_mode`` is or is not supported."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:230
msgid "Linking and other format macros within module documentation"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:232
msgid "You can link from your module documentation to other module docs, other resources on docs.ansible.com, and resources elsewhere on the internet with the help of some pre-defined macros. The correct formats for these macros are:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:234
msgid "``L()`` for links with a heading. For example: ``See L(Ansible Tower,https://www.ansible.com/products/tower).`` As of Ansible 2.10, do not use ``L()`` for relative links between Ansible documentation and collection documentation."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:235
msgid "``U()`` for URLs. For example: ``See U(https://www.ansible.com/products/tower) for an overview.``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:236
msgid "``R()`` for cross-references with a heading (added in Ansible 2.10). For example: ``See R(Cisco IOS Platform Guide,ios_platform_options)``.  Use the RST anchor for the cross-reference. See :ref:`adding_anchors_rst` for details."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:237
msgid "``M()`` for module names. For example: ``See also M(ansible.builtin.yum) or M(community.general.apt_rpm)``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:239
msgid "There are also some macros which do not create links but we use them to display certain types of content in a uniform way:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:242
msgid "``I()`` for option names. For example: ``Required if I(state=present).``  This is italicized in the documentation."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:244
msgid "``C()`` for files and option values. For example: ``If not set the environment variable C(ACME_PASSWORD) will be used.``  This displays with a mono-space font in the documentation."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:245
msgid "``B()`` currently has no standardized usage.  It is displayed in boldface in the documentation."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:246
msgid "``HORIZONTALLINE`` is used sparingly as a separator in long descriptions.  It becomes a horizontal rule (the ``<hr>`` html tag) in the documentation."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:250
msgid "For links between modules and documentation within a collection, you can use any of the options above. For links outside of your collection, use ``R()`` if available. Otherwise, use ``U()`` or ``L()`` with full URLs (not relative links). For modules, use ``M()`` with the FQCN or ``ansible.builtin`` as shown in the example. If you are creating your own documentation site, you will need to use the `intersphinx extension <https://www.sphinx-doc.org/en/master/usage/extensions/intersphinx.html>`_ to convert ``R()`` and ``M()`` to the correct links."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:254
msgid "To refer to a group of modules in a collection, use ``R()``.  When a collection is not the right granularity, use ``C(..)``:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:256
msgid "-``Refer to the R(community.kubernetes collection, plugins_in_community.kubernetes) for information on managing kubernetes clusters.`` -``The C(win_*) modules (spread across several collections) allow you to manage various aspects of windows hosts.``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:262
msgid "Because it stands out better, use ``seealso`` for general references over the use of notes or adding links to the description."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:267
msgid "Documentation fragments"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:269
msgid "If you are writing multiple related modules, they may share common documentation, such as authentication details, file mode settings, ``notes:`` or ``seealso:`` entries. Rather than duplicate that information in each module's ``DOCUMENTATION`` block, you can save it once as a doc_fragment plugin and use it in each module's documentation. In Ansible, shared documentation fragments are contained in a ``ModuleDocFragment`` class in `lib/ansible/plugins/doc_fragments/ <https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/doc_fragments>`_ or the equivalent directory in a collection. To include a documentation fragment, add ``extends_documentation_fragment: FRAGMENT_NAME`` in your module documentation. Use the fully qualified collection name for the FRAGMENT_NAME (for example, ``community.kubernetes.k8s_auth_options``)."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:271
msgid "Modules should only use items from a doc fragment if the module will implement all of the interface documented there in a manner that behaves the same as the existing modules which import that fragment. The goal is that items imported from the doc fragment will behave identically when used in another module that imports the doc fragment."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:273
msgid "By default, only the ``DOCUMENTATION`` property from a doc fragment is inserted into the module documentation. It is possible to define additional properties in the doc fragment in order to import only certain parts of a doc fragment or mix and match as appropriate. If a property is defined in both the doc fragment and the module, the module value overrides the doc fragment."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:275
msgid "Here is an example doc fragment named ``example_fragment.py``:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:293
msgid "To insert the contents of ``OTHER`` in a module:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:299
msgid "Or use both :"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:312
msgid "Since Ansible 2.8, you can have user-supplied doc_fragments by using a ``doc_fragments`` directory adjacent to play or role, just like any other plugin."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:314
msgid "For example, all AWS modules should include:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:322
msgid ":ref:`docfragments_collections` describes how to incorporate documentation fragments in a collection."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:327
msgid "EXAMPLES block"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:329
msgid "After the shebang, the UTF-8 coding, the copyright line, the license section, and the ``DOCUMENTATION`` block comes the ``EXAMPLES`` block. Here you show users how your module works with real-world examples in multi-line plain-text YAML format. The best examples are ready for the user to copy and paste into a playbook. Review and update your examples with every change to your module."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:331
msgid "Per playbook best practices, each example should include a ``name:`` line::"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:340
msgid "The ``name:`` line should be capitalized and not include a trailing dot."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:342
msgid "Use a fully qualified collection name (FQCN) as a part of the module's name like in the example above. For modules in ``ansible-base``, use the ``ansible.builtin.`` identifier, for example ``ansible.builtin.debug``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:344
msgid "If your examples use boolean options, use yes/no values. Since the documentation generates boolean values as yes/no, having the examples use these values as well makes the module documentation more consistent."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:346
msgid "If your module returns facts that are often needed, an example of how to use them can be helpful."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:351
msgid "RETURN block"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:353
msgid "After the shebang, the UTF-8 coding, the copyright line, the license section, ``DOCUMENTATION`` and ``EXAMPLES`` blocks comes the ``RETURN`` block. This section documents the information the module returns for use by other modules."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:355
msgid "If your module doesn't return anything (apart from the standard returns), this section of your module should read: ``RETURN = r''' # '''`` Otherwise, for each value returned, provide the following fields. All fields are required unless specified otherwise."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst
msgid "return name"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:359
msgid "Name of the returned field."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:362
msgid "Detailed description of what this value represents. Capitalized and with trailing dot."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst
msgid "returned"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:364
msgid "When this value is returned, such as ``always``, ``changed`` or ``success``. This is a string and can contain any human-readable content."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:366
msgid "Data type."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:368
msgid "If ``type='list'``, specifies the data type of the list's elements."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst
msgid "sample"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:370
msgid "One or more examples."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:372
msgid "Only needed if this return was extended after initial Ansible release, in other words, this is greater than the top level `version_added` field. This is a string, and not a float, for example, ``version_added: '2.3'``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst
msgid "contains"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:375
msgid "Optional. To describe nested return values, set ``type: complex``, ``type: dict``, or ``type: list``/``elements: dict`` and repeat the elements above for each sub-field."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:377
msgid "Here are two example ``RETURN`` sections, one with three simple fields and one with a complex nested field::"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:423
msgid "Python imports"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:425
msgid "After the shebang, the UTF-8 coding, the copyright line, the license, and the sections for ``DOCUMENTATION``, ``EXAMPLES``, and ``RETURN``, you can finally add the python imports. All modules must use Python imports in the form:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:431
msgid "The use of \"wildcard\" imports such as ``from module_utils.basic import *`` is no longer allowed."
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:436
#: ../../rst/dev_guide/testing_documentation.rst:7
msgid "Testing module documentation"
msgstr ""

#: ../../rst/dev_guide/developing_modules_documenting.rst:438
msgid "To test Ansible documentation locally please :ref:`follow instruction<testing_module_documentation>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:6
msgid "Developing Ansible modules"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:8
msgid "A module is a reusable, standalone script that Ansible runs on your behalf, either locally or remotely. Modules interact with your local machine, an API, or a remote system to perform specific tasks like changing a database password or spinning up a cloud instance. Each module can be used by the Ansible API, or by the :command:`ansible` or :command:`ansible-playbook` programs. A module provides a defined interface, accepts arguments, and returns information to Ansible by printing a JSON string to stdout before exiting."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:10
msgid "If you need functionality that is not available in any of the thousands of Ansible modules found in collections, you can easily write your own custom module. When you write a module for local use, you can choose any programming language and follow your own rules. Use this topic to learn how to create an Ansible module in Python. After you create a module, you must add it locally to the appropriate directory so that Ansible can find and execute it. For details about adding a module locally, see :ref:`developing_locally`."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:18
msgid "Preparing an environment for developing Ansible modules"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:21
msgid "Installing prerequisites via apt (Ubuntu)"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:23
msgid "Due to dependencies (for example ansible -> paramiko -> pynacl -> libffi):"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:31
msgid "Creating a development environment (platform-agnostic steps)"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:33
msgid "Clone the Ansible repository: ``$ git clone https://github.com/ansible/ansible.git``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:35
msgid "Change directory into the repository root dir: ``$ cd ansible``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:36
msgid "Create a virtual environment: ``$ python3 -m venv venv`` (or for Python 2 ``$ virtualenv venv``. Note, this requires you to install the virtualenv package: ``$ pip install virtualenv``)"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:39
msgid "Activate the virtual environment: ``$ . venv/bin/activate``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:40
msgid "Install development requirements: ``$ pip install -r requirements.txt``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:42
msgid "Run the environment setup script for each new dev shell process: ``$ . hacking/env-setup``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:45
msgid "After the initial setup above, every time you are ready to start developing Ansible you should be able to just run the following from the root of the Ansible repo: ``$ . venv/bin/activate && . hacking/env-setup``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:52
msgid "Creating an info or a facts module"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:54
msgid "Ansible gathers information about the target machines using facts modules, and gathers information on other objects or files using info modules. If you find yourself trying to add ``state: info`` or ``state: list`` to an existing module, that is often a sign that a new dedicated ``_facts`` or ``_info`` module is needed."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:57
msgid "In Ansible 2.8 and onwards, we have two type of information modules, they are ``*_info`` and ``*_facts``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:59
msgid "If a module is named ``<something>_facts``, it should be because its main purpose is returning ``ansible_facts``. Do not name modules that do not do this with ``_facts``. Only use ``ansible_facts`` for information that is specific to the host machine, for example network interfaces and their configuration, which operating system and which programs are installed."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:62
msgid "Modules that query/return general information (and not ``ansible_facts``) should be named ``_info``. General information is non-host specific information, for example information on online/cloud services (you can access different accounts for the same online service from the same host), or information on VMs and containers accessible from the machine, or information on individual files or programs."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:65
msgid "Info and facts modules, are just like any other Ansible Module, with a few minor requirements:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:67
msgid "They MUST be named ``<something>_info`` or ``<something>_facts``, where <something> is singular."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:68
msgid "Info ``*_info`` modules MUST return in the form of the :ref:`result dictionary<common_return_values>` so other modules can access them."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:69
msgid "Fact ``*_facts`` modules MUST return in the ``ansible_facts`` field of the :ref:`result dictionary<common_return_values>` so other modules can access them."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:70
msgid "They MUST support :ref:`check_mode <check_mode_dry>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:71
msgid "They MUST NOT make any changes to the system."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:72
msgid "They MUST document the :ref:`return fields<return_block>` and :ref:`examples<examples_block>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:74
msgid "To create an info module:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:76
msgid "Navigate to the correct directory for your new module: ``$ cd lib/ansible/modules/``. If you are developing module using collection, ``$ cd plugins/modules/`` inside your collection development tree."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:77
msgid "Create your new module file: ``$ touch my_test_info.py``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:78
msgid "Paste the content below into your new info module file. It includes the :ref:`required Ansible format and documentation <developing_modules_documenting>`, a simple :ref:`argument spec for declaring the module options <argument_spec>`, and some example code."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:79
msgid "Modify and extend the code to do what you want your new info module to do. See the :ref:`programming tips <developing_modules_best_practices>` and :ref:`Python 3 compatibility <developing_python_3>` pages for pointers on writing clean and concise module code."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:84
msgid "Use the same process to create a facts module."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:90
msgid "Creating a module"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:92
msgid "To create a module:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:94
msgid "Navigate to the correct directory for your new module: ``$ cd lib/ansible/modules/``. If you are developing a module in a :ref:`collection <developing_collections>`, ``$ cd plugins/modules/`` inside your collection development tree."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:95
msgid "Create your new module file: ``$ touch my_test.py``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:96
msgid "Paste the content below into your new module file. It includes the :ref:`required Ansible format and documentation <developing_modules_documenting>`, a simple :ref:`argument spec for declaring the module options <argument_spec>`, and some example code."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:97
msgid "Modify and extend the code to do what you want your new module to do. See the :ref:`programming tips <developing_modules_best_practices>` and :ref:`Python 3 compatibility <developing_python_3>` pages for pointers on writing clean and concise module code."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:103
msgid "Verifying your module code"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:105
msgid "After you modify the sample code above to do what you want, you can try out your module. Our :ref:`debugging tips <debugging_modules>` will help if you run into bugs as you verify your module code."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:110
msgid "Verifying your module code locally"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:112
msgid "If your module does not need to target a remote host, you can quickly and easily exercise your code locally like this:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:114
msgid "Create an arguments file, a basic JSON config file that passes parameters to your module so that you can run it. Name the arguments file ``/tmp/args.json`` and add the following content:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:125
msgid "If you are using a virtual environment (which is highly recommended for development) activate it: ``$ . venv/bin/activate``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:127
msgid "Set up the environment for development: ``$ . hacking/env-setup``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:128
msgid "Run your test module locally and directly: ``$ python -m ansible.modules.my_test /tmp/args.json``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:131
msgid "This should return output like this:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:139
msgid "Verifying your module code in a playbook"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:141
msgid "The next step in verifying your new module is to consume it with an Ansible playbook."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:143
msgid "Create a playbook in any directory: ``$ touch testmod.yml``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:144
#: ../../rst/dev_guide/developing_modules_general_windows.rst:521
msgid "Add the following to the new playbook file::"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:158
msgid "Run the playbook and analyze the output: ``$ ansible-playbook ./testmod.yml``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:161
msgid "Testing your newly-created module"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:163
msgid "The following two examples will get you started with testing your module code. Please review our :ref:`testing <developing_testing>` section for more detailed information, including instructions for :ref:`testing module documentation <testing_module_documentation>`, adding :ref:`integration tests <testing_integration>`, and more."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:167
#: ../../rst/dev_guide/testing_integration.rst:20
msgid "Every new module and plugin should have integration tests, even if the tests cannot be run on Ansible CI infrastructure. In this case, the tests should be marked with the ``unsupported`` alias in `aliases file <https://docs.ansible.com/ansible/latest/dev_guide/testing/sanity/integration-aliases.html>`_."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:171
msgid "Performing sanity tests"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:173
msgid "You can run through Ansible's sanity checks in a container:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:175
msgid "``$ ansible-test sanity -v --docker --python 2.7 MODULE_NAME``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:178
msgid "Note that this example requires Docker to be installed and running. If you'd rather not use a container for this, you can choose to use ``--venv`` instead of ``--docker``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:181
msgid "Adding unit tests"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:183
msgid "You can add unit tests for your module in ``./test/units/modules``. You must first set up your testing environment. In this example, we're using Python 3.5."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:185
msgid "Install the requirements (outside of your virtual environment): ``$ pip3 install -r ./test/lib/ansible_test/_data/requirements/units.txt``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:186
msgid "Run ``. hacking/env-setup``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:187
msgid "To run all tests do the following: ``$ ansible-test units --python 3.5``. If you are using a CI environment, these tests will run automatically."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:189
msgid "Ansible uses pytest for unit testing."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:191
msgid "To run pytest against a single test module, you can run the following command. Ensure that you are providing the correct path of the test module:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:193
msgid "``$ pytest -r a --cov=. --cov-report=html --fulltrace --color yes test/units/modules/.../test/my_test.py``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:197
msgid "Contributing back to Ansible"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:199
msgid "If you would like to contribute to ``ansible-base`` by adding a new feature or fixing a bug, `create a fork <https://help.github.com/articles/fork-a-repo/>`_ of the ansible/ansible repository and develop against a new feature branch using the ``devel`` branch as a starting point. When you you have a good working code change, you can submit a pull request to the Ansible repository by selecting your feature branch as a source and the Ansible devel branch as a target."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:201
msgid "If you want to contribute a module to an :ref:`Ansible collection <contributing_maintained_collections>`, review our :ref:`submission checklist <developing_modules_checklist>`, :ref:`programming tips <developing_modules_best_practices>`, and :ref:`strategy for maintaining Python 2 and Python 3 compatibility <developing_python_3>`, as well as information about :ref:`testing <developing_testing>` before you open a pull request."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:203
msgid "The :ref:`Community Guide <ansible_community_guide>` covers how to open a pull request and what happens next."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:207
msgid "Communication and development support"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:209
msgid "Join the IRC channel ``#ansible-devel`` on freenode for discussions surrounding Ansible development."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:212
#: ../../rst/dev_guide/developing_modules_general_windows.rst:695
msgid "For questions and discussions pertaining to using the Ansible product, use the ``#ansible`` channel."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:215
msgid "For more specific IRC channels look at :ref:`Community Guide, Communicating <communication_irc>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:218
msgid "Credit"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general.rst:220
msgid "Thank you to Thomas Stringer (`@trstringer <https://github.com/trstringer>`_) for contributing source material for this topic."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:5
msgid "Developing Cisco ACI modules"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:6
msgid "This is a brief walk-through of how to create new Cisco ACI modules for Ansible."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:8
msgid "For more information about Cisco ACI, look at the :ref:`Cisco ACI user guide <aci_guide>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:10
#: ../../rst/dev_guide/developing_modules_general_windows.rst:13
msgid "What's covered in this section:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:20
#: ../../rst/dev_guide/testing_units_modules.rst:14
msgid "Introduction"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:21
msgid "The `cisco.aci collection <https://galaxy.ansible.com/cisco/aci>`_ already includes a large number of Cisco ACI modules, however the ACI object model is huge and covering all possible functionality would easily cover more than 1500 individual modules."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:23
msgid "If you need specific functionality, you have 2 options:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:25
msgid "Learn the ACI object model and use the low-level APIC REST API using the :ref:`aci_rest <aci_rest_module>` module"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:26
msgid "Write your own dedicated modules, which is actually quite easy"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:30
msgid "`ACI Fundamentals: ACI Policy Model <https://www.cisco.com/c/en/us/td/docs/switches/datacenter/aci/apic/sw/1-x/aci-fundamentals/b_ACI-Fundamentals/b_ACI-Fundamentals_chapter_010001.html>`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:31
msgid "A good introduction to the ACI object model."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:32
msgid "`APIC Management Information Model reference <https://developer.cisco.com/docs/apic-mim-ref/>`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:33
msgid "Complete reference of the APIC object model."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:34
msgid "`APIC REST API Configuration Guide <https://www.cisco.com/c/en/us/td/docs/switches/datacenter/aci/apic/sw/2-x/rest_cfg/2_1_x/b_Cisco_APIC_REST_API_Configuration_Guide.html>`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:35
msgid "Detailed guide on how the APIC REST API is designed and used, incl. many examples."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:38
msgid "So let's look at how a typical ACI module is built up."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:44
msgid "ACI module structure"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:47
msgid "Importing objects from Python libraries"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:48
msgid "The following imports are standard across ACI modules:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:57
msgid "Defining the argument spec"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:58
msgid "The first line adds the standard connection parameters to the module. After that, the next section will update the ``argument_spec`` dictionary with module-specific parameters. The module-specific parameters should include:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:60
msgid "the object_id (usually the name)"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:61
msgid "the configurable properties of the object"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:62
msgid "the parent object IDs (all parents up to the root)"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:63
msgid "only child classes that are a 1-to-1 relationship (1-to-many/many-to-many require their own module to properly manage)"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:64
msgid "the state"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:66
msgid "``state: absent`` to ensure object does not exist"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:67
msgid "``state: present`` to ensure the object and configs exist; this is also the default"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:68
msgid "``state: query`` to retrieve information about objects in the class"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:86
msgid "Do not provide default values for configuration arguments. Default values could cause unintended changes to the object."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:89
msgid "Using the AnsibleModule object"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:90
msgid "The following section creates an AnsibleModule instance. The module should support check-mode, so we pass the ``argument_spec`` and  ``supports_check_mode`` arguments. Since these modules support querying the APIC for all objects of the module's class, the object/parent IDs should only be required if ``state: absent`` or ``state: present``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:105
msgid "Mapping variable definition"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:106
msgid "Once the AnsibleModule object has been initiated, the necessary parameter values should be extracted from ``params`` and any data validation should be done. Usually the only params that need to be extracted are those related to the ACI object configuration and its child configuration. If you have integer objects that you would like to validate, then the validation should be done here, and the ``ACIModule.payload()`` method will handle the string conversion."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:122
msgid "Using the ACIModule object"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:123
msgid "The ACIModule class handles most of the logic for the ACI modules. The ACIModule extends functionality to the AnsibleModule object, so the module instance must be passed into the class instantiation."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:129
msgid "The ACIModule has six main methods that are used by the modules:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:131
msgid "construct_url"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:132
msgid "get_existing"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:133
msgid "payload"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:134
msgid "get_diff"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:135
msgid "post_config"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:136
msgid "delete_config"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:138
msgid "The first two methods are used regardless of what value is passed to the ``state`` parameter."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:141
msgid "Constructing URLs"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:142
msgid "The ``construct_url()`` method is used to dynamically build the appropriate URL to interact with the object, and the appropriate filter string that should be appended to the URL to filter the results."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:144
msgid "When the ``state`` is not ``query``, the URL is the base URL to access the APIC plus the distinguished name to access the object. The filter string will restrict the returned data to just the configuration data."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:145
msgid "When ``state`` is ``query``, the URL and filter string used depends on what parameters are passed to the object. This method handles the complexity so that it is easier to add new modules and so that all modules are consistent in what type of data is returned."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:147
msgid "Our design goal is to take all ID parameters that have values, and return the most specific data possible. If you do not supply any ID parameters to the task, then all objects of the class will be returned. If your task does consist of ID parameters sed, then the data for the specific object is returned. If a partial set of ID parameters are passed, then the module will use the IDs that are passed to build the URL and filter strings appropriately."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:149
msgid "The ``construct_url()`` method takes 2 required arguments:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:151
msgid "**self** - passed automatically with the class instance"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:152
msgid "**root_class** - A dictionary consisting of ``aci_class``, ``aci_rn``, ``target_filter``, and ``module_object`` keys"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:154
msgid "**aci_class**: The name of the class used by the APIC, for example ``fvTenant``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:156
msgid "**aci_rn**: The relative name of the object, for example ``tn-ACME``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:158
msgid "**target_filter**: A dictionary with key-value pairs that make up the query string for selecting a subset of entries, for example ``{'name': 'ACME'}``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:160
msgid "**module_object**: The particular object for this class, for example ``ACME``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:162
#: ../../rst/dev_guide/developing_program_flow_modules.rst:597
#: ../../rst/dev_guide/developing_program_flow_modules.rst:636
#: ../../rst/dev_guide/developing_program_flow_modules.rst:650
#: ../../rst/dev_guide/developing_program_flow_modules.rst:750
#: ../../rst/dev_guide/developing_program_flow_modules.rst:767
#: ../../rst/dev_guide/developing_program_flow_modules.rst:781
#: ../../rst/dev_guide/developing_program_flow_modules.rst:808
#: ../../rst/dev_guide/developing_program_flow_modules.rst:825
#: ../../rst/dev_guide/testing_units_modules.rst:90
#: ../../rst/dev_guide/testing_units_modules.rst:109
msgid "Example:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:175
msgid "Some modules, like ``aci_tenant``, are the root class and so they would not need to pass any additional arguments to the method."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:177
msgid "The ``construct_url()`` method takes 4 optional arguments, the first three imitate the root class as described above, but are for child objects:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:179
msgid "subclass_1 - A dictionary consisting of ``aci_class``, ``aci_rn``, ``target_filter``, and ``module_object`` keys"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:181
msgid "Example: Application Profile Class (AP)"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:183
msgid "subclass_2 - A dictionary consisting of ``aci_class``, ``aci_rn``, ``target_filter``, and ``module_object`` keys"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:185
msgid "Example: End Point Group (EPG)"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:187
msgid "subclass_3 - A dictionary consisting of ``aci_class``, ``aci_rn``, ``target_filter``, and ``module_object`` keys"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:189
msgid "Example: Binding a Contract to an EPG"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:191
msgid "child_classes - The list of APIC names for the child classes supported by the modules."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:193
msgid "This is a list, even if it is a list of one"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:194
msgid "These are the unfriendly names used by the APIC"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:195
msgid "These are used to limit the returned child_classes when possible"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:196
msgid "Example: ``child_classes=['fvRsBDSubnetToProfile', 'fvRsNdPfxPol']``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:198
msgid "Sometimes the APIC will require special characters ([, ], and -) or will use object metadata in the name (\"vlanns\" for VLAN pools); the module should handle adding special characters or joining of multiple parameters in order to keep expected inputs simple."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:201
msgid "Getting the existing configuration"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:202
msgid "Once the URL and filter string have been built, the module is ready to retrieve the existing configuration for the object:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:204
msgid "``state: present`` retrieves the configuration to use as a comparison against what was entered in the task. All values that are different than the existing values will be updated."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:205
msgid "``state: absent`` uses the existing configuration to see if the item exists and needs to be deleted."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:206
msgid "``state: query`` uses this to perform the query for the task and report back the existing data."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:214
msgid "When state is present"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:215
msgid "When ``state: present``, the module needs to perform a diff against the existing configuration and the task entries. If any value needs to be updated, then the module will make a POST request with only the items that need to be updated. Some modules have children that are in a 1-to-1 relationship with another object; for these cases, the module can be used to manage the child objects."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:218
msgid "Building the ACI payload"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:219
msgid "The ``aci.payload()`` method is used to build a dictionary of the proposed object configuration. All parameters that were not provided a value in the task will be removed from the dictionary (both for the object and its children). Any parameter that does have a value will be converted to a string and added to the final dictionary object that will be used for comparison against the existing configuration."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:221
msgid "The ``aci.payload()`` method takes two required arguments and 1 optional argument, depending on if the module manages child objects."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:223
msgid "``aci_class`` is the APIC name for the object's class, for example ``aci_class='fvBD'``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:224
msgid "``class_config`` is the appropriate dictionary to be used as the payload for the POST request"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:226
msgid "The keys should match the names used by the APIC."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:227
msgid "The values should be the corresponding value in ``module.params``; these are the variables defined above"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:229
msgid "``child_configs`` is optional, and is a list of child config dictionaries."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:231
msgid "The child configs include the full child object dictionary, not just the attributes configuration portion."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:232
msgid "The configuration portion is built the same way as the object."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:256
msgid "Performing the request"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:257
msgid "The ``get_diff()`` method is used to perform the diff, and takes only one required argument, ``aci_class``. Example: ``aci.get_diff(aci_class='fvBD')``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:260
msgid "The ``post_config()`` method is used to make the POST request to the APIC if needed. This method doesn't take any arguments and handles check mode. Example: ``aci.post_config()``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:265
msgid "Example code"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:295
msgid "When state is absent"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:296
msgid "If the task sets the state to absent, then the ``delete_config()`` method is all that is needed. This method does not take any arguments, and handles check mode."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:305
msgid "Exiting the module"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:306
msgid "To have the module exit, call the ACIModule method ``exit_json()``. This method automatically takes care of returning the common return values for you."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:319
msgid "Testing ACI library functions"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:320
msgid "You can test your ``construct_url()`` and ``payload()`` arguments without accessing APIC hardware by using the following python script:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:379
msgid "This will result in:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:393
msgid "Testing for sanity checks"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:394
msgid "You can run from your fork something like:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:402
#: ../../rst/dev_guide/testing.rst:33
msgid ":ref:`testing_sanity`"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:403
msgid "Information on how to build sanity tests."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:407
msgid "Testing ACI integration tests"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:408
#: ../../rst/dev_guide/developing_modules_general_aci.rst:438
msgid "You can run this:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:414
msgid "You may need to add ``--python 2.7`` or ``--python 3.6`` in order to use the correct python version for performing tests."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:416
msgid "You may want to edit the used inventory at *test/integration/inventory.networking* and add something like:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:432
#: ../../rst/dev_guide/testing.rst:37
msgid ":ref:`testing_integration`"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:433
msgid "Information on how to build integration tests."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_aci.rst:437
msgid "Testing for test coverage"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:5
msgid "Windows module development walkthrough"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:7
msgid "In this section, we will walk through developing, testing, and debugging an Ansible Windows module."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:10
msgid "Because Windows modules are written in Powershell and need to be run on a Windows host, this guide differs from the usual development walkthrough guide."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:20
msgid "Windows environment setup"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:22
msgid "Unlike Python module development which can be run on the host that runs Ansible, Windows modules need to be written and tested for Windows hosts. While evaluation editions of Windows can be downloaded from Microsoft, these images are usually not ready to be used by Ansible without further modification. The easiest way to set up a Windows host so that it is ready to by used by Ansible is to set up a virtual machine using Vagrant. Vagrant can be used to download existing OS images called *boxes* that are then deployed to a hypervisor like VirtualBox. These boxes can either be created and stored offline or they can be downloaded from a central repository called Vagrant Cloud."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:33
#, python-format
msgid "This guide will use the Vagrant boxes created by the `packer-windoze <https://github.com/jborean93/packer-windoze>`_ repository which have also been uploaded to `Vagrant Cloud <https://app.vagrantup.com/boxes/search?utf8=%E2%9C%93&sort=downloads&provider=&q=jborean93>`_. To find out more info on how these images are created, please go to the GitHub repo and look at the ``README`` file."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:38
msgid "Before you can get started, the following programs must be installed (please consult the Vagrant and VirtualBox documentation for installation instructions):"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:41
msgid "Vagrant"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:42
msgid "VirtualBox"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:45
msgid "Create a Windows server in a VM"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:47
msgid "To create a single Windows Server 2016 instance, run the following:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:54
msgid "This will download the Vagrant box from Vagrant Cloud and add it to the local boxes on your host and then start up that instance in VirtualBox. When starting for the first time, the Windows VM will run through the sysprep process and then create a HTTP and HTTPS WinRM listener automatically. Vagrant will finish its process once the listeners are online, after which the VM can be used by Ansible."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:61
msgid "Create an Ansible inventory"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:63
msgid "The following Ansible inventory file can be used to connect to the newly created Windows VM:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:79
msgid "The port ``55986`` is automatically forwarded by Vagrant to the Windows host that was created, if this conflicts with an existing local port then Vagrant will automatically use another one at random and display show that in the output."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:84
msgid "The OS that is created is based on the image set. The following images can be used:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:87
msgid "`jborean93/WindowsServer2008-x86 <https://app.vagrantup.com/jborean93/boxes/WindowsServer2008-x86>`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:88
msgid "`jborean93/WindowsServer2008-x64 <https://app.vagrantup.com/jborean93/boxes/WindowsServer2008-x64>`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:89
msgid "`jborean93/WindowsServer2008R2 <https://app.vagrantup.com/jborean93/boxes/WindowsServer2008R2>`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:90
msgid "`jborean93/WindowsServer2012 <https://app.vagrantup.com/jborean93/boxes/WindowsServer2012>`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:91
msgid "`jborean93/WindowsServer2012R2 <https://app.vagrantup.com/jborean93/boxes/WindowsServer2012R2>`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:92
msgid "`jborean93/WindowsServer2016 <https://app.vagrantup.com/jborean93/boxes/WindowsServer2016>`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:94
msgid "When the host is online, it can accessible by RDP on ``127.0.0.1:3389`` but the port may differ depending if there was a conflict. To get rid of the host, run ``vagrant destroy --force`` and Vagrant will automatically remove the VM and any other files associated with that VM."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:99
msgid "While this is useful when testing modules on a single Windows instance, these host won't work without modification with domain based modules. The Vagrantfile at `ansible-windows <https://github.com/jborean93/ansible-windows/tree/master/vagrant>`_ can be used to create a test domain environment to be used in Ansible. This repo contains three files which are used by both Ansible and Vagrant to create multiple Windows hosts in a domain environment. These files are:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:106
msgid "``Vagrantfile``: The Vagrant file that reads the inventory setup of ``inventory.yml`` and provisions the hosts that are required"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:107
msgid "``inventory.yml``: Contains the hosts that are required and other connection information such as IP addresses and forwarded ports"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:108
msgid "``main.yml``: Ansible playbook called by Vagrant to provision the domain controller and join the child hosts to the domain"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:110
msgid "By default, these files will create the following environment:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:112
msgid "A single domain controller running on Windows Server 2016"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:113
msgid "Five child hosts for each major Windows Server version joined to that domain"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:114
msgid "A domain with the DNS name ``domain.local``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:115
msgid "A local administrator account on each host with the username ``vagrant`` and password ``vagrant``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:116
msgid "A domain admin account ``vagrant-domain@domain.local`` with the password ``VagrantPass1``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:118
msgid "The domain name and accounts can be modified by changing the variables ``domain_*`` in the ``inventory.yml`` file if it is required. The inventory file can also be modified to provision more or less servers by changing the hosts that are defined under the ``domain_children`` key. The host variable ``ansible_host`` is the private IP that will be assigned to the VirtualBox host only network adapter while ``vagrant_box`` is the box that will be used to create the VM."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:127
msgid "Provisioning the environment"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:129
msgid "To provision the environment as is, run the following:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:137
msgid "Vagrant provisions each host sequentially so this can take some time to complete. If any errors occur during the Ansible phase of setting up the domain, run ``vagrant provision`` to rerun just that step."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:141
msgid "Unlike setting up a single Windows instance with Vagrant, these hosts can also be accessed using the IP address directly as well as through the forwarded ports. It is easier to access it over the host only network adapter as the normal protocol ports are used, for example RDP is still over ``3389``. In cases where the host cannot be resolved using the host only network IP, the following protocols can be access over ``127.0.0.1`` using these forwarded ports:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:148
msgid "``RDP``: 295xx"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:149
msgid "``SSH``: 296xx"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:150
msgid "``WinRM HTTP``: 297xx"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:151
msgid "``WinRM HTTPS``: 298xx"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:152
msgid "``SMB``: 299xx"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:154
msgid "Replace ``xx`` with the entry number in the inventory file where the domain controller started with ``00`` and is incremented from there. For example, in the default ``inventory.yml`` file, WinRM over HTTPS for ``SERVER2012R2`` is forwarded over port ``29804`` as it's the fourth entry in ``domain_children``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:159
msgid "While an SSH server is available on all Windows hosts but Server 2008 (non R2), it is not a support connection for Ansible managing Windows hosts and should not be used with Ansible."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:164
msgid "Windows new module development"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:166
msgid "When creating a new module there are a few things to keep in mind:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:168
msgid "Module code is in Powershell (.ps1) files while the documentation is contained in Python (.py) files of the same name"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:169
msgid "Avoid using ``Write-Host/Debug/Verbose/Error`` in the module and add what needs to be returned to the ``$module.Result`` variable"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:170
msgid "To fail a module, call ``$module.FailJson(\"failure message here\")``, an Exception or ErrorRecord can be set to the second argument for a more descriptive error message"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:171
msgid "You can pass in the exception or ErrorRecord as a second argument to ``FailJson(\"failure\", $_)`` to get a more detailed output"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:172
msgid "Most new modules require check mode and integration tests before they are merged into the main Ansible codebase"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:173
msgid "Avoid using try/catch statements over a large code block, rather use them for individual calls so the error message can be more descriptive"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:174
msgid "Try and catch specific exceptions when using try/catch statements"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:175
msgid "Avoid using PSCustomObjects unless necessary"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:176
msgid "Look for common functions in ``./lib/ansible/module_utils/powershell/`` and use the code there instead of duplicating work. These can be imported by adding the line ``#Requires -Module *`` where * is the filename to import, and will be automatically included with the module code sent to the Windows target when run via Ansible"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:177
msgid "As well as PowerShell module utils, C# module utils are stored in ``./lib/ansible/module_utils/csharp/`` and are automatically imported in a module execution if the line ``#AnsibleRequires -CSharpUtil *`` is present"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:178
msgid "C# and PowerShell module utils achieve the same goal but C# allows a developer to implement low level tasks, such as calling the Win32 API, and can be faster in some cases"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:179
msgid "Ensure the code runs under Powershell v3 and higher on Windows Server 2008 and higher; if higher minimum Powershell or OS versions are required, ensure the documentation reflects this clearly"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:180
msgid "Ansible runs modules under strictmode version 2.0. Be sure to test with that enabled by putting ``Set-StrictMode -Version 2.0`` at the top of your dev script"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:181
msgid "Favor native Powershell cmdlets over executable calls if possible"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:182
msgid "Use the full cmdlet name instead of aliases, for example ``Remove-Item`` over ``rm``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:183
msgid "Use named parameters with cmdlets, for example ``Remove-Item -Path C:\\temp`` over ``Remove-Item C:\\temp``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:185
msgid "A very basic Powershell module `win_environment <https://github.com/ansible-collections/ansible.windows/blob/master/plugins/modules/win_environment.ps1>`_ incorporates best practices for Powershell modules. It demonstrates how to implement check-mode and diff-support, and also shows a warning to the user when a specific condition is met."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:187
msgid "A slightly more advanced module is `win_uri <https://github.com/ansible-collections/ansible.windows/blob/master/plugins/modules/win_uri.ps1>`_ which additionally shows how to use different parameter types (bool, str, int, list, dict, path) and a selection of choices for parameters, how to fail a module and how to handle exceptions."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:189
msgid "As part of the new ``AnsibleModule`` wrapper, the input parameters are defined and validated based on an argument spec. The following options can be set at the root level of the argument spec:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:192
msgid "``mutually_exclusive``: A list of lists, where the inner list contains module options that cannot be set together"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:193
msgid "``no_log``: Stops the module from emitting any logs to the Windows Event log"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:194
msgid "``options``: A dictionary where the key is the module option and the value is the spec for that option"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:195
msgid "``required_by``: A dictionary where the option(s) specified by the value must be set if the option specified by the key is also set"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:199
msgid "``required_if``: A list of lists where the inner list contains 3 or 4 elements;"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:197
msgid "The first element is the module option to check the value against"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:198
msgid "The second element is the value of the option specified by the first element, if matched then the required if check is run"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:199
msgid "The third element is a list of required module options when the above is matched"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:200
msgid "An optional fourth element is a boolean that states whether all module options in the third elements are required (default: ``$false``) or only one (``$true``)"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:201
msgid "``required_one_of``: A list of lists, where the inner list contains module options where at least one must be set"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:202
msgid "``required_together``: A list of lists, where the inner list contains module options that must be set together"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:203
msgid "``supports_check_mode``: Whether the module supports check mode, by default this is ``$false``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:205
msgid "The actual input options for a module are set within the ``options`` value as a dictionary. The keys of this dictionary are the module option names while the values are the spec of that module option. Each spec can have the following options set:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:209
msgid "``aliases``: A list of aliases for the module option"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:210
msgid "``choices``: A list of valid values for the module option, if ``type=list`` then each list value is validated against the choices and not the list itself"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:211
msgid "``default``: The default value for the module option if not set"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:212
msgid "``deprecated_aliases``: A list of hashtables that define aliases that are deprecated and the versions they will be removed in. Each entry must contain the keys ``name`` and ``collection_name`` with either ``version`` or ``date``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:213
msgid "``elements``: When ``type=list``, this sets the type of each list value, the values are the same as ``type``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:214
msgid "``no_log``: Will sanitise the input value before being returned in the ``module_invocation`` return value"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:215
msgid "``removed_in_version``: States when a deprecated module option is to be removed, a warning is displayed to the end user if set"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:216
msgid "``removed_at_date``: States the date (YYYY-MM-DD) when a deprecated module option will be removed, a warning is displayed to the end user if set"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:217
msgid "``removed_from_collection``: States from which collection the deprecated module option will be removed; must be specified if one of ``removed_in_version`` and ``removed_at_date`` is specified"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:218
msgid "``required``: Will fail when the module option is not set"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:229
msgid "``type``: The type of the module option, if not set then it defaults to ``str``. The valid types are;"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:220
msgid "``bool``: A boolean value"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:221
msgid "``dict``: A dictionary value, if the input is a JSON or key=value string then it is converted to dictionary"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:222
msgid "``float``: A float or `Single <https://docs.microsoft.com/en-us/dotnet/api/system.single?view=netframework-4.7.2>`_ value"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:223
msgid "``int``: An Int32 value"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:224
msgid "``json``: A string where the value is converted to a JSON string if the input is a dictionary"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:225
msgid "``list``: A list of values, ``elements=<type>`` can convert the individual list value types if set. If ``elements=dict`` then ``options`` is defined, the values will be validated against the argument spec. When the input is a string then the string is split by ``,`` and any whitespace is trimmed"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:226
msgid "``path``: A string where values likes ``%TEMP%`` are expanded based on environment values. If the input value starts with ``\\\\?\\`` then no expansion is run"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:227
msgid "``raw``: No conversions occur on the value passed in by Ansible"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:228
msgid "``sid``: Will convert Windows security identifier values or Windows account names to a `SecurityIdentifier <https://docs.microsoft.com/en-us/dotnet/api/system.security.principal.securityidentifier?view=netframework-4.7.2>`_ value"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:229
msgid "``str``: The value is converted to a string"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:231
msgid "When ``type=dict``, or ``type=list`` and ``elements=dict``, the following keys can also be set for that module option:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:233
msgid "``apply_defaults``: The value is based on the ``options`` spec defaults for that key if ``True`` and null if ``False``. Only valid when the module option is not defined by the user and ``type=dict``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:234
msgid "``mutually_exclusive``: Same as the root level ``mutually_exclusive`` but validated against the values in the sub dict"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:235
msgid "``options``: Same as the root level ``options`` but contains the valid options for the sub option"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:236
msgid "``required_if``: Same as the root level ``required_if`` but validated against the values in the sub dict"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:237
msgid "``required_by``: Same as the root level ``required_by`` but validated against the values in the sub dict"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:238
msgid "``required_together``: Same as the root level ``required_together`` but validated against the values in the sub dict"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:239
msgid "``required_one_of``: Same as the root level ``required_one_of`` but validated against the values in the sub dict"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:241
msgid "A module type can also be a delegate function that converts the value to whatever is required by the module option. For example the following snippet shows how to create a custom type that creates a ``UInt64`` value:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:251
msgid "When in doubt, look at some of the other core modules and see how things have been implemented there."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:254
msgid "Sometimes there are multiple ways that Windows offers to complete a task; this is the order to favor when writing modules:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:257
msgid "Native Powershell cmdlets like ``Remove-Item -Path C:\\temp -Recurse``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:258
msgid ".NET classes like ``[System.IO.Path]::GetRandomFileName()``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:259
msgid "WMI objects through the ``New-CimInstance`` cmdlet"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:260
msgid "COM objects through ``New-Object -ComObject`` cmdlet"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:261
msgid "Calls to native executables like ``Secedit.exe``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:263
msgid "PowerShell modules support a small subset of the ``#Requires`` options built into PowerShell as well as some Ansible-specific requirements specified by ``#AnsibleRequires``. These statements can be placed at any point in the script, but are most commonly near the top. They are used to make it easier to state the requirements of the module without writing any of the checks. Each ``requires`` statement must be on its own line, but there can be multiple requires statements in one script."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:271
msgid "These are the checks that can be used within Ansible modules:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:273
msgid "``#Requires -Module Ansible.ModuleUtils.<module_util>``: Added in Ansible 2.4, specifies a module_util to load in for the module execution."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:274
msgid "``#Requires -Version x.y``: Added in Ansible 2.5, specifies the version of PowerShell that is required by the module. The module will fail if this requirement is not met."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:275
msgid "``#AnsibleRequires -OSVersion x.y``: Added in Ansible 2.5, specifies the OS build version that is required by the module and will fail if this requirement is not met. The actual OS version is derived from ``[Environment]::OSVersion.Version``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:276
msgid "``#AnsibleRequires -Become``: Added in Ansible 2.5, forces the exec runner to run the module with ``become``, which is primarily used to bypass WinRM restrictions. If ``ansible_become_user`` is not specified then the ``SYSTEM`` account is used instead."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:277
msgid "``#AnsibleRequires -CSharpUtil Ansible.<module_util>``: Added in Ansible 2.8, specifies a C# module_util to load in for the module execution."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:279
msgid "C# module utils can reference other C# utils by adding the line ``using Ansible.<module_util>;`` to the top of the script with all the other using statements."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:285
msgid "Windows module utilities"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:287
msgid "Like Python modules, PowerShell modules also provide a number of module utilities that provide helper functions within PowerShell. These module_utils can be imported by adding the following line to a PowerShell module:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:295
msgid "This will import the module_util at ``./lib/ansible/module_utils/powershell/Ansible.ModuleUtils.Legacy.psm1`` and enable calling all of its functions. As of Ansible 2.8, Windows module utils can also be written in C# and stored at ``lib/ansible/module_utils/csharp``. These module_utils can be imported by adding the following line to a PowerShell module:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:305
msgid "This will import the module_util at ``./lib/ansible/module_utils/csharp/Ansible.Basic.cs`` and automatically load the types in the executing process. C# module utils can reference each other and be loaded together by adding the following line to the using statements at the top of the util:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:314
msgid "There are special comments that can be set in a C# file for controlling the compilation parameters. The following comments can be added to the script;"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:317
msgid "``//AssemblyReference -Name <assembly dll> [-CLR [Core|Framework]]``: The assembly DLL to reference during compilation, the optional ``-CLR`` flag can also be used to state whether to reference when running under .NET Core, Framework, or both (if omitted)"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:318
msgid "``//NoWarn -Name <error id> [-CLR [Core|Framework]]``: A compiler warning ID to ignore when compiling the code, the optional ``-CLR`` works the same as above. A list of warnings can be found at `Compiler errors <https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/index>`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:320
msgid "As well as this, the following pre-processor symbols are defined;"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:322
msgid "``CORECLR``: This symbol is present when PowerShell is running through .NET Core"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:323
msgid "``WINDOWS``: This symbol is present when PowerShell is running on Windows"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:324
msgid "``UNIX``: This symbol is present when PowerShell is running on Unix"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:326
msgid "A combination of these flags help to make a module util interoperable on both .NET Framework and .NET Core, here is an example of them in action:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:347
msgid "The following is a list of module_utils that are packaged with Ansible and a general description of what they do:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:350
msgid "ArgvParser: Utility used to convert a list of arguments to an escaped string compliant with the Windows argument parsing rules."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:351
msgid "CamelConversion: Utility used to convert camelCase strings/lists/dicts to snake_case."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:352
msgid "CommandUtil: Utility used to execute a Windows process and return the stdout/stderr and rc as separate objects."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:353
msgid "FileUtil: Utility that expands on the ``Get-ChildItem`` and ``Test-Path`` to work with special files like ``C:\\pagefile.sys``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:354
msgid "Legacy: General definitions and helper utilities for Ansible module."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:355
msgid "LinkUtil: Utility to create, remove, and get information about symbolic links, junction points and hard inks."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:356
msgid "SID: Utilities used to convert a user or group to a Windows SID and vice versa."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:358
msgid "For more details on any specific module utility and their requirements, please see the `Ansible module utilities source code <https://github.com/ansible/ansible/tree/devel/lib/ansible/module_utils/powershell>`_."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:361
msgid "PowerShell module utilities can be stored outside of the standard Ansible distribution for use with custom modules. Custom module_utils are placed in a folder called ``module_utils`` located in the root folder of the playbook or role directory."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:366
msgid "C# module utilities can also be stored outside of the standard Ansible distribution for use with custom modules. Like PowerShell utils, these are stored in a folder called ``module_utils`` and the filename must end in the extension ``.cs``, start with ``Ansible.``  and be named after the namespace defined in the util."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:370
msgid "The below example is a role structure that contains two PowerShell custom module_utils called ``Ansible.ModuleUtils.ModuleUtil1``, ``Ansible.ModuleUtils.ModuleUtil2``, and a C# util containing the namespace ``Ansible.CustomUtil``::"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:385
msgid "Each PowerShell module_util must contain at least one function that has been exported with ``Export-ModuleMember`` at the end of the file. For example"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:394
msgid "Exposing shared module options"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:396
msgid "PowerShell module utils can easily expose common module options that a module can use when building its argument spec. This allows common features to be stored and maintained in one location and have those features used by multiple modules with minimal effort. Any new features or bugfixes added to one of these utils are then automatically used by the various modules that call that util."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:401
msgid "An example of this would be to have a module util that handles authentication and communication against an API This util can be used by multiple modules to expose a common set of module options like the API endpoint, username, password, timeout, cert validation, and so on without having to add those options to each module spec."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:405
msgid "The standard convention for a module util that has a shared argument spec would have"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:408
msgid "A ``Get-<namespace.name.util name>Spec`` function that outputs the common spec for a module"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:408
msgid "It is highly recommended to make this function name be unique to the module to avoid any conflicts with other utils that can be loaded"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:409
msgid "The format of the output spec is a Hashtable in the same format as the ``$spec`` used for normal modules"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:410
msgid "A function that takes in an ``AnsibleModule`` object called under the ``-Module`` parameter which it can use to get the shared options"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:412
msgid "Because these options can be shared across various module it is highly recommended to keep the module option names and aliases in the shared spec as specific as they can be. For example do not have a util option called ``password``, rather you should prefix it with a unique name like ``acme_password``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:417
msgid "Failure to have a unique option name or alias can prevent the util being used by module that also use those names or aliases for its own options."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:420
msgid "The following is an example module util called ``ServiceAuth.psm1`` in a collection that implements a common way for modules to authentication with a service."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:476
msgid "For a module to take advantage of this common argument spec it can be set out like"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:503
msgid "Options defined in the module spec will always have precedence over a util spec. Any list values under the same key in a util spec will be appended to the module spec for that same key. Dictionary values will add any keys that are missing from the module spec and merge any values that are lists or dictionaries. This is similar to how the doc fragment plugins work when extending module documentation."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:508
msgid "To document these shared util options for a module, create a doc fragment plugin that documents the options implemented by the module util and extend the module docs for every module that implements the util to include that fragment in its docs."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:514
msgid "Windows playbook module testing"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:516
msgid "You can test a module with an Ansible playbook. For example:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:518
msgid "Create a playbook in any directory ``touch testmodule.yml``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:519
msgid "Create an inventory file in the same directory ``touch hosts``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:520
msgid "Populate the inventory file with the variables required to connect to a Windows host(s)."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:531
msgid "Run the playbook ``ansible-playbook -i hosts testmodule.yml``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:533
msgid "This can be useful for seeing how Ansible runs with the new module end to end. Other possible ways to test the module are shown below."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:539
msgid "Windows debugging"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:541
msgid "Debugging a module currently can only be done on a Windows host. This can be useful when developing a new module or implementing bug fixes. These are some steps that need to be followed to set this up:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:545
msgid "Copy the module script to the Windows server"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:546
msgid "Copy the folders ``./lib/ansible/module_utils/powershell`` and ``./lib/ansible/module_utils/csharp`` to the same directory as the script above"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:547
msgid "Add an extra ``#`` to the start of any ``#Requires -Module`` lines in the module code, this is only required for any lines starting with ``#Requires -Module``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:548
msgid "Add the following to the start of the module script that was copied to the server:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:580
msgid "You can add more args to ``$complex_args`` as required by the module or define the module options through a JSON file with the structure::"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:592
msgid "There are multiple IDEs that can be used to debug a Powershell script, two of the most popular ones are"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:595
msgid "`Powershell ISE`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:596
msgid "`Visual Studio Code`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:601
msgid "To be able to view the arguments as passed by Ansible to the module follow these steps."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:604
msgid "Prefix the Ansible command with :envvar:`ANSIBLE_KEEP_REMOTE_FILES=1<ANSIBLE_KEEP_REMOTE_FILES>` to specify that Ansible should keep the exec files on the server."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:605
msgid "Log onto the Windows server using the same user account that Ansible used to execute the module."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:606
msgid "Navigate to ``%TEMP%\\..``. It should contain a folder starting with ``ansible-tmp-``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:607
msgid "Inside this folder, open the PowerShell script for the module."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:608
msgid "In this script is a raw JSON script under ``$json_raw`` which contains the module arguments under ``module_args``. These args can be assigned manually to the ``$complex_args`` variable that is defined on your debug script or put in the ``args.json`` file."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:612
msgid "Windows unit testing"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:614
msgid "Currently there is no mechanism to run unit tests for Powershell modules under Ansible CI."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:618
msgid "Windows integration testing"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:620
msgid "Integration tests for Ansible modules are typically written as Ansible roles. These test roles are located in ``./test/integration/targets``. You must first set up your testing environment, and configure a test inventory for Ansible to connect to."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:624
msgid "In this example we will set up a test inventory to connect to two hosts and run the integration tests for win_stat:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:627
msgid "Run the command ``source ./hacking/env-setup`` to prepare environment."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:628
msgid "Create a copy of ``./test/integration/inventory.winrm.template`` and name it ``inventory.winrm``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:629
msgid "Fill in entries under ``[windows]`` and set the required variables that are needed to connect to the host."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:630
msgid ":ref:`Install the required Python modules <windows_winrm>` to support WinRM and a configured authentication method."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:631
msgid "To execute the integration tests, run ``ansible-test windows-integration win_stat``; you can replace ``win_stat`` with the role you want to test."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:633
msgid "This will execute all the tests currently defined for that role. You can set the verbosity level using the ``-v`` argument just as you would with ansible-playbook."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:637
msgid "When developing tests for a new module, it is recommended to test a scenario once in check mode and twice not in check mode. This ensures that check mode does not make any changes but reports a change, as well as that the second run is idempotent and does not report changes. For example:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:690
msgid "Windows communication and development support"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:692
msgid "Join the IRC channel ``#ansible-devel`` or ``#ansible-windows`` on freenode for discussions about Ansible development for Windows."
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:5
msgid "Creating a new collection"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:7
msgid "Starting with Ansible 2.10, related modules should be developed in a collection. The Ansible core team and community compiled these module development tips and tricks to help companies developing Ansible modules for their products and users developing Ansible modules for third-party products. See :ref:`developing_collections` for a more detailed description of the collections format and additional development guidelines."
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:15
msgid "Before you start coding"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:17
msgid "This list of prerequisites is designed to help ensure that you develop high-quality modules that work well with ansible-base and provide a seamless user experience."
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:19
msgid "Read though all the pages linked off :ref:`developing_modules_general`; paying particular focus to the :ref:`developing_modules_checklist`."
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:20
msgid "We encourage PEP 8 compliance. See :ref:`testing_pep8` for more information."
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:21
msgid "We encourage supporting :ref:`Python 2.6+ and Python 3.5+ <developing_python_3>`."
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:22
msgid "Look at Ansible Galaxy and review the naming conventions in your functional area (such as cloud, networking, databases)."
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:23
msgid "With great power comes great responsibility: Ansible collection maintainers have a duty to help keep content up to date and release collections they are responsible for regularly. As with all successful community projects, collection maintainers should keep a watchful eye for reported issues and contributions."
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:24
msgid "We strongly recommend unit and/or integration tests. Unit tests are especially valuable when external resources (such as cloud or network devices) are required. For more information see :ref:`developing_testing` and the `Testing Working Group <https://github.com/ansible/community/blob/master/meetings/README.md>`_."
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:28
msgid "Naming conventions"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:30
msgid "Fully Qualified Collection Names (FQCNs) for plugins and modules include three elements:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:32
msgid "the Galaxy namespace, which generally represents the company or group"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:33
msgid "the collection name, which generally represents the product or OS"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:37
msgid "the plugin or module name"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:35
msgid "always in lower case"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:36
msgid "words separated with an underscore (``_``) character"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:37
msgid "singular, rather than plural, for example, ``command`` not ``commands``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:39
msgid "For example, ``community.mongodb.mongodb_linux`` or ``cisco.meraki.meraki_device``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:41
msgid "It is convenient if the organization and repository names on GitHub (or elsewhere) match your namespace and collection names on Ansible Galaxy, but it is not required. The plugin names you select, however, are always the same in your code repository and in your collection artifact on Galaxy."
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:44
msgid "Speak to us"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:46
msgid "Circulating your ideas before coding helps you adopt good practices and avoid common mistakes. After reading the \"Before you start coding\" section you should have a reasonable idea of the structure of your modules. Write a list of your proposed plugin and/or module names, with a short description of what each one does. Circulate that list on IRC or a mailing list so the Ansible community can review your ideas for consistency and familiarity. Names and functionality that are consistent, predictable, and familiar make your collection easier to use."
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:49
msgid "Where to get support"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:51
msgid "Ansible has a thriving and knowledgeable community of module developers that is a great resource for getting your questions answered."
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:53
msgid "In the :ref:`ansible_community_guide` you can find how to:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:55
msgid "Subscribe to the Mailing Lists - We suggest \"Ansible Development List\" and \"Ansible Announce list\""
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:56
msgid "``#ansible-devel`` - We have found that IRC ``#ansible-devel`` on FreeNode's IRC network works best for developers so we can have an interactive dialogue."
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:57
msgid "IRC meetings - Join the various weekly IRC meetings `meeting schedule and agenda page <https://github.com/ansible/community/blob/master/meetings/README.md>`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:60
msgid "Required files"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:62
msgid "Your collection should include the following files to be usable:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:64
msgid "an ``__init__.py`` file - An empty file to initialize namespace and allow Python to import the files. *Required*"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:65
msgid "at least one plugin, for example, ``/plugins/modules/$your_first_module.py``. *Required*"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:66
msgid "if needed, one or more ``/plugins/doc_fragments/$topic.py`` files - Code documentation, such as details regarding common arguments. *Optional*"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:67
msgid "if needed, one or more ``/plugins/module_utils/$topic.py`` files - Code shared between more than one module, such as common arguments. *Optional*"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:69
msgid "When you have these files ready, review the :ref:`developing_modules_checklist` again. If you are creating a new collection, you are responsible for all procedures related to your repository, including setting rules for contributions, finding reviewers, and testing and maintaining the code in your collection."
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:71
msgid "If you need help or advice, consider join the ``#ansible-devel`` IRC channel (see how in the \"Where to get support\")."
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:74
msgid "New to git or GitHub"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:76
msgid "We realize this may be your first use of Git or GitHub. The following guides may be of use:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:78
msgid "`How to create a fork of ansible/ansible <https://help.github.com/articles/fork-a-repo/>`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:79
msgid "`How to sync (update) your fork <https://help.github.com/articles/syncing-a-fork/>`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_in_groups.rst:80
msgid "`How to create a Pull Request (PR) <https://help.github.com/articles/about-pull-requests/>`_"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:6
msgid "Developing plugins"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:11
msgid "Plugins augment Ansible's core functionality with logic and features that are accessible to all modules. Ansible collections include a number of handy plugins, and you can easily write your own. All plugins must:"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:13
msgid "be written in Python"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:14
msgid "raise errors"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:15
msgid "return strings in unicode"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:16
msgid "conform to Ansible's configuration and documentation standards"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:18
msgid "Once you've reviewed these general guidelines, you can skip to the particular type of plugin you want to develop."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:21
msgid "Writing plugins in Python"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:23
msgid "You must write your plugin in Python so it can be loaded by the ``PluginLoader`` and returned as a Python object that any module can use. Since your plugin will execute on the controller, you must write it in a :ref:`compatible version of Python <control_node_requirements>`."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:26
msgid "Raising errors"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:28
msgid "You should return errors encountered during plugin execution by raising ``AnsibleError()`` or a similar class with a message describing the error. When wrapping other exceptions into error messages, you should always use the ``to_native`` Ansible function to ensure proper string compatibility across Python versions:"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:39
msgid "Check the different `AnsibleError objects <https://github.com/ansible/ansible/blob/devel/lib/ansible/errors/__init__.py>`_ and see which one applies best to your situation."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:42
msgid "String encoding"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:44
msgid "You must convert any strings returned by your plugin into Python's unicode type. Converting to unicode ensures that these strings can run through Jinja2. To convert strings:"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:52
msgid "Plugin configuration & documentation standards"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:54
msgid "To define configurable options for your plugin, describe them in the ``DOCUMENTATION`` section of the python file. Callback and connection plugins have declared configuration requirements this way since Ansible version 2.4; most plugin types now do the same. This approach ensures that the documentation of your plugin's options will always be correct and up-to-date. To add a configurable option to your plugin, define it in this format:"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:71
msgid "To access the configuration settings in your plugin, use ``self.get_option(<option_name>)``. For most plugin types, the controller pre-populates the settings. If you need to populate settings explicitly, use a ``self.set_options()`` call."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:73
msgid "Plugins that support embedded documentation (see :ref:`ansible-doc` for the list) should include well-formed doc strings. If you inherit from a plugin, you must document the options it takes, either via a documentation fragment or as a copy. See :ref:`module_documenting` for more information on correct documentation. Thorough documentation is a good idea even if you're developing a plugin for local use."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:76
msgid "Developing particular plugin types"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:81
#: ../../rst/dev_guide/developing_program_flow_modules.rst:24
msgid "Action plugins"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:83
msgid "Action plugins let you integrate local processing and local data with module functionality."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:85
msgid "To create an action plugin, create a new class with the Base(ActionBase) class as the parent:"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:94
msgid "From there, execute the module using the ``_execute_module`` method to call the original module. After successful execution of the module, you can modify the module return data."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:104
msgid "For example, if you wanted to check the time difference between your Ansible controller and your target machine(s), you could write an action plugin to check the local time and compare it to the return data from Ansible's ``setup`` module:"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:141
msgid "This code checks the time on the controller, captures the date and time for the remote machine using the ``setup`` module, and calculates the difference between the captured time and the local time, returning the time delta in days, seconds and microseconds."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:144
msgid "For practical examples of action plugins, see the source code for the `action plugins included with Ansible Core <https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/action>`_"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:150
msgid "Cache plugins"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:152
msgid "Cache plugins store gathered facts and data retrieved by inventory plugins."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:154
msgid "Import cache plugins using the cache_loader so you can use ``self.set_options()`` and ``self.get_option(<option_name>)``. If you import a cache plugin directly in the code base, you can only access options via ``ansible.constants``, and you break the cache plugin's ability to be used by an inventory plugin."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:162
msgid "There are two base classes for cache plugins, ``BaseCacheModule`` for database-backed caches, and ``BaseCacheFileModule`` for file-backed caches."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:164
msgid "To create a cache plugin, start by creating a new ``CacheModule`` class with the appropriate base class. If you're creating a plugin using an ``__init__`` method you should initialize the base class with any provided args and kwargs to be compatible with inventory plugin cache options. The base class calls ``self.set_options(direct=kwargs)``. After the base class ``__init__`` method is called ``self.get_option(<option_name>)`` should be used to access cache options."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:166
msgid "New cache plugins should take the options ``_uri``, ``_prefix``, and ``_timeout`` to be consistent with existing cache plugins."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:179
msgid "If you use the ``BaseCacheModule``, you must implement the methods ``get``, ``contains``, ``keys``, ``set``, ``delete``, ``flush``, and ``copy``. The ``contains`` method should return a boolean that indicates if the key exists and has not expired. Unlike file-based caches, the ``get`` method does not raise a KeyError if the cache has expired."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:181
msgid "If you use the ``BaseFileCacheModule``, you must implement ``_load`` and ``_dump`` methods that will be called from the base class methods ``get`` and ``set``."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:183
msgid "If your cache plugin stores JSON, use ``AnsibleJSONEncoder`` in the ``_dump`` or ``set`` method  and ``AnsibleJSONDecoder`` in the ``_load`` or ``get`` method."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:185
msgid "For example cache plugins, see the source code for the `cache plugins included with Ansible Core <https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/cache>`_."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:190
msgid "Callback plugins"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:192
msgid "Callback plugins add new behaviors to Ansible when responding to events. By default, callback plugins control most of the output you see when running the command line programs."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:194
msgid "To create a callback plugin, create a new class with the Base(Callbacks) class as the parent:"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:203
msgid "From there, override the specific methods from the CallbackBase that you want to provide a callback for. For plugins intended for use with Ansible version 2.0 and later, you should only override methods that start with ``v2``. For a complete list of methods that you can override, please see ``__init__.py`` in the `lib/ansible/plugins/callback <https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/callback>`_ directory."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:208
msgid "The following is a modified example of how Ansible's timer plugin is implemented, but with an extra option so you can see how configuration works in Ansible version 2.4 and later:"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:276
msgid "Note that the ``CALLBACK_VERSION`` and ``CALLBACK_NAME`` definitions are required for properly functioning plugins for Ansible version 2.0 and later. ``CALLBACK_TYPE`` is mostly needed to distinguish 'stdout' plugins from the rest, since you can only load one plugin that writes to stdout."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:278
msgid "For example callback plugins, see the source code for the `callback plugins included with Ansible Core <https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/callback>`_"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:280
msgid "New in ansible-base 2.11, callback plugins are notified (via ``v2_playbook_on_task_start``) of :ref:`meta<meta_module>` tasks. By default, only explicit ``meta`` tasks that users list in their plays are sent to callbacks."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:282
msgid "There are also some tasks which are generated internally and implicitly at various points in execution. Callback plugins can opt-in to receiving these implicit tasks as well, by setting ``self.wants_implicit_tasks = True``. Any ``Task`` object received by a callback hook will have an ``.implicit`` attribute, which can be consulted to determine whether the ``Task`` originated from within Ansible, or explicitly by the user."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:287
msgid "Connection plugins"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:289
msgid "Connection plugins allow Ansible to connect to the target hosts so it can execute tasks on them. Ansible ships with many connection plugins, but only one can be used per host at a time. The most commonly used connection plugins are the ``paramiko`` SSH, native ssh (just called ``ssh``), and ``local`` connection types.  All of these can be used in playbooks and with ``/usr/bin/ansible`` to connect to remote machines."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:291
msgid "Ansible version 2.1 introduced the ``smart`` connection plugin. The ``smart`` connection type allows Ansible to automatically select either the ``paramiko`` or ``openssh`` connection plugin based on system capabilities, or the ``ssh`` connection plugin if OpenSSH supports ControlPersist."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:293
msgid "To create a new connection plugin (for example, to support SNMP, Message bus, or other transports), copy the format of one of the existing connection plugins and drop it into ``connection`` directory on your :ref:`local plugin path <local_plugins>`."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:295
msgid "Connection plugins can support common options (such as the ``--timeout`` flag) by defining an entry in the documentation for the attribute name (in this case ``timeout``). If the common option has a non-null default, the plugin should define the same default since a different default would be ignored."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:297
msgid "For example connection plugins, see the source code for the `connection plugins included with Ansible Core <https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/connection>`_."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:302
msgid "Filter plugins"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:304
msgid "Filter plugins manipulate data. They are a feature of Jinja2 and are also available in Jinja2 templates used by the ``template`` module. As with all plugins, they can be easily extended, but instead of having a file for each one you can have several per file. Most of the filter plugins shipped with Ansible reside in a ``core.py``."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:306
msgid "Filter plugins do not use the standard configuration and documentation system described above."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:308
msgid "For example filter plugins, see the source code for the `filter plugins included with Ansible Core <https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/filter>`_."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:315
msgid "Inventory plugins parse inventory sources and form an in-memory representation of the inventory. Inventory plugins were added in Ansible version 2.4."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:317
msgid "You can see the details for inventory plugins in the :ref:`developing_inventory` page."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:322
msgid "Lookup plugins"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:324
msgid "Lookup plugins pull in data from external data stores. Lookup plugins can be used within playbooks both for looping --- playbook language constructs like ``with_fileglob`` and ``with_items`` are implemented via lookup plugins --- and to return values into a variable or parameter."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:326
msgid "Lookup plugins are very flexible, allowing you to retrieve and return any type of data. When writing lookup plugins, always return data of a consistent type that can be easily consumed in a playbook. Avoid parameters that change the returned data type. If there is a need to return a single value sometimes and a complex dictionary other times, write two different lookup plugins."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:328
msgid "Ansible includes many :ref:`filters <playbooks_filters>` which can be used to manipulate the data returned by a lookup plugin. Sometimes it makes sense to do the filtering inside the lookup plugin, other times it is better to return results that can be filtered in the playbook. Keep in mind how the data will be referenced when determining the appropriate level of filtering to be done inside the lookup plugin."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:330
msgid "Here's a simple lookup plugin implementation --- this lookup returns the contents of a text file as a variable:"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:392
msgid "The following is an example of how this lookup is called::"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:404
msgid "For example lookup plugins, see the source code for the `lookup plugins included with Ansible Core <https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/lookup>`_."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:406
msgid "For more usage examples of lookup plugins, see :ref:`Using Lookups<playbooks_lookups>`."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:411
msgid "Test plugins"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:413
msgid "Test plugins verify data. They are a feature of Jinja2 and are also available in Jinja2 templates used by the ``template`` module. As with all plugins, they can be easily extended, but instead of having a file for each one you can have several per file. Most of the test plugins shipped with Ansible reside in a ``core.py``. These are specially useful in conjunction with some filter plugins like ``map`` and ``select``; they are also available for conditional directives like ``when:``."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:415
msgid "Test plugins do not use the standard configuration and documentation system described above."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:417
msgid "For example test plugins, see the source code for the `test plugins included with Ansible Core <https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/test>`_."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:422
msgid "Vars plugins"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:424
msgid "Vars plugins inject additional variable data into Ansible runs that did not come from an inventory source, playbook, or command line. Playbook constructs like 'host_vars' and 'group_vars' work using vars plugins."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:426
msgid "Vars plugins were partially implemented in Ansible 2.0 and rewritten to be fully implemented starting with Ansible 2.4. Vars plugins are unsupported by collections."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:428
msgid "Older plugins used a ``run`` method as their main body/work:"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:436
msgid "Ansible 2.0 did not pass passwords to older plugins, so vaults were unavailable. Most of the work now  happens in the ``get_vars`` method which is called from the VariableManager when needed."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:444
msgid "The parameters are:"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:446
msgid "loader: Ansible's DataLoader. The DataLoader can read files, auto-load JSON/YAML and decrypt vaulted data, and cache read files."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:447
msgid "path: this is 'directory data' for every inventory source and the current play's playbook directory, so they can search for data in reference to them. ``get_vars`` will be called at least once per available path."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:448
msgid "entities: these are host or group names that are pertinent to the variables needed. The plugin will get called once for hosts and again for groups."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:450
msgid "This ``get_vars`` method just needs to return a dictionary structure with the variables."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:452
msgid "Since Ansible version 2.4, vars plugins only execute as needed when preparing to execute a task. This avoids the costly 'always execute' behavior that occurred during inventory construction in older versions of Ansible. Since Ansible version 2.10, vars plugin execution can be toggled by the user to run when preparing to execute a task or after importing an inventory source."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:454
msgid "Since Ansible 2.10, vars plugins can require whitelisting. Vars plugins that don't require whitelisting will run by default. To require whitelisting for your plugin set the class variable ``REQUIRES_WHITELIST``:"
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:461
msgid "Include the ``vars_plugin_staging`` documentation fragment to allow users to determine when vars plugins run."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:481
msgid "Also since Ansible 2.10, vars plugins can reside in collections. Vars plugins in collections must require whitelisting to be functional."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:483
msgid "For example vars plugins, see the source code for the `vars plugins included with Ansible Core <https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/vars>`_."
msgstr ""

#: ../../rst/dev_guide/developing_plugins.rst:493
msgid "Learn about how to develop dynamic inventory sources"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:6
msgid "Ansible module architecture"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:8
msgid "If you are working on the ``ansible-base`` code, writing an Ansible module, or developing an action plugin, you may need to understand how Ansible's program flow executes. If you are just using Ansible Modules in playbooks, you can skip this section."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:16
msgid "Types of modules"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:18
msgid "Ansible supports several different types of modules in its code base. Some of these are for backwards compatibility and others are to enable flexibility."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:26
msgid "Action plugins look like modules to anyone writing a playbook. Usage documentation for most action plugins lives inside a module of the same name. Some action plugins do all the work, with the module providing only documentation. Some action plugins execute modules. The ``normal`` action plugin executes modules that don't have special action plugins. Action plugins always execute on the controller."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:28
msgid "Some action plugins do all their work on the controller. For example, the :ref:`debug <debug_module>` action plugin (which prints text for the user to see) and the :ref:`assert <assert_module>` action plugin (which tests whether values in a playbook satisfy certain criteria) execute entirely on the controller."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:33
msgid "Most action plugins set up some values on the controller, then invoke an actual module on the managed node that does something with these values. For example, the :ref:`template <template_module>` action plugin takes values from the user to construct a file in a temporary location on the controller using variables from the playbook environment. It then transfers the temporary file to a temporary file on the remote system. After that, it invokes the :ref:`copy module <copy_module>` which operates on the remote system to move the file into its final location, sets file permissions, and so on."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:44
msgid "New-style modules"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:46
msgid "All of the modules that ship with Ansible fall into this category. While you can write modules in any language, all official modules (shipped with Ansible) use either Python or PowerShell."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:48
msgid "New-style modules have the arguments to the module embedded inside of them in some manner. Old-style modules must copy a separate file over to the managed node, which is less efficient as it requires two over-the-wire connections instead of only one."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:56
msgid "Python"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:58
msgid "New-style Python modules use the :ref:`Ansiballz` framework for constructing modules. These modules use imports from :code:`ansible.module_utils` to pull in boilerplate module code, such as argument parsing, formatting of return values as :term:`JSON`, and various file operations."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:63
msgid "In Ansible, up to version 2.0.x, the official Python modules used the :ref:`module_replacer` framework.  For module authors, :ref:`Ansiballz` is largely a superset of :ref:`module_replacer` functionality, so you usually do not need to understand the differences between them."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:71
msgid "PowerShell"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:73
msgid "New-style PowerShell modules use the :ref:`module_replacer` framework for constructing modules. These modules get a library of PowerShell code embedded in them before being sent to the managed node."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:80
msgid "JSONARGS modules"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:82
msgid "These modules are scripts that include the string ``<<INCLUDE_ANSIBLE_MODULE_JSON_ARGS>>`` in their body. This string is replaced with the JSON-formatted argument string. These modules typically set a variable to that value like this:"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:90
msgid "Which is expanded as:"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:96
msgid "Ansible outputs a :term:`JSON` string with bare quotes. Double quotes are used to quote string values, double quotes inside of string values are backslash escaped, and single quotes may appear unescaped inside of a string value. To use JSONARGS, your scripting language must have a way to handle this type of string. The example uses Python's triple quoted strings to do this. Other scripting languages may have a similar quote character that won't be confused by any quotes in the JSON or it may allow you to define your own start-of-quote and end-of-quote characters. If the language doesn't give you any of these then you'll need to write a :ref:`non-native JSON module <flow_want_json_modules>` or :ref:`Old-style module <flow_old_style_modules>` instead."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:108
msgid "These modules typically parse the contents of ``json_arguments`` using a JSON library and then use them as native variables throughout the code."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:114
msgid "Non-native want JSON modules"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:116
msgid "If a module has the string ``WANT_JSON`` in it anywhere, Ansible treats it as a non-native module that accepts a filename as its only command line parameter. The filename is for a temporary file containing a :term:`JSON` string containing the module's parameters. The module needs to open the file, read and parse the parameters, operate on the data, and print its return data as a JSON encoded dictionary to stdout before exiting."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:123
msgid "These types of modules are self-contained entities. As of Ansible 2.1, Ansible only modifies them to change a shebang line if present."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:126
msgid "Examples of Non-native modules written in ruby are in the `Ansible for Rubyists <https://github.com/ansible/ansible-for-rubyists>`_ repository."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:132
msgid "Binary modules"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:134
msgid "From Ansible 2.2 onwards, modules may also be small binary programs. Ansible doesn't perform any magic to make these portable to different systems so they may be specific to the system on which they were compiled or require other binary runtime dependencies. Despite these drawbacks, you may have to compile a custom module against a specific binary library if that's the only way to get access to certain resources."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:141
msgid "Binary modules take their arguments and return data to Ansible in the same way as :ref:`want JSON modules <flow_want_json_modules>`."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:144
msgid "One example of a `binary module <https://github.com/ansible/ansible/blob/devel/test/integration/targets/binary_modules/library/helloworld.go>`_ written in go."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:151
msgid "Old-style modules"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:153
msgid "Old-style modules are similar to :ref:`want JSON modules <flow_want_json_modules>`, except that the file that they take contains ``key=value`` pairs for their parameters instead of :term:`JSON`. Ansible decides that a module is old-style when it doesn't have any of the markers that would show that it is one of the other types."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:162
msgid "How modules are executed"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:164
msgid "When a user uses :program:`ansible` or :program:`ansible-playbook`, they specify a task to execute. The task is usually the name of a module along with several parameters to be passed to the module. Ansible takes these values and processes them in various ways before they are finally executed on the remote machine."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:173
msgid "Executor/task_executor"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:175
msgid "The TaskExecutor receives the module name and parameters that were parsed from the :term:`playbook <playbooks>` (or from the command line in the case of :command:`/usr/bin/ansible`). It uses the name to decide whether it's looking at a module or an :ref:`Action Plugin <flow_action_plugins>`. If it's a module, it loads the :ref:`Normal Action Plugin <flow_normal_action_plugin>` and passes the name, variables, and other information about the task and play to that Action Plugin for further processing."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:186
msgid "The ``normal`` action plugin"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:188
msgid "The ``normal`` action plugin executes the module on the remote host. It is the primary coordinator of much of the work to actually execute the module on the managed machine."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:192
msgid "It loads the appropriate connection plugin for the task, which then transfers or executes as needed to create a connection to that host."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:194
msgid "It adds any internal Ansible properties to the module's parameters (for instance, the ones that pass along ``no_log`` to the module)."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:196
msgid "It works with other plugins (connection, shell, become, other action plugins) to create any temporary files on the remote machine and cleans up afterwards."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:199
msgid "It pushes the module and module parameters to the remote host, although the :ref:`module_common <flow_executor_module_common>` code described in the next section decides which format those will take."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:203
msgid "It handles any special cases regarding modules (for instance, async execution, or complications around Windows modules that must have the same names as Python modules, so that internal calling of modules from other Action Plugins work.)"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:206
msgid "Much of this functionality comes from the `BaseAction` class, which lives in :file:`plugins/action/__init__.py`. It uses the ``Connection`` and ``Shell`` objects to do its work."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:211
msgid "When :term:`tasks <tasks>` are run with the ``async:`` parameter, Ansible uses the ``async`` Action Plugin instead of the ``normal`` Action Plugin to invoke it. That program flow is currently not documented. Read the source for information on how that works."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:219
msgid "Executor/module_common.py"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:221
msgid "Code in :file:`executor/module_common.py` assembles the module to be shipped to the managed node. The module is first read in, then examined to determine its type:"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:225
msgid ":ref:`PowerShell <flow_powershell_modules>` and :ref:`JSON-args modules <flow_jsonargs_modules>` are passed through :ref:`Module Replacer <module_replacer>`."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:226
msgid "New-style :ref:`Python modules <flow_python_modules>` are assembled by :ref:`Ansiballz`."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:227
msgid ":ref:`Non-native-want-JSON <flow_want_json_modules>`, :ref:`Binary modules <flow_binary_modules>`, and :ref:`Old-Style modules <flow_old_style_modules>` aren't touched by either of these and pass through unchanged."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:229
msgid "After the assembling step, one final modification is made to all modules that have a shebang line. Ansible checks whether the interpreter in the shebang line has a specific path configured via an ``ansible_$X_interpreter`` inventory variable. If it does, Ansible substitutes that path for the interpreter path given in the module. After this, Ansible returns the complete module data and the module type to the :ref:`Normal Action <flow_normal_action_plugin>` which continues execution of the module."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:239
msgid "Assembler frameworks"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:241
msgid "Ansible supports two assembler frameworks: Ansiballz and the older Module Replacer."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:246
msgid "Module Replacer framework"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:248
msgid "The Module Replacer framework is the original framework implementing new-style modules, and is still used for PowerShell modules. It is essentially a preprocessor (like the C Preprocessor for those familiar with that programming language). It does straight substitutions of specific substring patterns in the module file. There are two types of substitutions:"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:254
msgid "Replacements that only happen in the module file. These are public replacement strings that modules can utilize to get helpful boilerplate or access to arguments."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:258
msgid ":code:`from ansible.module_utils.MOD_LIB_NAME import *` is replaced with the contents of the :file:`ansible/module_utils/MOD_LIB_NAME.py`  These should only be used with :ref:`new-style Python modules <flow_python_modules>`."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:261
msgid ":code:`#<<INCLUDE_ANSIBLE_MODULE_COMMON>>` is equivalent to :code:`from ansible.module_utils.basic import *` and should also only apply to new-style Python modules."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:264
msgid ":code:`# POWERSHELL_COMMON` substitutes the contents of :file:`ansible/module_utils/powershell.ps1`. It should only be used with :ref:`new-style Powershell modules <flow_powershell_modules>`."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:268
msgid "Replacements that are used by ``ansible.module_utils`` code. These are internal replacement patterns. They may be used internally, in the above public replacements, but shouldn't be used directly by modules."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:270
msgid ":code:`\"<<ANSIBLE_VERSION>>\"` is substituted with the Ansible version.  In :ref:`new-style Python modules <flow_python_modules>` under the :ref:`Ansiballz` framework the proper way is to instead instantiate an `AnsibleModule` and then access the version from :attr:``AnsibleModule.ansible_version``."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:275
msgid ":code:`\"<<INCLUDE_ANSIBLE_MODULE_COMPLEX_ARGS>>\"` is substituted with a string which is the Python ``repr`` of the :term:`JSON` encoded module parameters. Using ``repr`` on the JSON string makes it safe to embed in a Python file. In new-style Python modules under the Ansiballz framework this is better accessed by instantiating an `AnsibleModule` and then using :attr:`AnsibleModule.params`."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:281
msgid ":code:`<<SELINUX_SPECIAL_FILESYSTEMS>>` substitutes a string which is a comma separated list of file systems which have a file system dependent security context in SELinux. In new-style Python modules, if you really need this you should instantiate an `AnsibleModule` and then use :attr:`AnsibleModule._selinux_special_fs`. The variable has also changed from a comma separated string of file system names to an actual python list of filesystem names."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:288
msgid ":code:`<<INCLUDE_ANSIBLE_MODULE_JSON_ARGS>>` substitutes the module parameters as a JSON string. Care must be taken to properly quote the string as JSON data may contain quotes. This pattern is not substituted in new-style Python modules as they can get the module parameters another way."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:293
msgid "The string :code:`syslog.LOG_USER` is replaced wherever it occurs with the ``syslog_facility`` which was named in :file:`ansible.cfg` or any ``ansible_syslog_facility`` inventory variable that applies to this host.  In new-style Python modules this has changed slightly. If you really need to access it, you should instantiate an `AnsibleModule` and then use :attr:`AnsibleModule._syslog_facility` to access it. It is no longer the actual syslog facility and is now the name of the syslog facility. See the :ref:`documentation on internal arguments <flow_internal_arguments>` for details."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:306
msgid "Ansiballz framework"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:308
msgid "The Ansiballz framework was adopted in Ansible 2.1 and is used for all new-style Python modules. Unlike the Module Replacer, Ansiballz uses real Python imports of things in :file:`ansible/module_utils` instead of merely preprocessing the module. It does this by constructing a zipfile -- which includes the module file, files in :file:`ansible/module_utils` that are imported by the module, and some boilerplate to pass in the module's parameters. The zipfile is then Base64 encoded and wrapped in a small Python script which decodes the Base64 encoding and places the zipfile into a temp directory on the managed node. It then extracts just the Ansible module script from the zip file and places that in the temporary directory as well. Then it sets the PYTHONPATH to find Python modules inside of the zip file and imports the Ansible module as the special name, ``__main__``. Importing it as ``__main__`` causes Python to think that it is executing a script rather than simply importing a module. This lets Ansible run both the wrapper script and the module code in a single copy of Python on the remote machine."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:322
msgid "Ansible wraps the zipfile in the Python script for two reasons:"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:324
msgid "for compatibility with Python 2.6 which has a less functional version of Python's ``-m`` command line switch."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:327
msgid "so that pipelining will function properly. Pipelining needs to pipe the Python module into the Python interpreter on the remote node. Python understands scripts on stdin but does not understand zip files."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:331
msgid "Prior to Ansible 2.7, the module was executed via a second Python interpreter instead of being executed inside of the same process. This change was made once Python-2.4 support was dropped to speed up module execution."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:335
msgid "In Ansiballz, any imports of Python modules from the :py:mod:`ansible.module_utils` package trigger inclusion of that Python file into the zipfile. Instances of :code:`#<<INCLUDE_ANSIBLE_MODULE_COMMON>>` in the module are turned into :code:`from ansible.module_utils.basic import *` and :file:`ansible/module-utils/basic.py` is then included in the zipfile. Files that are included from :file:`module_utils` are themselves scanned for imports of other Python modules from :file:`module_utils` to be included in the zipfile as well."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:345
msgid "At present, the Ansiballz Framework cannot determine whether an import should be included if it is a relative import. Always use an absolute import that has :py:mod:`ansible.module_utils` in it to allow Ansiballz to determine that the file should be included."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:354
msgid "Passing args"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:356
msgid "Arguments are passed differently by the two frameworks:"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:358
msgid "In :ref:`module_replacer`, module arguments are turned into a JSON-ified string and substituted into the combined module file."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:359
msgid "In :ref:`Ansiballz`, the JSON-ified string is part of the script which wraps the zipfile. Just before the wrapper script imports the Ansible module as ``__main__``, it monkey-patches the private, ``_ANSIBLE_ARGS`` variable in ``basic.py`` with the variable values. When a :class:`ansible.module_utils.basic.AnsibleModule` is instantiated, it parses this string and places the args into :attr:`AnsibleModule.params` where it can be accessed by the module's other code."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:362
msgid "If you are writing modules, remember that the way we pass arguments is an internal implementation detail: it has changed in the past and will change again as soon as changes to the common module_utils code allow Ansible modules to forgo using :class:`ansible.module_utils.basic.AnsibleModule`. Do not rely on the internal global ``_ANSIBLE_ARGS`` variable."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:365
msgid "Very dynamic custom modules which need to parse arguments before they instantiate an ``AnsibleModule`` may use ``_load_params`` to retrieve those parameters. Although ``_load_params`` may change in breaking ways if necessary to support changes in the code, it is likely to be more stable than either the way we pass parameters or the internal global variable."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:371
msgid "Prior to Ansible 2.7, the Ansible module was invoked in a second Python interpreter and the arguments were then passed to the script over the script's stdin."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:378
msgid "Internal arguments"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:380
msgid "Both :ref:`module_replacer` and :ref:`Ansiballz` send additional arguments to the module beyond those which the user specified in the playbook. These additional arguments are internal parameters that help implement global Ansible features. Modules often do not need to know about these explicitly as the features are implemented in :py:mod:`ansible.module_utils.basic` but certain features need support from the module so it's good to know about them."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:387
msgid "The internal arguments listed here are global. If you need to add a local internal argument to a custom module, create an action plugin for that specific module - see ``_original_basename`` in the `copy action plugin <https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/action/copy.py#L329>`_ for an example."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:390
msgid "_ansible_no_log"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:392
msgid "Boolean. Set to True whenever a parameter in a task or play specifies ``no_log``. Any module that calls :py:meth:`AnsibleModule.log` handles this automatically. If a module implements its own logging then it needs to check this value. To access in a module, instantiate an ``AnsibleModule`` and then check the value of :attr:`AnsibleModule.no_log`."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:397
msgid "``no_log`` specified in a module's argument_spec is handled by a different mechanism."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:400
msgid "_ansible_debug"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:402
msgid "Boolean. Turns more verbose logging on or off and turns on logging of external commands that the module executes. If a module uses :py:meth:`AnsibleModule.debug` rather than :py:meth:`AnsibleModule.log` then the messages are only logged if ``_ansible_debug`` is set to ``True``. To set, add ``debug: True`` to :file:`ansible.cfg` or set the environment variable :envvar:`ANSIBLE_DEBUG`. To access in a module, instantiate an ``AnsibleModule`` and access :attr:`AnsibleModule._debug`."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:411
msgid "_ansible_diff"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:413
msgid "Boolean. If a module supports it, tells the module to show a unified diff of changes to be made to templated files. To set, pass the ``--diff`` command line option. To access in a module, instantiate an `AnsibleModule` and access :attr:`AnsibleModule._diff`."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:419
msgid "_ansible_verbosity"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:421
msgid "Unused. This value could be used for finer grained control over logging."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:424
msgid "_ansible_selinux_special_fs"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:426
msgid "List. Names of filesystems which should have a special SELinux context. They are used by the `AnsibleModule` methods which operate on files (changing attributes, moving, and copying). To set, add a comma separated string of filesystem names in :file:`ansible.cfg`::"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:434
msgid "Most modules can use the built-in ``AnsibleModule`` methods to manipulate files. To access in a module that needs to know about these special context filesystems, instantiate an ``AnsibleModule`` and examine the list in :attr:`AnsibleModule._selinux_special_fs`."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:438
msgid "This replaces :attr:`ansible.module_utils.basic.SELINUX_SPECIAL_FS` from :ref:`module_replacer`. In module replacer it was a comma separated string of filesystem names. Under Ansiballz it's an actual list."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:445
msgid "_ansible_syslog_facility"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:447
msgid "This parameter controls which syslog facility Ansible module logs to. To set, change the ``syslog_facility`` value in :file:`ansible.cfg`. Most modules should just use :meth:`AnsibleModule.log` which will then make use of this. If a module has to use this on its own, it should instantiate an `AnsibleModule` and then retrieve the name of the syslog facility from :attr:`AnsibleModule._syslog_facility`. The Ansiballz code is less hacky than the old :ref:`module_replacer` code:"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:468
msgid "_ansible_version"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:470
msgid "This parameter passes the version of Ansible that runs the module. To access it, a module should instantiate an `AnsibleModule` and then retrieve it from :attr:`AnsibleModule.ansible_version`. This replaces :attr:`ansible.module_utils.basic.ANSIBLE_VERSION` from :ref:`module_replacer`."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:482
msgid "Module return values & Unsafe strings"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:484
msgid "At the end of a module's execution, it formats the data that it wants to return as a JSON string and prints the string to its stdout. The normal action plugin receives the JSON string, parses it into a Python dictionary, and returns it to the executor."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:486
msgid "If Ansible templated every string return value, it would be vulnerable to an attack from users with access to managed nodes. If an unscrupulous user disguised malicious code as Ansible return value strings, and if those strings were then templated on the controller, Ansible could execute arbitrary code. To prevent this scenario, Ansible marks all strings inside returned data as ``Unsafe``, emitting any Jinja2 templates in the strings verbatim, not expanded by Jinja2."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:488
msgid "Strings returned by invoking a module through ``ActionPlugin._execute_module()`` are automatically marked as ``Unsafe`` by the normal action plugin. If another action plugin retrieves information from a module through some other means, it must mark its return data as ``Unsafe`` on its own."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:490
msgid "In case a poorly-coded action plugin fails to mark its results as \"Unsafe,\" Ansible audits the results again when they are returned to the executor, marking all strings as ``Unsafe``. The normal action plugin protects itself and any other code that it calls with the result data as a parameter. The check inside the executor protects the output of all other action plugins, ensuring that subsequent tasks run by Ansible will not template anything from those results either."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:496
msgid "Special considerations"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:501
msgid "Pipelining"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:503
msgid "Ansible can transfer a module to a remote machine in one of two ways:"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:505
msgid "it can write out the module to a temporary file on the remote host and then use a second connection to the remote host to execute it with the interpreter that the module needs"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:508
msgid "or it can use what's known as pipelining to execute the module by piping it into the remote interpreter's stdin."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:511
msgid "Pipelining only works with modules written in Python at this time because Ansible only knows that Python supports this mode of operation. Supporting pipelining means that whatever format the module payload takes before being sent over the wire must be executable by Python via stdin."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:519
msgid "Why pass args over stdin?"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:521
msgid "Passing arguments via stdin was chosen for the following reasons:"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:523
msgid "When combined with :ref:`ANSIBLE_PIPELINING`, this keeps the module's arguments from temporarily being saved onto disk on the remote machine. This makes it harder (but not impossible) for a malicious user on the remote machine to steal any sensitive information that may be present in the arguments."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:527
msgid "Command line arguments would be insecure as most systems allow unprivileged users to read the full commandline of a process."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:529
msgid "Environment variables are usually more secure than the commandline but some systems limit the total size of the environment. This could lead to truncation of the parameters if we hit that limit."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:537
msgid "AnsibleModule"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:542
msgid "Argument spec"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:544
msgid "The ``argument_spec`` provided to ``AnsibleModule`` defines the supported arguments for a module, as well as their type, defaults and more."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:546
msgid "Example ``argument_spec``:"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:562
msgid "This section will discuss the behavioral attributes for arguments:"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:566
msgid "``type`` allows you to define the type of the value accepted for the argument. The default value for ``type`` is ``str``. Possible values are:"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:568
msgid "str"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:569
msgid "list"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:570
msgid "dict"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:571
msgid "bool"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:572
msgid "int"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:573
msgid "float"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:574
msgid "path"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:575
msgid "raw"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:576
msgid "jsonarg"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:577
#: ../../rst/dev_guide/style_guide/index.rst:150
msgid "json"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:578
msgid "bytes"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:579
msgid "bits"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:581
msgid "The ``raw`` type, performs no type validation or type casting, and maintains the type of the passed value."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:585
msgid "``elements`` works in combination with ``type`` when ``type='list'``. ``elements`` can then be defined as ``elements='int'`` or any other type, indicating that each element of the specified list should be of that type."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:589
msgid "The ``default`` option allows sets a default value for the argument for the scenario when the argument is not provided to the module. When not specified, the default value is ``None``."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "fallback"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:593
msgid "``fallback`` accepts a ``tuple`` where the first argument is a callable (function) that will be used to perform the lookup, based on the second argument. The second argument is a list of values to be accepted by the callable."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:595
msgid "The most common callable used is ``env_fallback`` which will allow an argument to optionally use an environment variable when the argument is not supplied."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:605
msgid "``choices`` accepts a list of choices that the argument will accept. The types of ``choices`` should match the ``type``."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:609
msgid "``required`` accepts a boolean, either ``True`` or ``False`` that indicates that the argument is required. When not specified, ``required`` defaults to ``False``. This should not be used in combination with ``default``."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "no_log"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:613
msgid "``no_log`` accepts a boolean, either ``True`` or ``False``, that indicates explicitly whether or not the argument value should be masked in logs and output."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:616
msgid "In the absence of ``no_log``, if the parameter name appears to indicate that the argument value is a password or passphrase (such as \"admin_password\"), a warning will be shown and the value will be masked in logs but **not** output. To disable the warning and masking for parameters that do not contain sensitive information, set ``no_log`` to ``False``."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:620
msgid "``aliases`` accepts a list of alternative argument names for the argument, such as the case where the argument is ``name`` but the module accepts ``aliases=['pkg']`` to allow ``pkg`` to be interchangeably with ``name``"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:624
msgid "``options`` implements the ability to create a sub-argument_spec, where the sub options of the top level argument are also validated using the attributes discussed in this section. The example at the top of this section demonstrates use of ``options``. ``type`` or ``elements`` should be ``dict`` is this case."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "apply_defaults"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:628
msgid "``apply_defaults`` works alongside ``options`` and allows the ``default`` of the sub-options to be applied even when the top-level argument is not supplied."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:630
msgid "In the example of the ``argument_spec`` at the top of this section, it would allow ``module.params['top_level']['second_level']`` to be defined, even if the user does not provide ``top_level`` when calling the module."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "removed_in_version"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:634
msgid "``removed_in_version`` indicates which version of ansible-base or a collection a deprecated argument will be removed in. Mutually exclusive with ``removed_at_date``, and must be used with ``removed_from_collection``."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "removed_at_date"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:648
msgid "``removed_at_date`` indicates that a deprecated argument will be removed in a minor ansible-base release or major collection release after this date. Mutually exclusive with ``removed_in_version``, and must be used with ``removed_from_collection``."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "removed_from_collection"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:662
msgid "Specifies which collection (or ansible-base) deprecates this deprecated argument. Specify ``ansible.builtin`` for ansible-base, or the collection's name (format ``foo.bar``). Must be used with ``removed_in_version`` or ``removed_at_date``."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "deprecated_aliases"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:666
msgid "Deprecates aliases of this argument. Must contain a list or tuple of dictionaries having some the following keys:"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "name"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:670
msgid "The name of the alias to deprecate. (Required.)"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst
#: ../../rst/dev_guide/testing/sanity/update-bundled.rst
msgid "version"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:674
msgid "The version of ansible-base or the collection this alias will be removed in. Either ``version`` or ``date`` must be specified."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "date"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:678
msgid "The a date after which a minor release of ansible-base or a major collection release will no longer contain this alias.. Either ``version`` or ``date`` must be specified."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "collection_name"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:682
msgid "Specifies which collection (or ansible-base) deprecates this deprecated alias. Specify ``ansible.builtin`` for ansible-base, or the collection's name (format ``foo.bar``). Must be used with ``version`` or ``date``."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:684
msgid "Examples:"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "mutually_exclusive"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:708
msgid "If ``options`` is specified, ``mutually_exclusive`` refers to the sub-options described in ``options`` and behaves as in :ref:`argument_spec_dependencies`."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "required_together"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:712
msgid "If ``options`` is specified, ``required_together`` refers to the sub-options described in ``options`` and behaves as in :ref:`argument_spec_dependencies`."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "required_one_of"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:716
msgid "If ``options`` is specified, ``required_one_of`` refers to the sub-options described in ``options`` and behaves as in :ref:`argument_spec_dependencies`."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "required_if"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:720
msgid "If ``options`` is specified, ``required_if`` refers to the sub-options described in ``options`` and behaves as in :ref:`argument_spec_dependencies`."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst
msgid "required_by"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:724
msgid "If ``options`` is specified, ``required_by`` refers to the sub-options described in ``options`` and behaves as in :ref:`argument_spec_dependencies`."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:730
msgid "Dependencies between module options"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:732
msgid "The following are optional arguments for ``AnsibleModule()``:"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:748
msgid "Must be a sequence (list or tuple) of sequences of strings. Every sequence of strings is a list of option names which are mutually exclusive. If more than one options of a list are specified together, Ansible will fail the module with an error."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:759
msgid "In this example, the options ``path`` and ``content`` must not specified at the same time. Also the options ``repository_url`` and ``repository_filename`` must not be specified at the same time. But specifying ``path`` and ``repository_url`` is accepted."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:761
msgid "To ensure that precisely one of two (or more) options is specified, combine ``mutually_exclusive`` with ``required_one_of``."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:765
msgid "Must be a sequence (list or tuple) of sequences of strings. Every sequence of strings is a list of option names which are must be specified together. If at least one of these options are specified, the other ones from the same sequence must all be present."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:775
msgid "In this example, if one of the options ``file_path`` or ``file_hash`` is specified, Ansible will fail the module with an error if the other one is not specified."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:779
msgid "Must be a sequence (list or tuple) of sequences of strings. Every sequence of strings is a list of option names from which at least one must be specified. If none one of these options are specified, Ansible will fail module execution."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:789
msgid "In this example, at least one of ``path`` and ``content`` must be specified. If none are specified, execution will fail. Specifying both is explicitly allowed; to prevent this, combine ``required_one_of`` with ``mutually_exclusive``."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:793
msgid "Must be a sequence of sequences. Every inner sequence describes one conditional dependency. Every sequence must have three or four values. The first two values are the option's name and the option's value which describes the condition. The further elements of the sequence are only needed if the option of that name has precisely this value."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:795
msgid "If you want that all options in a list of option names are specified if the condition is met, use one of the following forms:"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:802
msgid "If you want that at least one option of a list of option names is specified if the condition is met, use the following form:"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:817
msgid "In this example, if the user specifies ``state=present``, at least one of the options ``path`` and ``content`` must be supplied (or both). To make sure that precisely one can be specified, combine ``required_if`` with ``mutually_exclusive``."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:819
msgid "On the other hand, if ``force`` (a boolean parameter) is set to ``true``, ``yes`` etc., both ``force_reason`` and ``force_code`` must be specified."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:823
msgid "Must be a dictionary mapping option names to sequences of option names. If the option name in a dictionary key is specified, the option names it maps to must all also be specified. Note that instead of a sequence of option names, you can also specify one single option name."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:834
msgid "In the example, if ``force`` is specified, ``force_reason`` must also be specified. Also, if ``path`` is specified, then three three options ``mode``, ``owner`` and ``group`` also must be specified."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:837
msgid "Declaring check mode support"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:839
msgid "To declare that a module supports check mode, supply ``supports_check_mode=True`` to the ``AnsibleModule()`` call:"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:845
msgid "The module can determine whether it is called in check mode by checking the boolean value ``module.check_mode``. If it evaluates to ``True``, the module must take care not to do any modification."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:847
msgid "If ``supports_check_mode=False`` is specified, which is the default value, the module will exit in check mode with ``skipped=True`` and message ``remote module (<insert module name here>) does not support check mode``."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:850
msgid "Adding file options"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:852
msgid "To declare that a module should add support for all common file options, supply ``add_file_common_args=True`` to the ``AnsibleModule()`` call:"
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:858
msgid "You can find `a list of all file options here <https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/doc_fragments/files.py>`_. It is recommended that you make your ``DOCUMENTATION`` extend the doc fragment ``ansible.builtin.files`` (see :ref:`module_docs_fragments`) in this case, to make sure that all these fields are correctly documented."
msgstr ""

#: ../../rst/dev_guide/developing_program_flow_modules.rst:860
msgid "The helper functions ``module.load_file_common_arguments()`` and ``module.set_fs_attributes_if_different()`` can be used to handle these arguments for you:"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:5
msgid "Ansible and Python 3"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:7
msgid "The ``ansible-base`` code runs on both Python 2 and Python 3 because we want Ansible to be able to manage a wide variety of machines. Contributors to ansible-base and to Ansible Collections should be aware of the tips in this document so that they can write code that will run on the same versions of Python as the rest of Ansible."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:13
msgid "To ensure that your code runs on Python 3 as well as on Python 2, learn the tips and tricks and idioms described here. Most of these considerations apply to all three types of Ansible code:"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:16
msgid "controller-side code - code that runs on the machine where you invoke :command:`/usr/bin/ansible`"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:17
msgid "modules - the code which Ansible transmits to and invokes on the managed machine."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:18
msgid "shared ``module_utils`` code - the common code that's used by modules to perform tasks and sometimes used by controller-side code as well"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:20
msgid "However, the three types of code do not use the same string strategy. If you're developing a module or some ``module_utils`` code, be sure to read the section on string strategy carefully."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:23
msgid "Minimum version of Python 3.x and Python 2.x"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:25
msgid "On the controller we support Python 3.5 or greater and Python 2.7 or greater.  Module-side, we support Python 3.5 or greater and Python 2.6 or greater."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:28
msgid "Python 3.5 was chosen as a minimum because it is the earliest Python 3 version adopted as the default Python by a Long Term Support (LTS) Linux distribution (in this case, Ubuntu-16.04). Previous LTS Linux distributions shipped with a Python 2 version which users can rely upon instead of the Python 3 version."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:33
msgid "For Python 2, the default is for modules to run on at least Python 2.6.  This allows users with older distributions that are stuck on Python 2.6 to manage their machines.  Modules are allowed to drop support for Python 2.6 when one of their dependent libraries requires a higher version of Python. This is not an invitation to add unnecessary dependent libraries in order to force your module to be usable only with a newer version of Python; instead it is an acknowledgment that some libraries (for instance, boto3 and docker-py) will only function with a newer version of Python."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:42
msgid "Python 2.4 Module-side Support:"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:44
msgid "Support for Python 2.4 and Python 2.5 was dropped in Ansible-2.4.  RHEL-5 (and its rebuilds like CentOS-5) were supported until April of 2017. Ansible-2.3 was released in April of 2017 and was the last Ansible release to support Python 2.4 on the module-side."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:50
msgid "Developing Ansible code that supports Python 2 and Python 3"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:52
msgid "The best place to start learning about writing code that supports both Python 2 and Python 3 is `Lennart Regebro's book: Porting to Python 3 <http://python3porting.com/>`_. The book describes several strategies for porting to Python 3. The one we're using is `to support Python 2 and Python 3 from a single code base <http://python3porting.com/strategies.html#python-2-and-python-3-without-conversion>`_"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:59
msgid "Understanding strings in Python 2 and Python 3"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:61
msgid "Python 2 and Python 3 handle strings differently, so when you write code that supports Python 3 you must decide what string model to use.  Strings can be an array of bytes (like in C) or they can be an array of text.  Text is what we think of as letters, digits, numbers, other printable symbols, and a small number of unprintable \"symbols\" (control codes)."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:67
msgid "In Python 2, the two types for these (:class:`str <python:str>` for bytes and :func:`unicode <python:unicode>` for text) are often used interchangeably.  When dealing only with ASCII characters, the strings can be combined, compared, and converted from one type to another automatically.  When non-ASCII characters are introduced, Python 2 starts throwing exceptions due to not knowing what encoding the non-ASCII characters should be in."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:74
msgid "Python 3 changes this behavior by making the separation between bytes (:class:`bytes <python3:bytes>`) and text (:class:`str <python3:str>`) more strict.  Python 3 will throw an exception when trying to combine and compare the two types.  The programmer has to explicitly convert from one type to the other to mix values from each."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:79
msgid "In Python 3 it's immediately apparent to the programmer when code is mixing the byte and text types inappropriately, whereas in Python 2, code that mixes those types may work until a user causes an exception by entering non-ASCII input. Python 3 forces programmers to proactively define a strategy for working with strings in their program so that they don't mix text and byte strings unintentionally."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:85
msgid "Ansible uses different strategies for working with strings in controller-side code, in :ref: `modules <module_string_strategy>`, and in :ref:`module_utils <module_utils_string_strategy>` code."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:91
msgid "Controller string strategy: the Unicode Sandwich"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:93
msgid "In controller-side code we use a strategy known as the Unicode Sandwich (named after Python 2's :func:`unicode  <python:unicode>` text type).  For Unicode Sandwich we know that at the border of our code and the outside world (for example, file and network IO, environment variables, and some library calls) we are going to receive bytes. We need to transform these bytes into text and use that throughout the internal portions of our code.  When we have to send those strings back out to the outside world we first convert the text back into bytes. To visualize this, imagine a 'sandwich' consisting of a top and bottom layer of bytes, a layer of conversion between, and all text type in the center."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:104
msgid "Unicode Sandwich common borders: places to convert bytes to text in controller code"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:106
msgid "This is a partial list of places where we have to convert to and from bytes when using the Unicode Sandwich string strategy. It's not exhaustive but it gives you an idea of where to watch for problems."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:111
msgid "Reading and writing to files"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:113
msgid "In Python 2, reading from files yields bytes.  In Python 3, it can yield text. To make code that's portable to both we don't make use of Python 3's ability to yield text but instead do the conversion explicitly ourselves. For example:"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:131
msgid "Much of Ansible assumes that all encoded text is UTF-8.  At some point, if there is demand for other encodings we may change that, but for now it is safe to assume that bytes are UTF-8."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:135
msgid "Writing to files is the opposite process:"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:144
msgid "Note that we don't have to catch :exc:`UnicodeError` here because we're transforming to UTF-8 and all text strings in Python can be transformed back to UTF-8."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:149
msgid "Filesystem interaction"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:151
msgid "Dealing with filenames often involves dropping back to bytes because on UNIX-like systems filenames are bytes.  On Python 2, if we pass a text string to these functions, the text string will be converted to a byte string inside of the function and a traceback will occur if non-ASCII characters are present.  In Python 3, a traceback will only occur if the text string can't be decoded in the current locale, but it's still good to be explicit and have code which works on both versions:"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:172
msgid "When you are only manipulating a filename as a string without talking to the filesystem (or a C library which talks to the filesystem) you can often get away without converting to bytes:"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:183
msgid "On the other hand, if the code needs to manipulate the filename and also talk to the filesystem, it can be more convenient to transform to bytes right away and manipulate in bytes."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:187
msgid "Make sure all variables passed to a function are the same type. If you're working with something like :func:`python3:os.path.join` which takes multiple strings and uses them in combination, you need to make sure that all the types are the same (either all bytes or all text).  Mixing bytes and text will cause tracebacks."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:194
msgid "Interacting with other programs"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:196
msgid "Interacting with other programs goes through the operating system and C libraries and operates on things that the UNIX kernel defines.  These interfaces are all byte-oriented so the Python interface is byte oriented as well.  On both Python 2 and Python 3, byte strings should be given to Python's subprocess library and byte strings should be expected back from it."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:202
msgid "One of the main places in Ansible's controller code that we interact with other programs is the connection plugins' ``exec_command`` methods.  These methods transform any text strings they receive in the command (and arguments to the command) to execute into bytes and return stdout and stderr as byte strings Higher level functions (like action plugins' ``_low_level_execute_command``) transform the output into text strings."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:212
msgid "Module string strategy: Native String"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:214
msgid "In modules we use a strategy known as Native Strings. This makes things easier on the community members who maintain so many of Ansible's modules, by not breaking backwards compatibility by mandating that all strings inside of modules are text and converting between text and bytes at the borders."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:220
msgid "Native strings refer to the type that Python uses when you specify a bare string literal:"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:227
msgid "In Python 2, these are byte strings. In Python 3 these are text strings. Modules should be coded to expect bytes on Python 2 and text on Python 3."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:233
msgid "Module_utils string strategy: hybrid"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:235
msgid "In ``module_utils`` code we use a hybrid string strategy. Although Ansible's ``module_utils`` code is largely like module code, some pieces of it are used by the controller as well. So it needs to be compatible with modules and with the controller's assumptions, particularly the string strategy. The module_utils code attempts to accept native strings as input to its functions and emit native strings as their output."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:242
msgid "In ``module_utils`` code:"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:244
msgid "Functions **must** accept string parameters as either text strings or byte strings."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:245
msgid "Functions may return either the same type of string as they were given or the native string type for the Python version they are run on."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:246
msgid "Functions that return strings **must** document whether they return strings of the same type as they were given or native strings."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:248
msgid "Module-utils functions are therefore often very defensive in nature. They convert their string parameters into text (using ``ansible.module_utils._text.to_text``) at the beginning of the function, do their work, and then convert the return values into the native string type (using ``ansible.module_utils._text.to_native``) or back to the string type that their parameters received."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:255
msgid "Tips, tricks, and idioms for Python 2/Python 3 compatibility"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:258
msgid "Use forward-compatibility boilerplate"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:260
msgid "Use the following boilerplate code at the top of all python files to make certain constructs act the same way on Python 2 and Python 3:"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:269
msgid "``__metaclass__ = type`` makes all classes defined in the file into new-style classes without explicitly inheriting from :class:`object <python3:object>`."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:272
msgid "The ``__future__`` imports do the following:"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst
#: ../../rst/dev_guide/testing/sanity/future-import-boilerplate.rst:16
msgid "absolute_import"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:274
msgid "Makes imports look in :data:`sys.path <python3:sys.path>` for the modules being imported, skipping the directory in which the module doing the importing lives.  If the code wants to use the directory in which the module doing the importing, there's a new dot notation to do so."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst
#: ../../rst/dev_guide/testing/sanity/future-import-boilerplate.rst:31
msgid "division"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:278
msgid "Makes division of integers always return a float.  If you need to find the quotient use ``x // y`` instead of ``x / y``."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst
#: ../../rst/dev_guide/testing/sanity/future-import-boilerplate.rst:43
msgid "print_function"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:280
msgid "Changes :func:`print <python3:print>` from a keyword into a function."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:283
msgid "`PEP 0328: Absolute Imports <https://www.python.org/dev/peps/pep-0328/#guido-s-decision>`_"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:284
msgid "`PEP 0238: Division <https://www.python.org/dev/peps/pep-0238>`_"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:285
msgid "`PEP 3105: Print function <https://www.python.org/dev/peps/pep-3105>`_"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:288
msgid "Prefix byte strings with ``b_``"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:290
msgid "Since mixing text and bytes types leads to tracebacks we want to be clear about what variables hold text and what variables hold bytes.  We do this by prefixing any variable holding bytes with ``b_``.  For instance:"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:301
msgid "We do not prefix the text strings instead because we only operate on byte strings at the borders, so there are fewer variables that need bytes than text."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:306
msgid "Import Ansible's bundled Python ``six`` library"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:308
msgid "The third-party Python `six <https://pypi.org/project/six/>`_ library exists to help projects create code that runs on both Python 2 and Python 3.  Ansible includes a version of the library in module_utils so that other modules can use it without requiring that it is installed on the remote system.  To make use of it, import it like this:"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:318
msgid "Ansible can also use a system copy of six"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:320
msgid "Ansible will use a system copy of six if the system copy is a later version than the one Ansible bundles."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:324
msgid "Handle exceptions with ``as``"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:326
msgid "In order for code to function on Python 2.6+ and Python 3, use the new exception-catching syntax which uses the ``as`` keyword:"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:336
msgid "Do **not** use the following syntax as it will fail on every version of Python 3:"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:347
msgid "Update octal numbers"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:349
msgid "In Python 2.x, octal literals could be specified as ``0755``.  In Python 3, octals must be specified as ``0o755``."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:353
msgid "String formatting for controller code"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:356
msgid "Use ``str.format()`` for Python 2.6 compatibility"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:358
msgid "Starting in Python 2.6, strings gained a method called ``format()`` to put strings together.  However, one commonly used feature of ``format()`` wasn't added until Python 2.7, so you need to remember not to use it in Ansible code:"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:370
msgid "Both of the format strings above map positional arguments of the ``format()`` method into the string.  However, the first version doesn't work in Python 2.6.  Always remember to put numbers into the placeholders so the code is compatible with Python 2.6."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:376
msgid "Python documentation on `format strings <https://docs.python.org/2/library/string.html#formatstrings>`_"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:379
msgid "Use percent format with byte strings"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:381
msgid "In Python 3.x, byte strings do not have a ``format()`` method.  However, it does have support for the older, percent-formatting."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:388
msgid "Percent formatting added in Python 3.5"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:390
msgid "Percent formatting of byte strings was added back into Python 3 in 3.5. This isn't a problem for us because Python 3.5 is our minimum version. However, if you happen to be testing Ansible code with Python 3.4 or earlier, you will find that the byte string formatting here won't work. Upgrade to Python 3.5 to test."
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:397
msgid "Python documentation on `percent formatting <https://docs.python.org/2/library/stdtypes.html#string-formatting>`_"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:402
msgid "Testing modules on Python 3"
msgstr ""

#: ../../rst/dev_guide/developing_python_3.rst:404
msgid "Ansible modules are slightly harder to code to support Python 3 than normal code from other projects. A lot of mocking has to go into unit testing an Ansible module, so it's harder to test that your changes have fixed everything or to to make sure that later commits haven't regressed the Python 3 support. Review our :ref:`testing <developing_testing>` pages for more information."
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:5
msgid "Rebasing a pull request"
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:7
msgid "You may find that your pull request (PR) is out-of-date and needs to be rebased. This can happen for several reasons:"
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:9
msgid "Files modified in your PR are in conflict with changes which have already been merged."
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:10
msgid "Your PR is old enough that significant changes to automated test infrastructure have occurred."
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:12
msgid "Rebasing the branch used to create your PR will resolve both of these issues."
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:15
msgid "Configuring your remotes"
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:17
msgid "Before you can rebase your PR, you need to make sure you have the proper remotes configured. These instructions apply to any repository on GitHub, including collections repositories. On other platforms (bitbucket, gitlab), the same principles and commands apply but the syntax may be different. We use the ansible/ansible repository here as an example. In other repositories, the branch names may be different. Assuming you cloned your fork in the usual fashion, the ``origin`` remote will point to your fork::"
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:23
msgid "However, you also need to add a remote which points to the upstream repository::"
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:27
msgid "Which should leave you with the following remotes::"
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:35
msgid "Checking the status of your branch should show your fork is up-to-date with the ``origin`` remote::"
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:43
msgid "Rebasing your branch"
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:45
msgid "Once you have an ``upstream`` remote configured, you can rebase the branch for your PR::"
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:49
msgid "This will replay the changes in your branch on top of the changes made in the upstream ``devel`` branch. If there are merge conflicts, you will be prompted to resolve those before you can continue."
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:52
msgid "After you rebase, the status of your branch changes::"
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:61
msgid "Don't worry, this is normal after a rebase. You should ignore the ``git status`` instructions to use ``git pull``. We'll cover what to do next in the following section."
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:64
msgid "Updating your pull request"
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:66
msgid "Now that you've rebased your branch, you need to push your changes to GitHub to update your PR."
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:68
msgid "Since rebasing re-writes git history, you will need to use a force push::"
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:72
msgid "Your PR on GitHub has now been updated. This will automatically trigger testing of your changes. You should check in on the status of your PR after tests have completed to see if further changes are required."
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:76
msgid "Getting help rebasing"
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:78
msgid "For help with rebasing your PR, or other development related questions, join us on our #ansible-devel IRC chat channel on `freenode.net <https://freenode.net>`_."
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:82
msgid ":ref:`community_development_process`"
msgstr ""

#: ../../rst/dev_guide/developing_rebasing.rst:83
msgid "Information on roadmaps, opening PRs, Ansibullbot, and more"
msgstr ""

#: ../../rst/dev_guide/index.rst:5
msgid "Developer Guide"
msgstr ""

#: ../../rst/dev_guide/index.rst:7
msgid "Welcome to the Ansible Developer Guide!"
msgstr ""

#: ../../rst/dev_guide/index.rst:9
msgid "**Who should use this guide?**"
msgstr ""

#: ../../rst/dev_guide/index.rst:11
msgid "If you want to extend Ansible by using a custom module or plugin locally, creating a module or plugin, adding functionality to an existing module, or expanding test coverage, this guide is for you. We've included detailed information for developers on how to test and document modules, as well as the prerequisites for getting your module or plugin accepted into the main Ansible repository."
msgstr ""

#: ../../rst/dev_guide/index.rst:13
msgid "Find the task that best describes what you want to do:"
msgstr ""

#: ../../rst/dev_guide/index.rst:15
msgid "I'm looking for a way to address a use case:"
msgstr ""

#: ../../rst/dev_guide/index.rst:17
msgid "I want to :ref:`add a custom plugin or module locally <developing_locally>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:18
msgid "I want to figure out if :ref:`developing a module is the right approach <module_dev_should_you>` for my use case."
msgstr ""

#: ../../rst/dev_guide/index.rst:19
msgid "I want to :ref:`develop a collection <developing_collections>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:20
msgid "I want to :ref:`contribute to an Ansible-maintained collection <contributing_maintained_collections>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:21
msgid "I want to :ref:`contribute to a community-maintained collection <hacking_collections>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:22
msgid "I want to :ref:`migrate a role to a collection <migrating_roles>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:24
msgid "I've read the info above, and I'm sure I want to develop a module:"
msgstr ""

#: ../../rst/dev_guide/index.rst:26
msgid "What do I need to know before I start coding?"
msgstr ""

#: ../../rst/dev_guide/index.rst:27
msgid "I want to :ref:`set up my Python development environment <environment_setup>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:28
msgid "I want to :ref:`get started writing a module <developing_modules_general>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:34
msgid "I want to write a specific kind of module:"
msgstr ""

#: ../../rst/dev_guide/index.rst:30
msgid "a :ref:`network module <developing_modules_network>`"
msgstr ""

#: ../../rst/dev_guide/index.rst:31
msgid "a :ref:`Windows module <developing_modules_general_windows>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:32
msgid "an :ref:`Amazon module <AWS_module_development>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:33
msgid "an :ref:`OpenStack module <OpenStack_module_development>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:34
msgid "an :ref:`oVirt/RHV module <oVirt_module_development>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:35
msgid "a :ref:`VMware module <VMware_module_development>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:36
msgid "I want to :ref:`write a series of related modules <developing_modules_in_groups>` that integrate Ansible with a new product (for example, a database, cloud provider, network platform, and so on)."
msgstr ""

#: ../../rst/dev_guide/index.rst:38
msgid "I want to refine my code:"
msgstr ""

#: ../../rst/dev_guide/index.rst:40
msgid "I want to :ref:`debug my module code <debugging_modules>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:41
msgid "I want to :ref:`add tests <developing_testing>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:42
msgid "I want to :ref:`document my module <module_documenting>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:43
msgid "I want to :ref:`document my set of modules for a network platform <documenting_modules_network>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:44
msgid "I want to follow :ref:`conventions and tips for clean, usable module code <developing_modules_best_practices>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:45
msgid "I want to :ref:`make sure my code runs on Python 2 and Python 3 <developing_python_3>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:47
msgid "I want to work on other development projects:"
msgstr ""

#: ../../rst/dev_guide/index.rst:49
msgid "I want to :ref:`write a plugin <developing_plugins>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:50
msgid "I want to :ref:`connect Ansible to a new source of inventory <developing_inventory>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:51
msgid "I want to :ref:`deprecate an outdated module <deprecating_modules>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:53
msgid "I want to contribute back to the Ansible project:"
msgstr ""

#: ../../rst/dev_guide/index.rst:55
msgid "I want to :ref:`understand how to contribute to Ansible <ansible_community_guide>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:56
msgid "I want to :ref:`contribute my module or plugin <developing_modules_checklist>`."
msgstr ""

#: ../../rst/dev_guide/index.rst:57
msgid "I want to :ref:`understand the license agreement <contributor_license_agreement>` for contributions to Ansible."
msgstr ""

#: ../../rst/dev_guide/index.rst:59
msgid "If you prefer to read the entire guide, here's a list of the pages in order."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:6
msgid "Migrating Roles to Roles in Collections on Galaxy"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:8
msgid "You can migrate any existing standalone role into a collection and host the collection on Galaxy. With Ansible collections, you can distribute many roles in a single cohesive unit of re-usable automation. Inside a collection, you can share custom plugins across all roles in the collection instead of duplicating them in each role's :file:`library/`` directory."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:10
msgid "You must migrate roles to collections if you want to distribute them as certified Ansible content."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:14
msgid "If you want to import your collection to Galaxy, you need a `Galaxy namespace <https://galaxy.ansible.com/docs/contributing/namespaces.html>`_."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:16
msgid "See :ref:`developing_collections` for details on collections."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:24
msgid "Comparing standalone roles to collection roles"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:26
msgid ":ref:`Standalone roles <playbooks_reuse_roles>` have the following directory structure:"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:45
msgid "The highlighted directories above will change when you migrate to a collection-based role. The collection directory structure includes a :file:`roles/` directory:"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:70
msgid "You will need to use the Fully Qualified Collection Name (FQCN) to use the roles and plugins when you migrate your role into a collection. The FQCN is the combination of the collection ``namespace``, collection ``name``, and the content item you are referring to."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:72
msgid "So for example, in the above collection, the FQCN to access  ``role1`` would be:"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:79
msgid "A collection can contain one or more roles in the :file:`roles/` directory and these are almost identical to standalone roles, except you need to move plugins out of the individual roles, and use the :abbr:`FQCN (Fully Qualified Collection Name)` in some places, as detailed in the next section."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:83
msgid "In standalone roles, some of the plugin directories referenced their plugin types in the plural sense; this is not the case in collections."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:88
msgid "Migrating a role to a collection"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:90
msgid "To migrate from a standalone role that contains no plugins to a collection role:"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:92
msgid "Create a local :file:`ansible_collections` directory and ``cd`` to this new directory."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:94
#: ../../rst/dev_guide/migrating_roles.rst:123
msgid "Create a collection. If you want to import this collection to Ansible Galaxy, you need a `Galaxy namespace <https://galaxy.ansible.com/docs/contributing/namespaces.html>`_."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:100
#: ../../rst/dev_guide/migrating_roles.rst:129
msgid "This creates the collection directory structure."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:102
#: ../../rst/dev_guide/migrating_roles.rst:131
msgid "Copy the standalone role directory into the :file:`roles/` subdirectory of the collection. Roles in collections cannot have hyphens in the role name. Rename any such roles to use underscores instead."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:109
#: ../../rst/dev_guide/migrating_roles.rst:147
msgid "Update ``galaxy.yml`` to include any role dependencies."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:111
#: ../../rst/dev_guide/migrating_roles.rst:149
msgid "Update the collection README.md file to add links to any role README.md files."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:117
msgid "Migrating a role with plugins to a collection"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:119
msgid "To migrate from a standalone role that has plugins to a collection role:"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:121
msgid "Create a local :file:`ansible_collections directory` and ``cd`` to this new directory."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:139
msgid "Move any modules to the :file:`plugins/modules/` directory."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:145
msgid "Move any other plugins to the appropriate :file:`plugins/PLUGINTYPE/` directory.  See :ref:`migrating_plugins_collection` for additional steps that may be required."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:151
msgid "Change any references to the role to use the :abbr:`FQCN (Fully Qualified Collection Name)`."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:164
msgid "You can alternately use the ``collections`` keyword to simplify this:"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:182
msgid "Migrating other role plugins to a collection"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:184
msgid "To migrate other role plugins to a collection:"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:187
msgid "Move each nonmodule plugins to the appropriate :file:`plugins/PLUGINTYPE/` directory. The :file:`mynamespace/mycollection/plugins/README.md` file explains the types of plugins that the collection can contain within optionally created subdirectories."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:193
msgid "Update documentation to use the FQCN. Plugins that use ``doc_fragments`` need to use FQCN (for example, ``mydocfrag`` becomes ``mynamespace.mycollection.mydocfrag``)."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:195
msgid "Update relative imports work in collections to start with a period.  For example, :file:`./filename` and :file:`../asdfu/filestuff` works but :file:`filename` in same directory must be updated to :file:`./filename`."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:198
msgid "If you have a custom ``module_utils`` or import from ``__init__.py``, you must also:"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:200
msgid "Change the Python namespace for custom ``module_utils`` to use the :abbr:`FQCN (Fully Qualified Collection Name)` along with the ``ansible_collections`` convention. See :ref:`update_module_utils_role`."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:202
msgid "Change how you import from ``__init__.py``. See :ref:`update_init_role`."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:208
msgid "Updating ``module_utils``"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:210
msgid "If any of your custom modules use a custom module utility, once you migrate to a collection you cannot address the module utility in the top level ``ansible.module_utils`` Python namespace. Ansible does not merge content from collections into the Ansible internal Python namespace. Update any Python import statements that refer to custom module utilities when you migrate your custom content to collections. See :ref:`module_utils in collections <collection_module_utils>` for more details."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:212
msgid "When coding with ``module_utils`` in a collection, the Python import statement needs to take into account the :abbr:`FQCN (Fully Qualified Collection Name)` along with the ``ansible_collections`` convention. The resulting Python import looks similar to the following example:"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:220
msgid "You need to follow the same rules in changing paths and using namespaced names for subclassed plugins."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:222
msgid "The following example code snippets show a Python and a PowerShell module using both default Ansible ``module_utils`` and those provided by a collection. In this example the namespace is ``ansible_example`` and the collection is ``community``."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:224
msgid "In the Python example the ``module_utils`` is ``helper`` and the :abbr:`FQCN (Fully Qualified Collection Name)` is ``ansible_example.community.plugins.module_utils.helper``:"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:250
msgid "In the PowerShell example the ``module_utils`` is ``hyperv`` and the :abbr:`FQCN (Fully Qualified Collection Name)` is ``ansible_example.community.plugins.module_utils.hyperv``:"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:272
msgid "Importing from __init__.py"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:274
msgid "Because of the way that the CPython interpreter does imports, combined with the way the Ansible plugin loader works, if your custom embedded module or plugin requires importing something from an :file:`__init__.py` file, that also becomes part of your collection. You can either originate the content inside a standalone role or use the file name in the Python import statement. The following example is an :file:`__init__.py` file that is part of a callback plugin found inside a collection named ``ansible_example.community``."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:282
msgid "Example: Migrating a standalone role with plugins to a collection"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:284
msgid "In this example we have a standalone role called ``my-standalone-role.webapp`` to emulate a standalone role that contains dashes in the name (which is not valid in collections). This standalone role contains a custom module in the ``library/`` directory called ``manage_webserver``."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:299
msgid "Create a new collection, for example, ``acme.webserver``:"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:312
msgid "Create the ``webapp`` role inside the collection and copy all contents from the standalone role:"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:319
msgid "Move the ``manage_webserver`` module to its new home in ``acme/webserver/plugins/modules/``:"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:327
msgid "This example changed the original source file ``manage_webserver.py`` to the destination file ``manage.py``. This is optional but the :abbr:`FQCN (Fully Qualified Collection Name)` provides the ``webserver`` context as ``acme.webserver.manage``."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:329
msgid "Change ``manage_webserver`` to ``acme.webserver.manage`` in :file:`tasks/` files in the role ( for example, ``my-standalone-role.webapp/tasks/main.yml``) and any use of the original module name."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:333
msgid "This name change is only required if you changed the original module name, but illustrates content referenced by :abbr:`FQCN (Fully Qualified Collection Name)` can offer context and in turn can make module and plugin names shorter. If you anticipate using these modules independent of the role, keep the original naming conventions. Users can add the  :ref:`collections keyword <collections_using_playbook>` in their playbooks. Typically roles are an abstraction layer and users won't use components of the role independently."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:337
msgid "Example: Supporting standalone roles and migrated collection roles in a downstream RPM"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:339
msgid "A standalone role can co-exist with its collection role counterpart (for example, as part of a support lifecycle of a product). This should only be done for a transition period, but these two can exist in downstream in packages such as RPMs. For example, the RHEL system roles could coexist with an `example of a RHEL system roles collection <https://github.com/maxamillion/collection-rhel-system-roles>`_ and provide existing backwards compatibility with the downstream RPM."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:341
msgid "This section walks through an example creating this coexistence in a downstream RPM and requires Ansible 2.9.0 or later."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:343
msgid "To deliver a role as both a standalone role and a collection role:"
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:345
msgid "Place the collection in  :file:`/usr/share/ansible/collections/ansible_collections/`."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:346
msgid "Copy the contents of the role inside the collection into a directory named after the standalone role and place the standalone role in  :file:`/usr/share/ansible/roles/`."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:348
msgid "All previously bundled modules and plugins used in the standalone role are now referenced by :abbr:`FQCN (Fully Qualified Collection Name)` so even though they are no longer embedded, they can be found from the collection contents.This is an example of how the content inside the collection is a unique entity and does not have to be bound to a role or otherwise. You could alternately create two separate collections: one for the modules and plugins and another for the standalone role to migrate to. The role must use the modules and plugins as :abbr:`FQCN (Fully Qualified Collection Name)`."
msgstr ""

#: ../../rst/dev_guide/migrating_roles.rst:350
msgid "The following is an example RPM spec file that accomplishes this using this example content:"
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst:5
msgid "The lifecycle of an Ansible module"
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst:7
msgid "Modules in the main Ansible repo have a defined life cycle, from first introduction to final removal. The module life cycle is tied to the `Ansible release cycle <release_cycle>`. A module may move through these four states:"
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst:10
msgid "When a module is first accepted into Ansible, we consider it in tech preview and will mark it as such in the documentation."
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst:12
msgid "If a module matures, we will remove the 'preview' mark in the documentation. We support (though we cannot guarantee) backwards compatibility for these modules, which means their parameters should be maintained with stable meanings."
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst:14
msgid "If a module's target API changes radically, or if someone creates a better implementation of its functionality, we may mark it deprecated. Modules that are deprecated are still available but they are reaching the end of their life cycle. We retain deprecated modules for 4 release cycles with deprecation warnings to help users update playbooks and roles that use them."
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst:16
msgid "When a module has been deprecated for four release cycles, we remove the code and mark the stub file removed. Modules that are removed are no longer shipped with Ansible. The stub file helps users find alternative modules."
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst:21
msgid "Deprecating modules"
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst:23
msgid "To deprecate a module, you must:"
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst:25
msgid "Rename the file so it starts with an ``_``, for example, rename ``old_cloud.py`` to ``_old_cloud.py``. This keeps the module available and marks it as deprecated on the module index pages."
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst:26
msgid "Mention the deprecation in the relevant ``CHANGELOG``."
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst:27
msgid "Reference the deprecation in the relevant ``porting_guide_x.y.rst``."
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst:28
msgid "Add ``deprecated:`` to the documentation with the following sub-values:"
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst
msgid "removed_in"
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst:30
msgid "A ``string``, such as ``\"2.10\"``; the version of Ansible where the module will be replaced with a docs-only module stub. Usually current release +4. Mutually exclusive with :removed_by_date:."
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst
msgid "remove_by_date"
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst:31
msgid "(Added in Ansible 2.10). An ISO 8601 formatted date when the module will be removed. Usually 2 years from the date the module is deprecated. Mutually exclusive with :removed_in:."
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst
msgid "why"
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst:32
msgid "Optional string that used to detail why this has been removed."
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst
msgid "alternative"
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst:33
msgid "Inform users they should do instead, for example, ``Use M(whatmoduletouseinstead) instead.``."
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst:35
msgid "note: with the advent of collections and ``routing.yml`` we might soon require another entry in this file to mark the deprecation."
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst:37
msgid "For an example of documenting deprecation, see this `PR that deprecates multiple modules <https://github.com/ansible/ansible/pull/43781/files>`_. Some of the elements in the PR might now be out of date."
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst:41
msgid "Changing a module name"
msgstr ""

#: ../../rst/dev_guide/module_lifecycle.rst:43
msgid "You can also rename a module and keep an alias to the old name by using a symlink that starts with _. This example allows the ``stat`` module to be called with ``fileinfo``, making the following examples equivalent::"
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:3
msgid "Ansible architecture"
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:5
msgid "Ansible is a radically simple IT automation engine that automates cloud provisioning, configuration management, application deployment, intra-service orchestration, and many other IT needs."
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:7
msgid "Being designed for multi-tier deployments since day one, Ansible models your IT infrastructure by describing how all of your systems inter-relate, rather than just managing one system at a time."
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:9
msgid "It uses no agents and no additional custom security infrastructure, so it's easy to deploy - and most importantly, it uses a very simple language (YAML, in the form of Ansible Playbooks) that allow you to describe your automation jobs in a way that approaches plain English."
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:11
msgid "In this section, we'll give you a really quick overview of how Ansible works so you can see how the pieces fit together."
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:17
msgid "Modules"
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:19
msgid "Ansible works by connecting to your nodes and pushing out scripts called \"Ansible modules\" to them. Most modules accept parameters that describe the desired state of the system. Ansible then executes these modules (over SSH by default), and removes them when finished. Your library of modules can reside on any machine, and there are no servers, daemons, or databases required."
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:22
msgid "You can :ref:`write your own modules <developing_modules_general>`, though you should first consider :ref:`whether you should <developing_modules>`. Typically you'll work with your favorite terminal program, a text editor, and probably a version control system to keep track of changes to your content. You may write specialized modules in any language that can return JSON (Ruby, Python, bash, and so on)."
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:25
msgid "Module utilities"
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:27
msgid "When multiple modules use the same code, Ansible stores those functions as module utilities to minimize duplication and maintenance. For example, the code that parses URLs is ``lib/ansible/module_utils/url.py``. You can :ref:`write your own module utilities <developing_module_utilities>` as well. Module utilities may only be written in Python or in PowerShell."
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:30
msgid "Plugins"
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:32
msgid ":ref:`Plugins <plugins_lookup>` augment Ansible's core functionality. While modules execute on the target system in separate processes (usually that means on a remote system), plugins execute on the control node within the ``/usr/bin/ansible`` process. Plugins offer options and extensions for the core features of Ansible - transforming data, logging output, connecting to inventory, and more. Ansible ships with a number of handy plugins, and you can easily :ref:`write your own <developing_plugins>`. For example, you can write an :ref:`inventory plugin <developing_inventory>` to connect to any datasource that returns JSON. Plugins must be written in Python."
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:35
msgid "Inventory"
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:37
msgid "By default, Ansible represents the machines it manages in a file (INI, YAML, and so on) that puts all of your managed machines in groups of your own choosing."
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:39
msgid "To add new machines, there is no additional SSL signing server involved, so there's never any hassle deciding why a particular machine didn't get linked up due to obscure NTP or DNS issues."
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:41
msgid "If there's another source of truth in your infrastructure, Ansible can also connect to that. Ansible can draw inventory, group, and variable information from sources like EC2, Rackspace, OpenStack, and more."
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:43
msgid "Here's what a plain text inventory file looks like::"
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:54
msgid "Once inventory hosts are listed, variables can be assigned to them in simple text files (in a subdirectory called 'group_vars/' or 'host_vars/' or directly in the inventory file."
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:56
msgid "Or, as already mentioned, use a dynamic inventory to pull your inventory from data sources like EC2, Rackspace, or OpenStack."
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:59
msgid "Playbooks"
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:61
msgid "Playbooks can finely orchestrate multiple slices of your infrastructure topology, with very detailed control over how many machines to tackle at a time.  This is where Ansible starts to get most interesting."
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:63
msgid "Ansible's approach to orchestration is one of finely-tuned simplicity, as we believe your automation code should make perfect sense to you years down the road and there should be very little to remember about special syntax or features."
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:65
msgid "Here's what a simple playbook looks like::"
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:82
msgid "The Ansible search path"
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:84
msgid "Modules, module utilities, plugins, playbooks, and roles can live in multiple locations. If you write your own code to extend Ansible's core features, you may have multiple files with similar or the same names in different locations on your Ansible control node. The search path determines which of these files Ansible will discover and use on any given playbook run."
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:87
msgid "Ansible's search path grows incrementally over a run. As Ansible finds each playbook and role included in a given run, it appends any directories related to that playbook or role to the search path. Those directories remain in scope for the duration of the run, even after the playbook or role has finished executing. Ansible loads modules, module utilities, and plugins in this order:"
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:93
msgid "Directories adjacent to a playbook specified on the command line. If you run Ansible with ``ansible-playbook /path/to/play.yml``, Ansible appends these directories if they exist:"
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:101
msgid "Directories adjacent to a playbook that is statically imported by a playbook specified on the command line. If ``play.yml`` includes ``- import_playbook: /path/to/subdir/play1.yml``, Ansible appends these directories if they exist:"
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:111
msgid "Subdirectories of a role directory referenced by a playbook. If ``play.yml`` runs ``myrole``, Ansible appends these directories if they exist:"
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:120
msgid "Directories specified as default paths in ``ansible.cfg`` or by the related environment variables, including the paths for the various plugin types. See :ref:`ansible_configuration_settings` for more information. Sample ``ansible.cfg`` fields:"
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:131
msgid "Sample environment variables:"
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:140
msgid "The standard directories that ship as part of the Ansible distribution."
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:144
msgid "Modules, module utilities, and plugins in user-specified directories will override the standard versions. This includes some files with generic names. For example, if you have a file named ``basic.py`` in a user-specified directory, it will override the standard ``ansible.module_utils.basic``."
msgstr ""

#: ../../rst/dev_guide/overview_architecture.rst:149
msgid "If you have more than one module, module utility, or plugin with the same name in different user-specified directories, the order of commands at the command line and the order of includes and roles in each play will affect which one is found and used on that particular play."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:5
msgid "Guidelines for Ansible Amazon AWS module development"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:7
msgid "The Ansible AWS collection (on `Galaxy <https://galaxy.ansible.com/community/aws>`_, source code `repository <https://github.com/ansible-collections/community.aws>`_) is maintained by the Ansible AWS Working Group.  For further information see the `AWS working group community page <https://github.com/ansible/community/wiki/aws>`_. If you are planning to contribute AWS modules to Ansible then getting in touch with the working group is a good way to start, especially because a similar module may already be under development."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:13
msgid "Maintaining existing modules"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:16
msgid "Fixing bugs"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:18
msgid "Bug fixes to code that relies on boto will still be accepted. When possible, the code should be ported to use boto3."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:22
msgid "Adding new features"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:24
msgid "Try to keep backward compatibility with relatively recent versions of boto3. That means that if you want to implement some functionality that uses a new feature of boto3, it should only fail if that feature actually needs to be run, with a message stating the missing feature and minimum required version of boto3."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:29
msgid "Use feature testing (for example, ``hasattr('boto3.module', 'shiny_new_method')``) to check whether boto3 supports a feature rather than version checking. For example, from the ``ec2`` module:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:41
msgid "Migrating to boto3"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:43
msgid "Prior to Ansible 2.0, modules were written in either boto3 or boto. We are still porting some modules to boto3. Modules that still require boto should be ported to use boto3 rather than using both libraries (boto and boto3). We would like to remove the boto dependency from all modules."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:47
msgid "Porting code to AnsibleAWSModule"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:49
msgid "Some old AWS modules use the generic ``AnsibleModule`` as a base rather than the more efficient ``AnsibleAWSModule``. To port an old module to ``AnsibleAWSModule``, change:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:57
msgid "to:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:65
msgid "Few other changes are required. AnsibleAWSModule does not inherit methods from AnsibleModule by default, but most useful methods are included. If you do find an issue, please raise a bug report."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:69
msgid "When porting, keep in mind that AnsibleAWSModule also will add the default ec2 argument spec by default. In pre-port modules, you should see common arguments specified with:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:84
msgid "These can be replaced with:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:97
msgid "Creating new AWS modules"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:100
msgid "Use boto3 and AnsibleAWSModule"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:102
msgid "All new AWS modules must use boto3 and ``AnsibleAWSModule``."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:104
msgid "``AnsibleAWSModule`` greatly simplifies exception handling and library management, reducing the amount of boilerplate code. If you cannot use ``AnsibleAWSModule`` as a base, you must document the reason and request an exception to this rule."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:109
msgid "Naming your module"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:111
msgid "Base the name of the module on the part of AWS that you actually use. (A good rule of thumb is to take whatever module you use with boto as a starting point).  Don't further abbreviate names - if something is a well known abbreviation of a major component of AWS (for example, VPC or ELB), that's fine, but don't create new ones independently."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:116
msgid "Unless the name of your service is quite unique, please consider using ``aws_`` as a prefix. For example ``aws_lambda``."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:119
msgid "Importing botocore and boto3"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:121
msgid "The ``ansible.module_utils.ec2`` module and ``ansible.module_utils.core.aws`` modules both automatically import boto3 and botocore.  If boto3 is missing from the system then the variable ``HAS_BOTO3`` will be set to false.  Normally, this means that modules don't need to import boto3 directly. There is no need to check ``HAS_BOTO3`` when using AnsibleAWSModule as the module does that check:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:135
msgid "or:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:152
msgid "Supporting Module Defaults"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:154
msgid "The existing AWS modules support using :ref:`module_defaults <module_defaults>` for common authentication parameters.  To do the same for your new module, add an entry for it in ``lib/ansible/config/module_defaults.yml``.  These entries take the form of:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:164
msgid "Connecting to AWS"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:166
msgid "AnsibleAWSModule provides the ``resource`` and ``client`` helper methods for obtaining boto3 connections. These handle some of the more esoteric connection options, such as security tokens and boto profiles."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:169
msgid "If using the basic AnsibleModule then you should use ``get_aws_connection_info`` and then ``boto3_conn`` to connect to AWS as these handle the same range of connection options."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:172
msgid "These helpers also for missing profiles or a region not set when it needs to be, so you don't have to."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:174
msgid "An example of connecting to ec2 is shown below. Note that unlike boto there is no ``NoAuthHandlerFound`` exception handling like in boto. Instead, an ``AuthFailure`` exception will be thrown when you use the connection. To ensure that authorization, parameter validation and permissions errors are all caught, you should catch ``ClientError`` and ``BotoCoreError`` exceptions with every boto3 connection call. See exception handling:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:184
msgid "or for the higher level ec2 resource:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:191
msgid "An example of the older style connection used for modules based on AnsibleModule rather than AnsibleAWSModule:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:205
msgid "Common Documentation Fragments for Connection Parameters"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:207
msgid "There are two :ref:`common documentation fragments <module_docs_fragments>` that should be included into almost all AWS modules:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:210
msgid "``aws`` - contains the common boto connection parameters"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:211
msgid "``ec2`` - contains the common region parameter required for many AWS modules"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:213
msgid "These fragments should be used rather than re-documenting these properties to ensure consistency and that the more esoteric connection options are documented. For example:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:228
msgid "Handling exceptions"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:230
msgid "You should wrap any boto3 or botocore call in a try block. If an exception is thrown, then there are a number of possibilities for handling it."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:233
msgid "Catch the general ``ClientError`` or look for a specific error code with"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:234
msgid "``is_boto3_error_code``."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:235
msgid "Use ``aws_module.fail_json_aws()`` to report the module failure in a standard way"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:236
msgid "Retry using AWSRetry"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:237
msgid "Use ``fail_json()`` to report the failure without using ``ansible.module_utils.aws.core``"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:238
msgid "Do something custom in the case where you know how to handle the exception"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:240
msgid "For more information on botocore exception handling see the `botocore error documentation <https://botocore.readthedocs.io/en/latest/client_upgrades.html#error-handling>`_."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:243
msgid "Using is_boto3_error_code"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:245
msgid "To use ``ansible.module_utils.aws.core.is_boto3_error_code`` to catch a single AWS error code, call it in place of ``ClientError`` in your except clauses. In this case, *only* the ``InvalidGroup.NotFound`` error code will be caught here, and any other error will be raised for handling elsewhere in the program."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:259
msgid "Using fail_json_aws()"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:261
msgid "In the AnsibleAWSModule there is a special method, ``module.fail_json_aws()`` for nice reporting of exceptions.  Call this on your exception and it will report the error together with a traceback for use in Ansible verbose mode."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:265
msgid "You should use the AnsibleAWSModule for all new modules, unless not possible. If adding significant amounts of exception handling to existing modules, we recommend migrating the module to use AnsibleAWSModule (there are very few changes required to do this)"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:286
msgid "Note that it should normally be acceptable to catch all normal exceptions here, however if you expect anything other than botocore exceptions you should test everything works as expected."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:289
#: ../../rst/dev_guide/platforms/aws_guidelines.rst:334
msgid "If you need to perform an action based on the error boto3 returned, use the error code."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:306
msgid "using fail_json() and avoiding ansible.module_utils.aws.core"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:308
msgid "Boto3 provides lots of useful information when an exception is thrown so pass this to the user along with the message."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:331
msgid "Note: we use `str(e)` rather than `e.message` as the latter doesn't work with python3"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:354
msgid "API throttling (rate limiting) and pagination"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:356
msgid "For methods that return a lot of results, boto3 often provides `paginators <https://boto3.readthedocs.io/en/latest/guide/paginators.html>`_. If the method you're calling has ``NextToken`` or ``Marker`` parameters, you should probably check whether a paginator exists (the top of each boto3 service reference page has a link to Paginators, if the service has any). To use paginators, obtain a paginator object, call ``paginator.paginate`` with the appropriate arguments and then call ``build_full_result``."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:363
msgid "Any time that you are calling the AWS API a lot, you may experience API throttling, and there is an ``AWSRetry`` decorator that can be used to ensure backoff. Because exception handling could interfere with the retry working properly (as AWSRetry needs to catch throttling exceptions to work correctly), you'd need to provide a backoff function and then put exception handling around the backoff function."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:369
msgid "You can use ``exponential_backoff`` or ``jittered_backoff`` strategies - see the cloud ``module_utils`` ()/lib/ansible/module_utils/cloud.py) and `AWS Architecture blog <https://www.awsarchitectureblog.com/2015/03/backoff.html>`_ for more details."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:373
msgid "The combination of these two approaches is then:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:390
msgid "If the underlying ``describe_some_resources`` API call throws a ``ResourceNotFound`` exception, ``AWSRetry`` takes this as a cue to retry until it's not thrown (this is so that when creating a resource, we can just retry until it exists)."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:394
msgid "To handle authorization failures or parameter validation errors in ``describe_some_resource_with_backoff``, where we just want to return ``None`` if the resource doesn't exist and not retry, we need:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:420
msgid "To make use of AWSRetry easier, it can now be wrapped around a client returned by ``AnsibleAWSModule``. any call from a client. To add retries to a client, create a client:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:428
msgid "Any calls from that client can be made to use the decorator passed at call-time using the `aws_retry` argument. By default, no retries are used."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:443
msgid "The call will be retried the specified number of times, so the calling functions don't need to be wrapped in the backoff decorator."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:446
msgid "You can also use customization for ``retries``, ``delay`` and ``max_delay`` parameters used by ``AWSRetry.jittered_backoff`` API using module params. You can take a look at the `cloudformation <cloudformation_module>` module for example."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:451
msgid "To make all Amazon modules uniform, prefix the module param with ``backoff_``, so ``retries`` becomes ``backoff_retries``"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:451
msgid "and likewise with ``backoff_delay`` and ``backoff_max_delay``."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:454
msgid "Returning Values"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:456
msgid "When you make a call using boto3, you will probably get back some useful information that you should return in the module.  As well as information related to the call itself, you will also have some response metadata.  It is OK to return this to the user as well as they may find it useful."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:460
msgid "Boto3 returns all values CamelCased.  Ansible follows Python standards for variable names and uses snake_case. There is a helper function in module_utils/ec2.py called `camel_dict_to_snake_dict` that allows you to easily convert the boto3 response to snake_case."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:464
msgid "You should use this helper function and avoid changing the names of values returned by Boto3. E.g. if boto3 returns a value called 'SecretAccessKey' do not change it to 'AccessKey'."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:476
msgid "Dealing with IAM JSON policy"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:478
msgid "If your module accepts IAM JSON policies then set the type to 'json' in the module spec. For example:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:489
msgid "Note that AWS is unlikely to return the policy in the same order that is was submitted. Therefore, use the `compare_policies` helper function which handles this variance."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:492
msgid "`compare_policies` takes two dictionaries, recursively sorts and makes them hashable for comparison and returns True if they are different."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:516
msgid "Dealing with tags"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:518
msgid "AWS has a concept of resource tags. Usually the boto3 API has separate calls for tagging and untagging a resource.  For example, the ec2 API has a create_tags and delete_tags call."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:521
msgid "It is common practice in Ansible AWS modules to have a `purge_tags` parameter that defaults to true."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:524
msgid "The `purge_tags` parameter means that existing tags will be deleted if they are not specified by the Ansible task."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:527
msgid "There is a helper function `compare_aws_tags` to ease dealing with tags. It can compare two dicts and return the tags to set and the tags to delete.  See the Helper function section below for more detail."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:532
msgid "Helper functions"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:534
msgid "Along with the connection functions in Ansible ec2.py module_utils, there are some other useful functions detailed below."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:538
msgid "camel_dict_to_snake_dict"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:540
msgid "boto3 returns results in a dict.  The keys of the dict are in CamelCase format. In keeping with Ansible format, this function will convert the keys to snake_case."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:543
msgid "``camel_dict_to_snake_dict`` takes an optional parameter called ``ignore_list`` which is a list of keys not to convert (this is usually useful for the ``tags`` dict, whose child keys should remain with case preserved)"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:547
msgid "Another optional parameter is ``reversible``. By default, ``HTTPEndpoint`` is converted to ``http_endpoint``, which would then be converted by ``snake_dict_to_camel_dict`` to ``HttpEndpoint``. Passing ``reversible=True`` converts HTTPEndpoint to ``h_t_t_p_endpoint`` which converts back to ``HTTPEndpoint``."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:552
msgid "snake_dict_to_camel_dict"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:554
msgid "`snake_dict_to_camel_dict` converts snake cased keys to camel case. By default, because it was first introduced for ECS purposes, this converts to dromedaryCase. An optional parameter called `capitalize_first`, which defaults to `False`, can be used to convert to CamelCase."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:559
msgid "ansible_dict_to_boto3_filter_list"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:561
msgid "Converts a an Ansible list of filters to a boto3 friendly list of dicts.  This is useful for any boto3 `_facts` modules."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:565
msgid "boto_exception"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:567
msgid "Pass an exception returned from boto or boto3, and this function will consistently get the message from the exception."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:569
msgid "Deprecated: use `AnsibleAWSModule`'s `fail_json_aws` instead."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:573
msgid "boto3_tag_list_to_ansible_dict"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:575
msgid "Converts a boto3 tag list to an Ansible dict. Boto3 returns tags as a list of dicts containing keys called 'Key' and 'Value' by default.  This key names can be overridden when calling the function. For example, if you have already camel_cased your list of tags you may want to pass lowercase key names instead, in other words, 'key' and 'value'."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:580
msgid "This function converts the list in to a single dict where the dict key is the tag key and the dict value is the tag value."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:584
msgid "ansible_dict_to_boto3_tag_list"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:586
msgid "Opposite of above. Converts an Ansible dict to a boto3 tag list of dicts. You can again override the key names used if 'Key' and 'Value' is not suitable."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:590
msgid "get_ec2_security_group_ids_from_names"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:592
msgid "Pass this function a list of security group names or combination of security group names and IDs and this function will return a list of IDs.  You should also pass the VPC ID if known because security group names are not necessarily unique across VPCs."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:597
msgid "compare_policies"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:599
msgid "Pass two dicts of policies to check if there are any meaningful differences and returns true if there are. This recursively sorts the dicts and makes them hashable before comparison."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:602
msgid "This method should be used any time policies are being compared so that a change in order doesn't result in unnecessary changes."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:606
msgid "compare_aws_tags"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:608
msgid "Pass two dicts of tags and an optional purge parameter and this function will return a dict containing key pairs you need to modify and a list of tag key names that you need to remove.  Purge is True by default.  If purge is False then any existing tags will not be modified."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:612
msgid "This function is useful when using boto3 'add_tags' and 'remove_tags' functions. Be sure to use the other helper function `boto3_tag_list_to_ansible_dict` to get an appropriate tag dict before calling this function. Since the AWS APIs are not uniform (for example, EC2 is different from Lambda) this will work without modification for some (Lambda) and others may need modification before using these values (such as EC2, with requires the tags to unset to be in the form `[{'Key': key1}, {'Key': key2}]`)."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:619
msgid "Integration Tests for AWS Modules"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:621
msgid "All new AWS modules should include integration tests to ensure that any changes in AWS APIs that affect the module are detected. At a minimum this should cover the key API calls and check the documented return values are present in the module result."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:625
msgid "For general information on running the integration tests see the :ref:`Integration Tests page of the Module Development Guide <testing_integration>`, especially the section on configuration for cloud tests."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:628
msgid "The integration tests for your module should be added in `test/integration/targets/MODULE_NAME`."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:630
msgid "You must also have a aliases file in `test/integration/targets/MODULE_NAME/aliases`. This file serves two purposes. First indicates it's in an AWS test causing the test framework to make AWS credentials available during the test run. Second putting the test in a test group causing it to be run in the continuous integration build."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:635
msgid "Tests for new modules should be added to the same group as existing AWS tests. In general just copy an existing aliases file such as the `aws_s3 tests aliases file <https://github.com/ansible-collections/amazon.aws/blob/master/tests/integration/targets/aws_s3/aliases>`_."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:639
msgid "AWS Credentials for Integration Tests"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:641
msgid "The testing framework handles running the test with appropriate AWS credentials, these are made available to your test in the following variables:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:644
msgid "`aws_region`"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:645
msgid "`aws_access_key`"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:646
msgid "`aws_secret_key`"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:647
msgid "`security_token`"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:649
msgid "So all invocations of AWS modules in the test should set these parameters. To avoid duplicating these for every call, it's preferable to use :ref:`module_defaults <module_defaults>`. For example:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:673
msgid "AWS Permissions for Integration Tests"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:675
msgid "As explained in the :ref:`Integration Test guide <testing_integration>` there are defined IAM policies in `mattclay/aws-terminator <https://github.com/mattclay/aws-terminator>`_ that contain the necessary permissions to run the AWS integration test."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:679
msgid "If your module interacts with a new service or otherwise requires new permissions, tests will fail when you submit a pull request and the `Ansibullbot <https://github.com/ansible/ansibullbot/blob/master/ISSUE_HELP.md>`_ will tag your PR as needing revision. We do not automatically grant additional permissions to the roles used by the continuous integration builds. You will need to raise a Pull Request against `mattclay/aws-terminator <https://github.com/mattclay/aws-terminator>`_ to add them."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:684
msgid "If your PR has test failures, check carefully to be certain the failure is only due to the missing permissions. If you've ruled out other sources of failure, add a comment with the `ready_for_review` tag and explain that it's due to missing permissions."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:687
msgid "Your pull request cannot be merged until the tests are passing. If your pull request is failing due to missing permissions, you must collect the minimum IAM permissions required to run the tests."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:691
msgid "There are two ways to figure out which IAM permissions you need for your PR to pass:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:693
msgid "Start with the most permissive IAM policy, run the tests to collect information about which resources your tests actually use, then construct a policy based on that output. This approach only works on modules that use `AnsibleAWSModule`."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:694
msgid "Start with the least permissive IAM policy, run the tests to discover a failure, add permissions for the resource that addresses that failure, then repeat. If your module uses `AnsibleModule` instead of `AnsibleAWSModule`, you must use this approach."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:696
msgid "To start with the most permissive IAM policy:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:698
msgid "`Create an IAM policy <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_create.html#access_policies_create-start>`_ that allows all actions (set ``Action`` and ``Resource`` to ``*```)."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:699
msgid "Run your tests locally with this policy. On AnsibleAWSModule-based modules, the ``debug_botocore_endpoint_logs`` option is automatically set to ``yes``, so you should see a list of AWS ACTIONS after the PLAY RECAP showing all the permissions used. If your tests use a boto/AnsibleModule module, you must start with the least permissive policy (see below)."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:700
msgid "Modify your policy to allow only the actions your tests use. Restrict account, region, and prefix where possible. Wait a few minutes for your policy to update."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:701
msgid "Run the tests again with a user or role that allows only the new policy."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:702
msgid "If the tests fail, troubleshoot (see tips below), modify the policy, run the tests again, and repeat the process until the tests pass with a restrictive policy."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:703
#: ../../rst/dev_guide/platforms/aws_guidelines.rst:720
msgid "Open a pull request proposing the minimum required policy to the `CI policies <https://github.com/mattclay/aws-terminator/tree/master/aws/policy>`_."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:705
msgid "To start from the least permissive IAM policy:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:707
msgid "Run the integration tests locally with no IAM permissions."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:715
msgid "Examine the error when the tests reach a failure."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:709
msgid "If the error message indicates the action used in the request, add the action to your policy."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:711
msgid "If the error message does not indicate the action used in the request:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:711
msgid "Usually the action is a CamelCase version of the method name - for example, for an ec2 client the method `describe_security_groups` correlates to the action `ec2:DescribeSecurityGroups`."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:712
msgid "Refer to the documentation to identify the action."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:713
msgid "If the error message indicates the resource ARN used in the request, limit the action to that resource."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:715
msgid "If the error message does not indicate the resource ARN used:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:715
msgid "Determine if the action can be restricted to a resource by examining the documentation."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:716
msgid "If the action can be restricted, use the documentation to construct the ARN and add it to the policy."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:717
msgid "Add the action or resource that caused the failure to `an IAM policy <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_create.html#access_policies_create-start>`_. Wait a few minutes for your policy to update."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:718
msgid "Run the tests again with this policy attached to your user or role."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:719
msgid "If the tests still fail at the same place with the same error you will need to troubleshoot (see tips below). If the first test passes, repeat steps 2 and 3 for the next error. Repeat the process until the tests pass with a restrictive policy."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:723
msgid "Troubleshooting IAM policies"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:725
msgid "When you make changes to a policy, wait a few minutes for the policy to update before re-running the tests."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:726
msgid "Use the `policy simulator <https://policysim.aws.amazon.com/>`_ to verify that each action (limited by resource when applicable) in your policy is allowed."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:727
msgid "If you're restricting actions to certain resources, replace resources temporarily with `*`. If the tests pass with wildcard resources, there is a problem with the resource definition in your policy."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:728
msgid "If the initial troubleshooting above doesn't provide any more insight, AWS may be using additional undisclosed resources and actions."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:729
msgid "Examine the AWS FullAccess policy for the service for clues."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:730
msgid "Re-read the AWS documentation, especially the list of `Actions, Resources and Condition Keys <https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html>`_ for the various AWS services."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:731
msgid "Look at the `cloudonaut <https://iam.cloudonaut.io>`_ documentation as a troubleshooting cross-reference."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:732
msgid "Use a search engine."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:733
msgid "Ask in the Ansible IRC channel #ansible-aws (on freenode IRC)."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:736
msgid "Unsupported Integration tests"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:738
msgid "There are a limited number of reasons why it may not be practical to run integration tests for a module within CI.  Where these apply you should add the keyword `unsupported` to the aliases file in `test/integration/targets/MODULE_NAME/aliases`."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:742
msgid "Some cases where tests should be marked as unsupported: 1) The tests take longer than 10 or 15 minutes to complete 2) The tests create expensive resources 3) The tests create inline policies 4) The tests require the existence of external resources 5) The tests manage Account level security policies such as the password policy or AWS Organizations."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:749
msgid "Where one of these reasons apply you should open a pull request proposing the minimum required policy to the `unsupported test policies <https://github.com/mattclay/aws-terminator/tree/master/hacking/aws_config/test_policies>`_."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:752
msgid "Unsupported integration tests will not be automatically run by CI.  However, the necessary policies should be available so that the tests can be manually run by someone performing a PR review or writing a patch."
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:4
msgid "OpenStack Ansible Modules"
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:6
msgid "The OpenStack collection (on `Galaxy <https://galaxy.ansible.com/openstack/cloud>`_, source code `repository <https://opendev.org/openstack/ansible-collections-openstack.git>`_) contains modules for interacting with OpenStack as either an admin or an end user. If the module does not begin with ``os_``, it is either deprecated or soon to be deprecated. This document serves as developer coding guidelines for modules in this collection."
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:12
#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:12
#: ../../rst/dev_guide/testing_validate-modules.rst:93
#: ../../rst/dev_guide/testing_validate-modules.rst:96
#: ../../rst/dev_guide/testing_validate-modules.rst:108
#: ../../rst/dev_guide/testing_validate-modules.rst:135
msgid "Naming"
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:14
msgid "All module names should start with ``os_``"
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:15
msgid "Name any module that a cloud consumer would expect to use after the logical resource it manages: ``os_server`` not ``os_nova``. This naming convention acknowledges that the end user does not care which service manages the resource - that is a deployment detail. For example cloud consumers may not know whether their floating IPs are managed by Nova or Neutron."
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:16
msgid "Name any module that a cloud admin would expect to use with the service and the resource: ``os_keystone_domain``."
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:17
msgid "If the module is one that a cloud admin and a cloud consumer could both use, the cloud consumer rules apply."
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:21
#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:21
msgid "Interface"
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:23
msgid "If the resource being managed has an id, it should be returned."
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:24
msgid "If the resource being managed has an associated object more complex than an id, it should also be returned."
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:28
#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:31
msgid "Interoperability"
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:30
msgid "It should be assumed that the cloud consumer does not know a bazillion details about the deployment choices their cloud provider made, and a best effort should be made to present one sane interface to the Ansible user regardless of deployer insanity."
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:34
msgid "All modules should work appropriately against all existing known public OpenStack clouds."
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:36
msgid "It should be assumed that a user may have more than one cloud account that they wish to combine as part of a single Ansible-managed infrastructure."
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:40
#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:37
msgid "Libraries"
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:42
msgid "All modules should use ``openstack_full_argument_spec`` to pick up the standard input such as auth and ssl support."
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:44
msgid "All modules should include ``extends_documentation_fragment: openstack``."
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:45
msgid "All complex cloud interaction or interoperability code should be housed in the `openstacksdk <https://git.openstack.org/cgit/openstack/openstacksdk>`_ library."
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:48
msgid "All OpenStack API interactions should happen via the openstacksdk and not via OpenStack Client libraries. The OpenStack Client libraries do no have end users as a primary audience, they are for intra-server communication."
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:53
#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:213
msgid "Testing"
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:55
msgid "Integration testing is currently done in `OpenStack's CI system <https://git.openstack.org/cgit/openstack/openstacksdk/tree/openstack/tests/ansible>`_"
msgstr ""

#: ../../rst/dev_guide/platforms/openstack_guidelines.rst:56
msgid "Testing in openstacksdk produces an obvious chicken-and-egg scenario. Work is under way to trigger from and report on PRs directly."
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:4
msgid "oVirt Ansible Modules"
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:6
msgid "The set of modules for interacting with oVirt/RHV are currently part of the community.general collection (on `Galaxy <https://galaxy.ansible.com/community/general>`_, source code `repository <https://github.com/ansible-collections/community.general/tree/main/plugins/modules/cloud/ovirt>`_). This document serves as developer coding guidelines for creating oVirt/RHV modules."
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:14
msgid "All modules should start with an ``ovirt_`` prefix."
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:15
msgid "All modules should be named after the resource it manages in singular form."
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:17
msgid "All modules that gather information should have a ``_info`` suffix."
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:23
msgid "Every module should return the ID of the resource it manages."
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:24
msgid "Every module should return the dictionary of the resource it manages."
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:25
msgid "Never change the name of the parameter, as we guarantee backward compatibility. Use aliases instead."
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:27
msgid "If a parameter can't achieve idempotency for any reason, please document it."
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:33
msgid "All modules should work against all minor versions of version 4 of the API. Version 3 of the API is not supported."
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:39
msgid "All modules should use ``ovirt_full_argument_spec`` or ``ovirt_info_full_argument_spec`` to pick up the standard input (such as auth and ``fetch_nested``)."
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:42
msgid "All modules should use ``extends_documentation_fragment``: ovirt to go along with ``ovirt_full_argument_spec``."
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:44
msgid "All info modules should use ``extends_documentation_fragment``: ``ovirt_info`` to go along with ``ovirt_info_full_argument_spec``."
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:46
msgid "Functions that are common to all modules should be implemented in the ``module_utils/ovirt.py`` file, so they can be reused."
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:48
msgid "Python SDK version 4 must be used."
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:51
msgid "New module development"
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:53
msgid "Please read :ref:`developing_modules`, first to know what common properties, functions and features every module must have."
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:57
msgid "In order to achieve idempotency of oVirt entity attributes, a helper class was created. The first thing you need to do is to extend this class and override a few methods:"
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:99
msgid "The code above handle the check if the entity should be updated, so we don't update the entity if not needed and also it construct the needed entity of the SDK."
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:176
msgid "If your module must support action handling (for example, virtual machine start) you must ensure that you handle the states of the virtual machine correctly, and document the behavior of the module:"
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:204
msgid "As you can see from the preceding example, the ``action`` method accepts the ``action_condition`` and ``wait_condition``, which are methods which accept the virtual machine object as a parameter, so you can check whether the virtual machine is in a proper state before the action. The rest of the parameters are for the ``start`` action. You may also handle pre- or post- action tasks by defining ``pre_action`` and ``post_action`` parameters."
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:215
msgid "Integration testing is currently done in oVirt's CI system `on Jenkins <https://jenkins.ovirt.org/view/All/job/ovirt-system-tests_ansible-suite-master/>`__ and `on GitHub <https://github.com/oVirt/ovirt-system-tests/tree/master/ansible-suite-master/>`__."
msgstr ""

#: ../../rst/dev_guide/platforms/ovirt_dev_guide.rst:219
msgid "Please consider using these integration tests if you create a new module or add a new feature to an existing module."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:5
msgid "Guidelines for VMware module development"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:7
msgid "The Ansible VMware collection (on `Galaxy <https://galaxy.ansible.com/community/vmware>`_, source code `repository <https://github.com/ansible-collections/community.vmware>`_) is maintained by the VMware Working Group. For more information see the `team community page <https://github.com/ansible/community/wiki/VMware>`_."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:13
msgid "Testing with govcsim"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:15
msgid "Most of the existing modules are covered by functional tests. The tests are located `here <https://github.com/ansible-collections/community.vmware/tree/main/tests/integration/targets>`_."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:17
msgid "By default, the tests run against a vCenter API simulator called `govcsim <https://github.com/vmware/govmomi/tree/master/vcsim>`_. ``ansible-test`` will automatically pull a `govcsim container <https://quay.io/repository/ansible/vcenter-test-container>`_ and use it to set-up the test environment."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:19
msgid "You can trigger the test of a module manually with the ``ansible-test`` command. For example, to trigger ``vcenter_folder`` tests:"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:26
msgid "``govcsim`` is handy because it is much faster than a regular test environment. However, ``govcsim`` does not support all the ESXi or vCenter features."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:31
msgid "Do not confuse ``govcsim`` with ``vcsim``. ``vcsim`` is an older and outdated version of vCenter simulator, whereas ``govcsim`` is new and written in Go language."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:34
msgid "Testing with your own infrastructure"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:36
msgid "You can also target a regular VMware environment. This paragraph explains step by step how you can run the test-suite yourself."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:39
#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:23
#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:37
#: ../../rst/dev_guide/testing_running_locally.rst:18
msgid "Requirements"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:41
msgid "2 ESXi hosts (6.5 or 6.7)"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:42
msgid "with 2 NIC, the second ones should be available for the test"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:43
msgid "a VCSA host"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:44
msgid "a NFS server"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:47
msgid "Python dependencies:"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:46
msgid "`pyvmomi <https://github.com/vmware/pyvmomi/tree/master/pyVmomi>`_"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:47
msgid "`requests <https://2.python-requests.org/en/master/>`_"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:49
msgid "If you want to deploy your test environment in a hypervisor, both `VMware or Libvirt <https://github.com/goneri/vmware-on-libvirt>`_ works well."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:52
msgid "NFS server configuration"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:54
msgid "Your NFS server must expose the following directory structure:"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:67
msgid "On a Linux system, you can expose the directory over NFS with the following export file:"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:76
msgid "With this configuration all the new files will be owned by the user with the UID and GID 1000/1000. Adjust the configuration to match your user's UID/GID."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:79
msgid "The service can be enabled with:"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:87
msgid "Configure your installation"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:89
msgid "Prepare a configuration file that describes your set-up. The file should be called :file:`test/integration/cloud-config-vcenter.ini` and based on :file:`test/lib/ansible_test/config/cloud-config-vcenter.ini.template`. For instance, if you have deployed your lab with `vmware-on-libvirt <https://github.com/goneri/vmware-on-libvirt>`_:"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:109
msgid "Using an HTTP proxy"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:110
msgid "Hosting test infrastructure behind an HTTP proxy is supported. You can specify the location of the proxy server with the two extra keys:"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:117
msgid "In addition, you may need to adjust the variables of the following `var files <https://github.com/ansible-collections/community.vmware/tree/main/tests/integration/targets/prepare_vmware_tests/vars>`_ to match the configuration of your lab. If you use vmware-on-libvirt to prepare your lab, you do not have anything to change."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:120
msgid "Run the test-suite"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:122
msgid "Once your configuration is ready, you can trigger a run with the following command:"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:129
msgid "``vmware_host_firewall_manager`` is the name of the module to test."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:131
msgid "``vmware_guest`` is much larger than any other test role and is rather slow. You can enable or disable some of its test playbooks in `main.yml <https://github.com/ansible-collections/community.vmware/tree/main/tests/integration/targets/vmware_guest/defaults/main.yml>`_."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:135
msgid "Unit-test"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:137
msgid "The VMware modules have limited unit-test coverage. You can run the test suite with the following commands:"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:146
msgid "Code style and best practice"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:149
msgid "datacenter argument with ESXi"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:151
msgid "The ``datacenter`` parameter should not use ``ha-datacenter`` by default. This is because the user may not realize that Ansible silently targets the wrong data center."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:155
msgid "esxi_hostname should not be mandatory"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:157
msgid "Depending upon the functionality provided by ESXi or vCenter, some modules can seamlessly work with both. In this case, ``esxi_hostname`` parameter should be optional."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:173
msgid "Example should use the fully qualified collection name (FQCN)"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:175
msgid "Use FQCN for examples within module documentation. For instance, you should use ``community.vmware.vmware_guest`` instead of just ``vmware_guest``."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:178
msgid "This way, the examples do not depend on the ``collections`` directive of the playbook."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:182
msgid "Functional tests"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:185
msgid "Writing new tests"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:187
msgid "If you are writing a new collection of integration tests, there are a few VMware-specific things to note beyond the standard Ansible :ref:`integration testing<testing_integration>` process."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:190
msgid "The test-suite uses a set of common, pre-defined vars located `in prepare_vmware_tests <https://github.com/ansible-collections/community.vmware/tree/main/tests/integration/targets/test/integration/targets/prepare_vmware_tests/>`_ role. The resources defined there are automatically created by importing that role at the start of your test:"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:200
msgid "This will give you a ready to use cluster, datacenter, datastores, folder, switch, dvswitch, ESXi hosts, and VMs."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:203
msgid "No need to create too much resources"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:205
msgid "Most of the time, it's not necessary to use ``with_items`` to create multiple resources. By avoiding it, you speed up the test execution and you simplify the clean up afterwards."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:209
msgid "VM names should be predictable"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:211
msgid "If you need to create a new VM during your test, you can use ``test_vm1``, ``test_vm2`` or ``test_vm3``. This way it will be automatically clean up for you."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:215
msgid "Avoid the common boiler plate code in your test playbook"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:217
msgid "From Ansible 2.10, the test suite uses `modules_defaults`. This module allow us to preinitialize the following default keys of the VMware modules:"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:220
msgid "hostname"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:221
msgid "username"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:222
msgid "password"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:223
msgid "validate_certs"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:225
msgid "For example, the following block:"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:239
msgid "should be simplified to just:"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:251
msgid "Typographic convention"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:254
msgid "Nomenclature"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:256
msgid "We try to enforce the following rules in our documentation:"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:258
msgid "VMware, not VMWare or vmware"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:259
msgid "ESXi, not esxi or ESXI"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:260
msgid "vCenter, not vcenter or VCenter"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_guidelines.rst:262
msgid "We also refer to vcsim's Go implementation with ``govcsim``. This to avoid any confusion with the outdated implementation."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:5
msgid "Guidelines for VMware REST module development"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:7
msgid "The Ansible VMware REST collection (on `Galaxy <https://galaxy.ansible.com/vmware/vmware_rest>`_, source code `repository <https://github.com/ansible-collections/vmware.vmware_rest>`_) is maintained by Red Hat and the community."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:13
msgid "Contribution process"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:15
msgid "The modules of the vmware_rest collection are autogenerated by another tool called `vmware_rest_code_generator <https://github.com/ansible-collections/vmware_rest_code_generator>`."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:17
msgid "If you would like to contribute a change, we would appreciate if you:"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:19
msgid "submit a Github Pull Request (PR) against the vmware_rest_code_generator project"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:20
msgid "but also ensure the generated modules are compliant with our quality criteria."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:25
msgid "You will need:"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:27
msgid "Python 3.6 or greater"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:28
msgid "the `tox <https://tox.readthedocs.io/en/latest/install.html>` command"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:32
msgid "vmware_rest_code_generator"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:34
msgid "Your contribution should follow the coding style of `Black <https://github.com/psf/black>`. To run the code formatter, just run:"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:41
msgid "To regenerate the vmware_rest collection, you can use the following commands:"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:47
msgid "If you also want to update the EXAMPLE section of the modules, run:"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:54
msgid "Testing with ansible-test"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:56
msgid "All the modules are covered by a functional test. The tests are located in the :file:`tests/integration/targets/`."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:58
msgid "To run the tests, you will need a vcenter instance and an ESXi."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:61
msgid "black code formatter"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:63
msgid "We follow the coding style of `Black <https://github.com/psf/black>`. You can run the code formatter with the following command."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:72
msgid "sanity tests"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:74
msgid "Here we use Python 3.8, the minimal version is 3.6."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:83
msgid "integration tests"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:85
msgid "These tests should be run against your test environment."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:87
msgid "..warning:: The test suite will delete all the existing DC from your test environment."
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:89
msgid "First, prepare a configuration file, we call it :file:`/tmp/inventory-vmware_rest` in this example:"
msgstr ""

#: ../../rst/dev_guide/platforms/vmware_rest_guidelines.rst:106
msgid "To run the tests, use the following command. You may want to adjust the Python version."
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:4
msgid "Basic rules"
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:9
msgid "Use standard American English"
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:10
msgid "Ansible uses Standard American English. Watch for common words that are spelled differently in American English (color vs colour, organize vs organise, and so on)."
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:13
msgid "Write for a global audience"
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:14
msgid "Everything you say should be understandable by people of different backgrounds and cultures. Avoid idioms and regionalism and maintain a neutral tone that cannot be misinterpreted. Avoid attempts at humor."
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:17
msgid "Follow naming conventions"
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:18
msgid "Always follow naming conventions and trademarks."
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:23
msgid "Use clear sentence structure"
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:24
msgid "Clear sentence structure means:"
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:26
msgid "Start with the important information first."
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:27
msgid "Avoid padding/adding extra words that make the sentence harder to understand."
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:28
msgid "Keep it short - Longer sentences are harder to understand."
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:30
msgid "Some examples of improving sentences:"
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:33
#: ../../rst/dev_guide/style_guide/basic_rules.rst:39
msgid "Bad:"
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:33
msgid "The unwise walking about upon the area near the cliff edge may result in a dangerous fall and therefore it is recommended that one remains a safe distance to maintain personal safety."
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:36
#: ../../rst/dev_guide/style_guide/basic_rules.rst:42
msgid "Better:"
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:36
msgid "Danger! Stay away from the cliff."
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:39
msgid "Furthermore, large volumes of water are also required for the process of extraction."
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:42
msgid "Extraction also requires large volumes of water."
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:45
msgid "Avoid verbosity"
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:46
msgid "Write short, succinct sentences. Avoid terms like:"
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:48
msgid "\"...as has been said before,\""
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:49
msgid "\"..each and every,\""
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:50
msgid "\"...point in time,\""
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:51
msgid "\"...in order to,\""
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:54
msgid "Highlight menu items and commands"
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:55
msgid "When documenting menus or commands, it helps to **bold** what is important."
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:57
msgid "For menu procedures, bold the menu names, button names, and so on to help the user find them on the GUI:"
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:59
msgid "On the **File** menu, click **Open**."
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:60
msgid "Type a name in the **User Name** field."
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:61
msgid "In the **Open** dialog box, click **Save**."
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:62
msgid "On the toolbar, click the **Open File** icon."
msgstr ""

#: ../../rst/dev_guide/style_guide/basic_rules.rst:64
msgid "For code or command snippets, use the RST `code-block directive <https://www.sphinx-doc.org/en/1.5/markup/code.html#directive-code-block>`_::"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:3
msgid "Grammar and Punctuation"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:6
msgid "Common Styles and Usage, and Common Mistakes"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:9
#: ../../rst/dev_guide/testing/sanity/ignores.rst:50
msgid "Ansible"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:10
msgid "Write \"Ansible.\" Not \"Ansible, Inc.\" or \"AnsibleWorks The only exceptions to this rule are when we're writing legal or financial statements."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:12
msgid "Never use the logotype by itself in body text. Always keep the same font you are using the rest of the sentence."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:14
msgid "A company is singular in the US. In other words, Ansible is an \"it,\" not a \"they.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:18
msgid "Capitalization"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:19
msgid "If it's not a real product, service, or department at Ansible, don't capitalize it. Not even if it seems important. Capitalize only the first letter of the first word in headlines."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:22
msgid "Colon"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:23
msgid "A colon is generally used before a list or series: - The Triangle Area consists of three cities: Raleigh, Durham, and Chapel Hill."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:26
msgid "But not if the list is a complement or object of an element in the sentence: - Before going on vacation, be sure to (1) set the alarm, (2) cancel the newspaper, and (3) ask a neighbor to collect your mail."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:29
msgid "Use a colon after \"as follows\" and \"the following\" if the related list comes immediately after: wedge The steps for changing directories are as follows:"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:32
msgid "Open a terminal."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:33
msgid "Type cd..."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:35
msgid "Use a colon to introduce a bullet list (or dash, or icon/symbol of your choice):"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:37
msgid "In the Properties dialog box, you'll find the following entries:"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:39
msgid "Connection name"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:40
msgid "Count"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:41
msgid "Cost per item"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:45
msgid "Commas"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:46
msgid "Use serial commas, the comma before the \"and\" in a series of three or more items:"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:48
msgid "\"Item 1, item 2, and item 3.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:51
msgid "It's easier to read that way and helps avoid confusion. The primary exception to this you will see is in PR, where it is traditional not to use serial commas because it is often the style of journalists."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:53
msgid "Commas are always important, considering the vast difference in meanings of the following two statements."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:55
msgid "Let's eat, Grandma"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:56
msgid "Let's eat Grandma."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:58
msgid "Correct punctuation could save Grandma's life."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:60
msgid "If that does not convince you, maybe this will:"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:66
msgid "Contractions"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:67
msgid "Do not use contractions in Ansible documents."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:70
msgid "Em dashes"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:71
msgid "When possible, use em-dashes with no space on either side. When full em-dashes aren't available, use double-dashes with no spaces on either side--like this."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:73
msgid "A pair of em dashes can be used in place of commas to enhance readability. Note, however, that dashes are always more emphatic than commas."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:75
msgid "A pair of em dashes can replace a pair of parentheses. Dashes are considered less formal than parentheses; they are also more intrusive. If you want to draw attention to the parenthetical content, use dashes. If you want to include the parenthetical content more subtly, use parentheses."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:78
msgid "When dashes are used in place of parentheses, surrounding punctuation should be omitted. Compare the following examples."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:87
msgid "When used in place of parentheses at the end of a sentence, only a single dash is used."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:97
msgid "Exclamation points (!)"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:98
msgid "Do not use them at the end of sentences. An exclamation point can be used when referring to a command, such as the bang (!) command."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:101
msgid "Gender References"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:102
msgid "Do not use gender-specific pronouns in documentation. It is far less awkward to read a sentence that uses \"they\" and \"their\" rather than \"he/she\" and \"his/hers.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:104
msgid "It is fine to use \"you\" when giving instructions and \"the user,\" \"new users,\" and so on. in more general explanations."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:106
msgid "Never use \"one\" in place of \"you\" when writing technical documentation. Using \"one\" is far too formal."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:108
msgid "Never use \"we\" when writing. \"We\" aren't doing anything on the user side. Ansible's products are doing the work as requested by the user."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:112
msgid "Hyphen"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:113
msgid "The hyphen's primary function is the formation of certain compound terms. Do not use a hyphen unless it serves a purpose. If a compound adjective cannot be misread or, as with many psychological terms, its meaning is established, a hyphen is not necessary."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:115
msgid "Use hyphens to avoid ambiguity or confusion:"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:135
msgid "In professionally printed material (particularly books, magazines, and newspapers), the hyphen is used to divide words between the end of one line and the beginning of the next. This allows for an evenly aligned right margin without highly variable (and distracting) word spacing."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:139
msgid "Lists"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:140
msgid "Keep the structure of bulleted lists equivalent and consistent. If one bullet is a verb phrase, they should all be verb phrases. If one is a complete sentence, they should all be complete sentences, and so on."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:142
msgid "Capitalize the first word of each bullet. Unless it is obvious that it is just a list of items, such as a list of items like: * computer * monitor * keyboard * mouse"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:148
msgid "When the bulleted list appears within the context of other copy, (unless it's a straight list like the previous example) add periods, even if the bullets are sentence fragments. Part of the reason behind this is that each bullet is said to complete the original sentence."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:150
msgid "In some cases where the bullets are appearing independently, such as in a poster or a homepage promotion, they do not need periods."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:152
msgid "When giving instructional steps, use numbered lists instead of bulleted lists."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:156
msgid "Months and States"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:157
msgid "Abbreviate months and states according to AP. Months are only abbreviated if they are used in conjunction with a day. Example: \"The President visited in January 1999.\" or \"The President visited Jan. 12.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:159
msgid "Months: Jan., Feb., March, April, May, June, July, Aug., Sept., Nov., Dec."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:161
msgid "States: Ala., Ariz., Ark., Calif., Colo., Conn., Del., Fla., Ga., Ill., Ind., Kan., Ky., La., Md., Mass., Mich., Minn., Miss., Mo., Mont., Neb., Nev., NH, NJ, NM, NY, NC, ND, Okla., Ore., Pa., RI, SC, SD, Tenn., Vt., Va., Wash., W.Va., Wis., Wyo."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:164
msgid "Numbers"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:165
msgid "Numbers between one and nine are written out. 10 and above are numerals. The exception to this is writing \"4 million\" or \"4 GB.\" It's also acceptable to use numerals in tables and charts."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:168
msgid "Phone Numbers"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:170
msgid "Phone number style: 1 (919) 555-0123 x002 and 1 888-GOTTEXT"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:174
msgid "Quotations (Using Quotation Marks and Writing Quotes)"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:175
msgid "\"Place the punctuation inside the quotes,\" the editor said."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:177
msgid "Except in rare instances, use only \"said\" or \"says\" because anything else just gets in the way of the quote itself, and also tends to editorialize."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:180
msgid "Place the name first right after the quote:"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:180
msgid "\"I like to write first-person because I like to become the character I'm writing,\" Wally Lamb said."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:184
msgid "Not:"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:183
msgid "\"I like to write first-person because I like to become the character I'm writing,\" said Wally Lamb."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:187
msgid "Semicolon"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:188
msgid "Use a semicolon to separate items in a series if the items contain commas:"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:190
msgid "Everyday I have coffee, toast, and fruit for breakfast; a salad for lunch; and a peanut butter sandwich, cookies, ice cream, and chocolate cake for dinner."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:192
msgid "Use a semicolon before a conjunctive adverb (however, therefore, otherwise, namely, for example, and so on): - I think; therefore, I am."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:196
msgid "Spacing after sentences"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:197
msgid "Use only a single space after a sentence."
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:200
msgid "Time"
msgstr ""

#: ../../rst/dev_guide/style_guide/grammar_punctuation.rst:201
msgid "Time of day is written as \"4 p.m.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:5
msgid "Ansible style guide"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:7
msgid "Welcome to the Ansible style guide! To create clear, concise, consistent, useful materials on docs.ansible.com, follow these guidelines:"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:14
msgid "Linguistic guidelines"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:16
msgid "We want the Ansible documentation to be:"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:18
msgid "clear"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:19
msgid "direct"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:20
msgid "conversational"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:21
msgid "easy to translate"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:23
msgid "We want reading the docs to feel like having an experienced, friendly colleague explain how Ansible works."
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:27
msgid "Stylistic cheat-sheet"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:29
msgid "This cheat-sheet illustrates a few rules that help achieve the \"Ansible tone\":"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:32
msgid "Rule"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:32
msgid "Good example"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:32
msgid "Bad example"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:34
msgid "Use active voice"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:34
msgid "You can run a task by"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:34
msgid "A task can be run by"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:36
msgid "Use the present tense"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:36
msgid "This command creates a"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:36
msgid "This command will create a"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:38
msgid "Address the reader"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:38
msgid "As you expand your inventory"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:38
msgid "When the number of managed nodes grows"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:40
msgid "Use standard English"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:40
msgid "Return to this page"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:40
msgid "Hop back to this page"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:42
msgid "Use American English"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:42
msgid "The color of the output"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:42
msgid "The colour of the output"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:46
msgid "Header case"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:48
msgid "Headers should be written in sentence case. For example, this section's title is ``Header case``, not ``Header Case`` or ``HEADER CASE``."
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:53
msgid "Avoid using Latin phrases"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:55
msgid "Latin words and phrases like ``e.g.`` or ``etc.`` are easily understood by English speakers. They may be harder to understand for others and are also tricky for automated translation."
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:59
msgid "Use the following English terms in place of Latin terms or abbreviations:"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:62
msgid "Latin"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:62
msgid "English"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:64
msgid "i.e"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:64
msgid "in other words"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:66
#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:89
msgid "e.g."
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:66
msgid "for example"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:68
msgid "etc"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:68
msgid "and so on"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:70
msgid "via"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:70
msgid "by/ through"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:72
msgid "vs./versus"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:72
msgid "rather than/against"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:77
msgid "reStructuredText guidelines"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:79
msgid "The Ansible documentation is written in reStructuredText and processed by Sphinx. We follow these technical or mechanical guidelines on all rST pages:"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:83
msgid "Header notation"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:85
msgid "`Section headers in reStructuredText <https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html#sections>`_ can use a variety of notations. Sphinx will 'learn on the fly' when creating a hierarchy of headers. To make our documents easy to read and to edit, we follow a standard set of header notations. We use:"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:91
msgid "``###`` with overline, for parts:"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:99
msgid "``***`` with overline, for chapters:"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:107
msgid "``===`` for sections:"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:114
msgid "``---`` for subsections:"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:121
msgid "``^^^`` for sub-subsections:"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:128
msgid "``\"\"\"`` for paragraphs:"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:137
msgid "Syntax highlighting - Pygments"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:139
msgid "The Ansible documentation supports a range of `Pygments lexers <https://pygments.org/>`_ for `syntax highlighting <https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#code-examples>`_ to make our code examples look good. Each code-block must be correctly indented and surrounded by blank lines."
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:142
msgid "The Ansible documentation allows the following values:"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:144
msgid "none (no highlighting)"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:145
msgid "ansible-output (a custom lexer for Ansible output)"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:146
msgid "bash"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:147
msgid "console"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:148
msgid "csharp"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:149
msgid "ini"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:151
msgid "powershell"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:152
msgid "python"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:153
msgid "rst"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:154
msgid "sh"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:155
msgid "shell"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:156
msgid "shell-session"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:157
msgid "text"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:158
msgid "yaml"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:159
msgid "yaml+jinja"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:161
msgid "For example, you can highlight Python code using following syntax:"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:171
msgid "Internal navigation"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:173
msgid "`Anchors (also called labels) and links <https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#ref-role>`_ work together to help users find related content. Local tables of contents also help users navigate quickly to the information they need. All internal links should use the ``:ref:`` syntax. Every page should have at least one anchor to support internal ``:ref:`` links. Long pages, or pages with multiple levels of headers, can also include a local TOC."
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:183
msgid "Adding anchors"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:185
msgid "Include at least one anchor on every page"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:186
msgid "Place the main anchor above the main header"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:187
msgid "If the file has a unique title, use that for the main page anchor::"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:191
msgid "You may also add anchors elsewhere on the page"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:194
msgid "Adding internal links"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:196
msgid "All internal links must use ``:ref:`` syntax. These links both point to the anchor defined above:"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:203
msgid "The second example adds custom text for the link."
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:206
msgid "Adding links to modules and plugins"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:208
msgid "Ansible 2.10 and later require the extended Fully Qualified Collection Name (FQCN) as part of the links:"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:214
msgid "For example:"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:220
msgid "displays as :ref:`ansible.builtin.first_found lookup plugin <ansible_collections.ansible.builtin.first_found_lookup>`."
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:222
msgid "Modules require different suffixes from other plugins:"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:224
msgid "Module links use this extended FQCN module name with ``_module`` for the anchor."
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:225
msgid "Plugin links use this extended FQCN plugin name with the plugin type (``_connection`` for example)."
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:234
msgid "``ansible.builtin`` is the FQCN for modules included in ``ansible.base``. Documentation links are the only place you prepend ``ansible_collections`` to the FQCN. This is used by the documentation build scripts to correctly fetch documentation from collections on Ansible Galaxy."
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:239
msgid "Adding local TOCs"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:241
msgid "The page you're reading includes a `local TOC <https://docutils.sourceforge.io/docs/ref/rst/directives.html#table-of-contents>`_. If you include a local TOC:"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:244
msgid "place it below, not above, the main heading and (optionally) introductory text"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:245
msgid "use the ``:local:`` directive so the page's main header is not included"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:246
msgid "do not include a title"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:248
msgid "The syntax is:"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:256
msgid "More resources"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:258
msgid "These pages offer more help with grammatical, stylistic, and technical rules for documentation."
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:273
msgid ":ref:`community_documentation_contributions`"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:274
msgid "How to contribute to the Ansible documentation"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:275
msgid ":ref:`testing_documentation_locally`"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:276
msgid "How to build the Ansible documentation"
msgstr ""

#: ../../rst/dev_guide/style_guide/index.rst:278
msgid "#ansible-docs IRC chat channel"
msgstr ""

#: ../../rst/dev_guide/style_guide/resources.rst:2
msgid "Resources"
msgstr ""

#: ../../rst/dev_guide/style_guide/resources.rst:3
msgid "Follow the style of the :ref:`Ansible Documentation<ansible_documentation>`"
msgstr ""

#: ../../rst/dev_guide/style_guide/resources.rst:4
msgid "Ask for advice on IRC, on the ``#ansible-devel`` Freenode channel"
msgstr ""

#: ../../rst/dev_guide/style_guide/resources.rst:5
msgid "Review these online style guides:"
msgstr ""

#: ../../rst/dev_guide/style_guide/resources.rst:7
msgid "`AP Stylebook <https://www.apstylebook.com>`_"
msgstr ""

#: ../../rst/dev_guide/style_guide/resources.rst:8
msgid "`Chicago Manual of Style <https://www.chicagomanualofstyle.org/home.html>`_"
msgstr ""

#: ../../rst/dev_guide/style_guide/resources.rst:9
msgid "`Strunk and White's Elements of Style <https://www.crockford.com/wrrrld/style.html>`_"
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:5
msgid "Writing documentation so search can find it"
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:7
msgid "One of the keys to writing good documentation is to make it findable. Readers use a combination of internal site search and external search engines such as Google or duckduckgo."
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:9
msgid "To ensure Ansible documentation is findable, you should:"
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:11
msgid "Use headings that clearly reflect what you are documenting."
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:12
msgid "Use numbered lists for procedures or high-level steps where possible."
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:13
msgid "Avoid linking to github blobs where possible."
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:17
msgid "Using clear headings in documentation"
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:19
msgid "We all use simple English when we want to find something. For example, the title of this page could have been any one of the following:"
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:21
msgid "Search optimization"
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:22
msgid "Findable documentation"
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:23
msgid "Writing for findability"
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:25
msgid "What we are really trying to describe is - how do I write documentation so search engines can find my content? That simple phrase is what drove the title of this section. When you are creating your headings for documentation, spend some time to think about what you would type in a search box to find it, or more importantly, how someone less familiar with Ansible would try to find that information. Your heading should be the answer to that question."
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:27
msgid "One word of caution - you do want to limit the size of your headings. A full heading such as `How do I write documentation so search engines can find my content?` is too long. Search engines would truncate anything over 50 - 60 characters. Long headings would also wrap on smaller devices such as a smart phone."
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:30
msgid "Using numbered lists for `zero position` snippets"
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:32
msgid "Google can optimize the search results by adding a `feature snippet <https://support.google.com/websearch/answer/9351707>`_ at the top of the search results. This snippet provides a small window into the documentation on that first search result that adds more detail than the rest of the search results, and can occasionally answer the reader's questions right there, or at least verify that the linked page is what the reader is looking for."
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:34
msgid "Google returns the feature snippet in the form of numbered steps. Where possible, you should add a numbered list near the top of your documentation page, where appropriate. The steps can be the exact procedure a reader would follow, or could be a high level introduction to the documentation topic, such as the numbered list at the top of this page."
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:37
msgid "Problems with github blobs on search results"
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:39
msgid "Search engines do not typically return github blobs in search results, at least not in higher ranked positions. While it is possible and sometimes necessary to link to github blobs from documentation, the better approach would be to copy that information into an .rst page in Ansible documentation."
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:42
msgid "Other search hints"
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:44
msgid "While it may not be possible to adapt your documentation to all search optimizations, keep the following in mind as you write your documentation:"
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:46
msgid "**Search engines don't parse beyond the `#` in an html page.** So for example, all the subheadings on this page are appended to the main page URL. As such, when I search for 'Using number lists for zero position snippets', the search result would be a link to the top of this page, not a link directly to the subheading I searched for. Using :ref:`local TOCs <local_toc>` helps alleviate this problem as the reader can scan for the header at top of the page and click to the section they are looking for. For critical documentation, consider creating a new page that can be a direct search result page."
msgstr ""

#: ../../rst/dev_guide/style_guide/search_hints.rst:48
msgid "**Make your first few sentences clearly describe your page topic.** Search engines return not just the URL, but a short description of the information at the URL. For Ansible documentation, we do not have description metadata embedded on each page. Instead, the search engines return the first couple of sentences (140 characters) on the page. That makes your first sentence or two very important to the reader who is searching for something in Ansible."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:2
msgid "Spelling - Word Usage - Common Words and Phrases to Use and Avoid"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:5
msgid "Acronyms"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:7
msgid "Always uppercase. An acronym is a word formed from the initial letters of a name, such as ROM for Read-only memory, SaaS for Software as a Service, or by combining initial letters or part of a series of words, such as LILO for LInux LOader."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:11
msgid "Spell out the acronym before using it in alone text, such as \"The Embedded DevKit (EDK)...\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:14
msgid "Applications"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:15
msgid "When used as a proper name, use the capitalization of the product, such as GNUPro, Source-Navigator, and Ansible Tower. When used as a command, use lowercase as appropriate, such as \"To start GCC, type ``gcc``.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:19
msgid "\"vi\" is always lowercase."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:22
msgid "As"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:23
msgid "This is often used to mean \"because\", but has other connotations, for example, parallel or simultaneous actions. If you mean \"because\", say \"because\"."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:26
msgid "Asks for"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:27
msgid "Use \"requests\" instead."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:30
msgid "Assure/Ensure/Insure"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:31
msgid "Assure implies a sort of mental comfort. As in \"I assured my husband that I would eventually bring home beer.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:33
msgid "Ensure means \"to make sure.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:35
msgid "Insure relates to monetary insurance."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:39
msgid "Back up"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:40
msgid "This is a verb. You \"back up\" files; you do not \"backup\" files."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:43
msgid "Backup"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:44
msgid "This is a noun. You create \"backup\" files; you do not create \"back up\" files."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:47
msgid "Backward"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:48
msgid "Correct. Avoid using backwards unless you are stating that something has \"backwards compatibility.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:51
msgid "Backwards compatibility"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:52
msgid "Correct as is."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:55
msgid "By way of"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:56
msgid "Use \"using\" instead."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:59
msgid "Can/May"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:60
msgid "Use \"can\" to describe actions or conditions that are possible. Use \"may\" only to describe situations where permission is being given. If either \"can,\" \"could,\" or \"may\" apply, use \"can\" because it's less tentative."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:63
msgid "CD or cd"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:64
msgid "When referring to a compact disk, use CD, such as \"Insert the CD into the CD-ROM drive.\" When referring to the change directory command, use cd."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:67
msgid "CD-ROM"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:68
msgid "Correct. Do not use \"cdrom,\" \"CD-Rom,\" \"CDROM,\" \"cd-rom\" or any other variation. When referring to the drive, use CD-ROM drive, such as \"Insert the CD into the CD-ROM drive.\" The plural is \"CD-ROMs.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:72
msgid "Command line"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:73
msgid "Correct. Do not use \"command-line\" or \"commandline\" as a noun. If used as an adjective, \"command-line\" is appropriate, for example \"command-line arguments\"."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:75
msgid "Use \"command line\" to describes where to place options for a command, but not where to type the command. Use \"shell prompt\" instead to describe where to type commands. The line on the display screen where a command is expected. Generally, the command line is the line that contains the most recently displayed command prompt."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:79
msgid "Daylight saving time (DST)"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:81
msgid "Correct. Do not use daylight savings time. Daylight Saving Time (DST) is often misspelled \"Daylight Savings\", with an \"s\" at the end. Other common variations are \"Summer Time\"and \"Daylight-Saving Time\". (https://www.timeanddate.com/time/dst/daylight-savings-time.html)"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:85
msgid "Download"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:86
msgid "Correct. Do not use \"down load\" or \"down-load.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:90
msgid "Spell it out: \"For example.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:93
msgid "Failover"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:94
msgid "When used as a noun, a failover is a backup operation that automatically switches to a standby database, server or network if the primary system fails or is temporarily shut down for servicing. Failover is an important fault tolerance function of mission-critical systems that rely on constant accessibility. Failover automatically and transparently to the user redirects requests from the failed or down system to the backup system that mimics the operations of the primary system."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:97
msgid "Fail over"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:98
msgid "When used as a verb, fail over is two words since there can be different tenses such as failed over."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:101
msgid "Fewer"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:102
msgid "Fewer is used with plural nouns. Think things you could count.  Time, money, distance, and weight are often listed as exceptions to the traditional \"can you count it\" rule, often thought of a singular amounts (the work will take less than 5 hours, for example)."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:105
msgid "File name"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:106
msgid "Correct. Do not use \"filename.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:109
msgid "File system"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:110
msgid "Correct. Do not use \"filesystem.\" The system that an operating system or program uses to organize and keep track of files. For example, a hierarchical file system is one that uses directories to organize files into a tree structure. Although the operating system provides its own file management system, you can buy separate file management systems. These systems interact smoothly with the operating system but provide more features, such as improved backup procedures and stricter file protection."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:113
msgid "For instance"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:114
msgid "For example,\" instead."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:117
msgid "For further/additional/whatever information"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:118
msgid "Use \"For more information\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:121
msgid "For this reason"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:122
msgid "Use \"therefore\"."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:125
msgid "Forward"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:126
msgid "Correct. Avoid using \"forwards.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:129
msgid "Gigabyte (GB)"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:130
msgid "2 to the 30th power (1,073,741,824) bytes. One gigabyte is equal to 1,024 megabytes. Gigabyte is often abbreviated as G or GB."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:133
msgid "Got"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:134
#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:208
msgid "Avoid. Use \"must\" instead."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:137
msgid "High-availability"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:138
msgid "Correct. Do not use \"high availability.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:141
msgid "Highly available"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:142
msgid "Correct. Do not use highly-available.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:145
msgid "Hostname"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:146
msgid "Correct. Do not use host name."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:149
msgid "i.e."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:150
msgid "Spell it out: \"That is.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:153
msgid "Installer"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:154
msgid "Avoid. Use \"installation program\" instead."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:157
msgid "It's and its"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:158
msgid "\"It's\" is a contraction for \"it is;\" use \"it is\" instead of \"it's.\" Use \"its\" as a possessive pronoun (for example, \"the store is known for its low prices\")."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:161
msgid "Less"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:162
msgid "Less is used with singular nouns. For example \"View less details\" wouldn't be correct but \"View less detail\" works. Use fewer when you have plural nouns (things you can count)."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:165
msgid "Linux"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:166
msgid "Correct. Do not use \"LINUX\" or \"linux\" unless referring to a command, such as \"To start Linux, type linux.\" Linux is a registered trademark of Linus Torvalds."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:169
msgid "Login"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:170
msgid "A noun used to refer to the login prompt, such as \"At the login prompt, enter your username.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:173
msgid "Log in"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:174
msgid "A verb used to refer to the act of logging in. Do not use \"login,\" \"loggin,\" \"logon,\" and other variants. For example, \"When starting your computer, you are requested to log in...\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:177
msgid "Log on"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:178
msgid "To make a computer system or network recognize you so that you can begin a computer session. Most personal computers have no log-on procedure -- you just turn the machine on and begin working. For larger systems and networks, however, you usually need to enter a username and password before the computer system will allow you to execute programs."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:181
msgid "Lots of"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:182
msgid "Use \"Several\" or something equivalent instead."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:185
msgid "Make sure"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:186
msgid "This means \"be careful to remember, attend to, or find out something.\" For example, \"...make sure that the rhedk group is listed in the output.\" Try to use verify or ensure instead."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:190
msgid "Manual/man page"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:191
msgid "Correct. Two words. Do not use \"manpage\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:194
msgid "MB"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:195
msgid "When spelled MB, short for megabyte (1,000,000 or 1,048,576 bytes, depending on the context)."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:196
msgid "When spelled Mb, short for megabit."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:199
msgid "MBps"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:200
msgid "Short for megabytes per second, a measure of data transfer speed. Mass storage devices are generally measured in MBps."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:203
msgid "MySQL"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:204
msgid "Common open source database server and client package. Do not use \"MYSQL\" or \"mySQL.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:207
msgid "Need to"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:211
msgid "Read-only"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:212
msgid "Correct. Use when referring to the access permissions of files or directories."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:215
msgid "Real time/real-time"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:216
msgid "Depends. If used as a noun, it is the actual time during which something takes place. For example, \"The computer may partly analyze the data in real time (as it comes in) -- R. H. March.\" If used as an adjective, \"real-time\" is appropriate. For example, \"XEmacs is a self-documenting, customizable, extensible, real-time display editor.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:219
msgid "Refer to"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:220
msgid "Use to indicate a reference (within a manual or website) or a cross-reference (to another manual or documentation source)."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:223
msgid "See"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:224
msgid "Don't use. Use \"Refer to\" instead."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:227
msgid "Since"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:228
msgid "This is often used to mean \"because\", but \"since\" has connotations of time, so be careful. If you mean \"because\", say \"because\"."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:231
msgid "Tells"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:232
msgid "Use \"Instructs\" instead."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:235
msgid "That/which"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:236
msgid "\"That\" introduces a restrictive clause-a clause that must be there for the sentence to make sense. A restrictive clause often defines the noun or phrase preceding it. \"Which\" introduces a non-restrictive, parenthetical clause-a clause that could be omitted without affecting the meaning of the sentence. For example: The car was travelling at a speed that would endanger lives. The car, which was traveling at a speed that would endanger lives, swerved onto the sidewalk. Use \"who\" or \"whom,\" rather than \"that\" or \"which,\" when referring to a person."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:239
msgid "Then/than"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:240
msgid "\"Then\" refers to a time in the past or the next step in a sequence. \"Than\" is used for comparisons."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:245
msgid "Third-party"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:246
msgid "Correct. Do not use \"third party\"."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:249
msgid "Troubleshoot"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:250
msgid "Correct. Do not use \"trouble shoot\" or \"trouble-shoot.\" To isolate the source of a problem and fix it. In the case of computer systems, the term troubleshoot is usually used when the problem is suspected to be hardware -related. If the problem is known to be in software, the term debug is more commonly used."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:253
msgid "UK"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:254
#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:266
msgid "Correct as is, no periods."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:257
msgid "UNIX®"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:258
msgid "Correct. Do not use \"Unix\" or \"unix.\" UNIX® is a registered trademark of The Open Group."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:261
msgid "Unset"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:262
msgid "Don't use. Use Clear."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:265
msgid "US"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:269
msgid "User"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:270
msgid "When referring to the reader, use \"you\" instead of \"user.\" For example, \"The user must...\" is incorrect. Use \"You must...\" instead. If referring to more than one user, calling the collection \"users\" is acceptable, such as \"Other users may wish to access your database.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:273
msgid "Username"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:274
msgid "Correct. Do not use \"user name.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:277
msgid "View"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:278
msgid "When using as a reference (\"View the documentation available online.\"), do not use View. Use \"Refer to\" instead."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:281
msgid "Within"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:282
msgid "Don't use to refer to a file that exists in a directory. Use \"In\"."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:285
msgid "World Wide Web"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:286
msgid "Correct. Capitalize each word. Abbreviate as \"WWW\" or \"Web.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:289
msgid "Webpage"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:290
msgid "Correct. Do not use \"web page\" or \"Web page.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:293
msgid "Web server"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:294
msgid "Correct. Do not use \"webserver\". For example, \"The Apache HTTP Server is the default Web server...\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:297
msgid "Website"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:298
msgid "Correct. Do not use \"web site\" or \"Web site.\" For example, \"The Ansible website contains ...\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:301
msgid "Who/whom"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:302
msgid "Use the pronoun \"who\" as a subject. Use the pronoun \"whom\" as a direct object, an indirect object, or the object of a preposition. For example: Who owns this? To whom does this belong?"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:305
msgid "Will"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:306
msgid "Do not use future tense unless it is absolutely necessary. For instance, do not use the sentence, \"The next section will describe the process in more detail.\" Instead, use the sentence, \"The next section describes the process in more detail.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:309
msgid "Wish"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:310
msgid "Use \"need\" instead of \"desire\" and \"wish.\" Use \"want\" when the reader's actions are optional (that is, they may not \"need\" something but may still \"want\" something)."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:313
msgid "x86"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:314
msgid "Correct. Do not capitalize the \"x.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:317
msgid "x86_64"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:318
msgid "Do not use. Do not use \"Hammer\". Always use \"AMD64 and Intel® EM64T\" when referring to this architecture."
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:321
msgid "You"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:322
msgid "Correct. Do not use \"I,\" \"he,\" or \"she.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:325
msgid "You may"
msgstr ""

#: ../../rst/dev_guide/style_guide/spelling_word_choice.rst:326
msgid "Try to avoid using this. For example, \"you may\" can be eliminated from this sentence \"You may double-click on the desktop...\""
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:3
msgid "Trademark Usage"
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:4
msgid "Why is it important to use the TM, SM, and ® for our registered marks?"
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:6
msgid "Before a trademark is registered with the United States Patent and Trademark Office it is appropriate to use the TM or SM symbol depending whether the product is for goods or services. It is important to use the TM or SM as it is notification to the public that Ansible claims rights to the mark even though it has not yet been registered."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:8
msgid "Once the trademark is registered, it is appropriate to use the symbol in place of the TM or SM. The symbol designation must be used in conjunction with the trademark if Ansible is to fully protect its rights. If we don't protect these marks, we run the risk of losing them in the way of Aspirin or Trampoline or Escalator."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:11
msgid "General Rules:"
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:13
msgid "Trademarks should be used on 1st references on a page or within a section."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:15
msgid "Use Red Hat® Ansible Tower® or Ansible®, on first reference when referring to products."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:17
msgid "Use \"Ansible\" alone as the company name, as in \"Ansible announced quarterly results,\" which is not marked."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:19
msgid "Also add the trademark disclaimer. * When using Ansible trademarks in the body of written text, you should use the following credit line in a prominent place, usually a footnote."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:22
msgid "For Registered Trademarks: - [Name of Trademark] is a registered trademark of Red Hat, Inc. in the United States and other countries."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:25
msgid "For Unregistered Trademarks (TMs/SMs): - [Name of Trademark] is a trademark of Red Hat, Inc. in the United States and other countries."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:28
msgid "For registered and unregistered trademarks: - [Name of Trademark] is a registered trademark and [Name of Trademark] is a trademark of Red Hat, Inc. in the United States and other countries."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:32
msgid "Guidelines for the proper use of trademarks:"
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:34
msgid "Always distinguish trademarks from surround text with at least initial capital letters or in all capital letters."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:36
msgid "Always use proper trademark form and spelling."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:38
msgid "Never use a trademark as a noun. Always use a trademark as an adjective modifying the noun."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:40
msgid "Correct: Red Hat® Ansible Tower® system performance is incredible."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:43
msgid "Incorrect: Ansible's performance is incredible."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:46
msgid "Never use a trademark as a verb. Trademarks are products or services, never actions."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:48
msgid "Correct: \"Orchestrate your entire network using Red Hat® Ansible Tower®.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:51
msgid "Incorrect: \"Ansible your entire network.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:54
msgid "Never modify a trademark to a plural form. Instead, change the generic word from the singular to the plural."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:56
msgid "Correct: \"Corporate demand for Red Hat® Ansible Tower® configuration software is surging.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:59
msgid "Incorrect: \"Corporate demand for Ansible is surging.\""
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:62
msgid "Never modify a trademark from its possessive form, or make a trademark possessive. Always use it in the form it has been registered."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:64
msgid "Never translate a trademark into another language."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:66
msgid "Never use trademarks to coin new words or names."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:68
msgid "Never use trademarks to create a play on words."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:70
msgid "Never alter a trademark in any way including through unapproved fonts or visual identifiers."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:72
msgid "Never abbreviate or use any Ansible trademarks as an acronym."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:75
msgid "The importance of Ansible trademarks"
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:77
msgid "The Ansible trademark and the \"A\" logo in a shaded circle are our most valuable assets. The value of these trademarks encompass the Ansible Brand. Effective trademark use is more than just a name, it defines the level of quality the customer will receive and it ties a product or service to a corporate image. A trademark may serve as the basis for many of our everyday decisions and choices. The Ansible Brand is about how we treat customers and each other. In order to continue to build a stronger more valuable Brand we must use it in a clear and consistent manner."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:79
msgid "The mark consists of the letter \"A\" in a shaded circle. As of 5/11/15, this was a pending trademark (registration in process)."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:82
msgid "Common Ansible Trademarks"
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:83
msgid "Ansible®"
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:84
msgid "Ansible Tower®"
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:87
msgid "Other Common Trademarks and Resource Sites:"
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:88
msgid "Linux is a registered trademark of Linus Torvalds."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:89
msgid "UNIX® is a registered trademark of The Open Group."
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:90
msgid "Microsoft, Windows, Vista, XP, and NT are registered trademarks or trademarks of Microsoft Corporation in the United States and/or other countries. https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/en-us.aspx"
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:91
msgid "Apple, Mac, Mac OS, Macintosh, Pages and TrueType are either registered trademarks or trademarks of Apple Computer, Inc. in the United States and/or other countries. https://www.apple.com/legal/intellectual-property/trademark/appletmlist.html"
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:92
msgid "Adobe, Acrobat, GoLive, InDesign, Illustrator, PostScript , PhotoShop and the OpenType logo are either registered trademarks or trademarks of Adobe Systems Incorporated in the United States and/or other countries. https://www.adobe.com/legal/permissions/trademarks.html"
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:93
msgid "Macromedia and Macromedia Flash are trademarks of Macromedia, Inc. https://www.adobe.com/legal/permissions/trademarks.html"
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:94
msgid "IBM is a registered trademark of International Business Machines Corporation. https://www.ibm.com/legal/us/en/copytrade.shtml"
msgstr ""

#: ../../rst/dev_guide/style_guide/trademarks.rst:95
msgid "Celeron, Celeron Inside, Centrino, Centrino logo, Core Inside, Intel Core, Intel Inside, Intel Inside logo, Itanium, Itanium Inside, Pentium, Pentium Inside,VTune, Xeon, and Xeon Inside are trademarks or registered trademarks of Intel Corporation or its subsidiaries in the United States and other countries. https://www.intel.com/content/www/us/en/legal/trademarks.html"
msgstr ""

#: ../../rst/dev_guide/style_guide/voice_style.rst:3
msgid "Voice Style"
msgstr ""

#: ../../rst/dev_guide/style_guide/voice_style.rst:4
msgid "The essence of the Ansible writing style is short sentences that flow naturally together. Mix up sentence structures. Vary sentence subjects. Address the reader directly. Ask a question. And when the reader adjusts to the pace of shorter sentences, write a longer one."
msgstr ""

#: ../../rst/dev_guide/style_guide/voice_style.rst:6
msgid "Write how real people speak..."
msgstr ""

#: ../../rst/dev_guide/style_guide/voice_style.rst:7
msgid "...but try to avoid slang and colloquialisms that might not translate well into other languages."
msgstr ""

#: ../../rst/dev_guide/style_guide/voice_style.rst:8
msgid "Say big things with small words."
msgstr ""

#: ../../rst/dev_guide/style_guide/voice_style.rst:9
msgid "Be direct. Tell the reader exactly what you want them to do."
msgstr ""

#: ../../rst/dev_guide/style_guide/voice_style.rst:10
msgid "Be honest."
msgstr ""

#: ../../rst/dev_guide/style_guide/voice_style.rst:11
msgid "Short sentences show confidence."
msgstr ""

#: ../../rst/dev_guide/style_guide/voice_style.rst:12
msgid "Grammar rules are meant to be bent, but only if the reader knows you are doing this."
msgstr ""

#: ../../rst/dev_guide/style_guide/voice_style.rst:13
msgid "Choose words with fewer syllables for faster reading and better understanding."
msgstr ""

#: ../../rst/dev_guide/style_guide/voice_style.rst:14
msgid "Think of copy as one-on-one conversations rather than as a speech. It's more difficult to ignore someone who is speaking to you directly."
msgstr ""

#: ../../rst/dev_guide/style_guide/voice_style.rst:15
msgid "When possible, start task-oriented sentences (those that direct a user to do something) with action words. For example: Find software... Contact support... Install the media.... and so forth."
msgstr ""

#: ../../rst/dev_guide/style_guide/voice_style.rst:18
msgid "Active Voice"
msgstr ""

#: ../../rst/dev_guide/style_guide/voice_style.rst:19
msgid "Use the active voice (\"Start Linuxconf by typing...\") rather than passive (\"Linuxconf can be started by typing...\") whenever possible. Active voice makes for more lively, interesting reading. Also avoid future tense (or using the term \"will\") whenever possible For example, future tense (\"The screen will display...\") does not read as well as an active voice (\"The screen displays\"). Remember, the users you are writing for most often refer to the documentation while they are using the system, not after or in advance of using the system."
msgstr ""

#: ../../rst/dev_guide/style_guide/why_use.rst:4
msgid "Why Use a Style Guide?"
msgstr ""

#: ../../rst/dev_guide/style_guide/why_use.rst:6
msgid "Style guides are important because they ensure consistency in the content, look, and feel of a book or a website."
msgstr ""

#: ../../rst/dev_guide/style_guide/why_use.rst:8
msgid "Remember, a style guide is only useful if it is used, updated, and enforced.  Style Guides are useful for engineering-related documentation, sales and marketing materials, support docs, community contributions, and more."
msgstr ""

#: ../../rst/dev_guide/style_guide/why_use.rst:10
msgid "As changes are made to the overall Ansible site design, be sure to update this style guide with those changes. Or, should other resources listed below have major revisions, consider including company information here for ease of reference."
msgstr ""

#: ../../rst/dev_guide/style_guide/why_use.rst:12
msgid "This style guide incorporates current Ansible resources and information so that overall site and documentation consistency can be met."
msgstr ""

#: ../../rst/dev_guide/testing.rst:5
#: ../../rst/dev_guide/testing_running_locally.rst:7
msgid "Testing Ansible"
msgstr ""

#: ../../rst/dev_guide/testing.rst:12
msgid "Why test your Ansible contributions?"
msgstr ""

#: ../../rst/dev_guide/testing.rst:14
msgid "If you're a developer, one of the most valuable things you can do is to look at GitHub issues and help fix bugs, since bug-fixing is almost always prioritized over feature development.  Even for non-developers, helping to test pull requests for bug fixes and features is still immensely valuable."
msgstr ""

#: ../../rst/dev_guide/testing.rst:16
msgid "Ansible users who understand how to write playbooks and roles should be able to test their work.  GitHub pull requests will automatically run a variety of tests (for example, Shippable) that show bugs in action.  However, contributors must also test their work outside of the automated GitHub checks and show evidence of these tests in the PR to ensure that their work will be more likely to be reviewed and merged."
msgstr ""

#: ../../rst/dev_guide/testing.rst:18
msgid "Read on to learn how Ansible is tested, how to test your contributions locally, and how to extend testing capabilities."
msgstr ""

#: ../../rst/dev_guide/testing.rst:20
msgid "If you want to learn about testing collections, read :ref:`testing_collections`"
msgstr ""

#: ../../rst/dev_guide/testing.rst:25
msgid "Types of tests"
msgstr ""

#: ../../rst/dev_guide/testing.rst:27
msgid "At a high level we have the following classifications of tests:"
msgstr ""

#: ../../rst/dev_guide/testing.rst
#: ../../rst/dev_guide/testing/sanity/compile.rst:2
msgid "compile"
msgstr ""

#: ../../rst/dev_guide/testing.rst:30
msgid ":ref:`testing_compile`"
msgstr ""

#: ../../rst/dev_guide/testing.rst:31
msgid "Test python code against a variety of Python versions."
msgstr ""

#: ../../rst/dev_guide/testing.rst
msgid "sanity"
msgstr ""

#: ../../rst/dev_guide/testing.rst:34
msgid "Sanity tests are made up of scripts and tools used to perform static code analysis."
msgstr ""

#: ../../rst/dev_guide/testing.rst:35
msgid "The primary purpose of these tests is to enforce Ansible coding standards and requirements."
msgstr ""

#: ../../rst/dev_guide/testing.rst
msgid "integration"
msgstr ""

#: ../../rst/dev_guide/testing.rst:38
msgid "Functional tests of modules and Ansible core functionality."
msgstr ""

#: ../../rst/dev_guide/testing.rst
msgid "units"
msgstr ""

#: ../../rst/dev_guide/testing.rst:40
#: ../../rst/dev_guide/testing_units_modules.rst:541
msgid ":ref:`testing_units`"
msgstr ""

#: ../../rst/dev_guide/testing.rst:41
msgid "Tests directly against individual parts of the code base."
msgstr ""

#: ../../rst/dev_guide/testing.rst:44
msgid "If you're a developer, one of the most valuable things you can do is look at the GitHub issues list and help fix bugs.  We almost always prioritize bug fixing over feature development."
msgstr ""

#: ../../rst/dev_guide/testing.rst:48
msgid "Even for non developers, helping to test pull requests for bug fixes and features is still immensely valuable.  Ansible users who understand writing playbooks and roles should be able to add integration tests and so GitHub pull requests with integration tests that show bugs in action will also be a great way to help."
msgstr ""

#: ../../rst/dev_guide/testing.rst:55
msgid "Testing within GitHub & Shippable"
msgstr ""

#: ../../rst/dev_guide/testing.rst:59
msgid "Organization"
msgstr ""

#: ../../rst/dev_guide/testing.rst:61
msgid "When Pull Requests (PRs) are created they are tested using Shippable, a Continuous Integration (CI) tool. Results are shown at the end of every PR."
msgstr ""

#: ../../rst/dev_guide/testing.rst:63
msgid "When Shippable detects an error and it can be linked back to a file that has been modified in the PR then the relevant lines will be added as a GitHub comment. For example::"
msgstr ""

#: ../../rst/dev_guide/testing.rst:72
msgid "From the above example we can see that ``--test pep8`` and ``--test validate-modules`` have identified an issue. The commands given allow you to run the same tests locally to ensure you've fixed all issues without having to push your changes to GitHub and wait for Shippable, for example:"
msgstr ""

#: ../../rst/dev_guide/testing.rst:74
msgid "If you haven't already got Ansible available, use the local checkout by running::"
msgstr ""

#: ../../rst/dev_guide/testing.rst:78
msgid "Then run the tests detailed in the GitHub comment::"
msgstr ""

#: ../../rst/dev_guide/testing.rst:83
msgid "If there isn't a GitHub comment stating what's failed you can inspect the results by clicking on the \"Details\" button under the \"checks have failed\" message at the end of the PR."
msgstr ""

#: ../../rst/dev_guide/testing.rst:86
msgid "Rerunning a failing CI job"
msgstr ""

#: ../../rst/dev_guide/testing.rst:88
msgid "Occasionally you may find your PR fails due to a reason unrelated to your change. This could happen for several reasons, including:"
msgstr ""

#: ../../rst/dev_guide/testing.rst:90
msgid "a temporary issue accessing an external resource, such as a yum or git repo"
msgstr ""

#: ../../rst/dev_guide/testing.rst:91
msgid "a timeout creating a virtual machine to run the tests on"
msgstr ""

#: ../../rst/dev_guide/testing.rst:93
msgid "If either of these issues appear to be the case, you can rerun the Shippable test by:"
msgstr ""

#: ../../rst/dev_guide/testing.rst:95
msgid "adding a comment with ``/rebuild`` (full rebuild) or ``/rebuild_failed`` (rebuild only failed CI nodes) to the PR"
msgstr ""

#: ../../rst/dev_guide/testing.rst:96
msgid "closing and re-opening the PR (full rebuild)"
msgstr ""

#: ../../rst/dev_guide/testing.rst:97
msgid "making another change to the PR and pushing to GitHub"
msgstr ""

#: ../../rst/dev_guide/testing.rst:99
msgid "If the issue persists, please contact us in ``#ansible-devel`` on Freenode IRC."
msgstr ""

#: ../../rst/dev_guide/testing.rst:103
msgid "How to test a PR"
msgstr ""

#: ../../rst/dev_guide/testing.rst:105
msgid "Ideally, code should add tests that prove that the code works. That's not always possible and tests are not always comprehensive, especially when a user doesn't have access to a wide variety of platforms, or is using an API or web service. In these cases, live testing against real equipment can be more valuable than automation that runs against simulated interfaces. In any case, things should always be tested manually the first time as well."
msgstr ""

#: ../../rst/dev_guide/testing.rst:107
msgid "Thankfully, helping to test Ansible is pretty straightforward, assuming you are familiar with how Ansible works."
msgstr ""

#: ../../rst/dev_guide/testing.rst:110
msgid "Setup: Checking out a Pull Request"
msgstr ""

#: ../../rst/dev_guide/testing.rst:112
msgid "You can do this by:"
msgstr ""

#: ../../rst/dev_guide/testing.rst:114
msgid "checking out Ansible"
msgstr ""

#: ../../rst/dev_guide/testing.rst:115
msgid "fetching the proposed changes into a test branch"
msgstr ""

#: ../../rst/dev_guide/testing.rst:116
msgid "testing"
msgstr ""

#: ../../rst/dev_guide/testing.rst:117
msgid "commenting on that particular issue on GitHub"
msgstr ""

#: ../../rst/dev_guide/testing.rst:119
msgid "Here's how:"
msgstr ""

#: ../../rst/dev_guide/testing.rst:122
msgid "Testing source code from GitHub pull requests sent to us does have some inherent risk, as the source code sent may have mistakes or malicious code that could have a negative impact on your system. We recommend doing all testing on a virtual machine, whether a cloud instance, or locally.  Some users like Vagrant or Docker for this, but they are optional. It is also useful to have virtual machines of different Linux or other flavors, since some features (for example, package managers such as apt or yum) are specific to those OS versions."
msgstr ""

#: ../../rst/dev_guide/testing.rst:129
msgid "Create a fresh area to work::"
msgstr ""

#: ../../rst/dev_guide/testing.rst:135
msgid "Next, find the pull request you'd like to test and make note of its number. It will look something like this::"
msgstr ""

#: ../../rst/dev_guide/testing.rst:139
msgid "Only test ``ansible:devel``"
msgstr ""

#: ../../rst/dev_guide/testing.rst:141
msgid "It is important that the PR request target be ``ansible:devel``, as we do not accept pull requests into any other branch. Dot releases are cherry-picked manually by Ansible staff."
msgstr ""

#: ../../rst/dev_guide/testing.rst:143
msgid "Use the pull request number when you fetch the proposed changes and create your branch for testing::"
msgstr ""

#: ../../rst/dev_guide/testing.rst:148
msgid "The first command fetches the proposed changes from the pull request and creates a new branch named ``testing_PRXXXX``, where the XXXX is the actual number associated with the pull request (for example, 65381). The second command checks out the newly created branch."
msgstr ""

#: ../../rst/dev_guide/testing.rst:151
msgid "If the GitHub user interface shows that the pull request will not merge cleanly, we do not recommend proceeding if you are not somewhat familiar with git and coding, as you will have to resolve a merge conflict. This is the responsibility of the original pull request contributor."
msgstr ""

#: ../../rst/dev_guide/testing.rst:154
msgid "Some users do not create feature branches, which can cause problems when they have multiple, unrelated commits in their version of ``devel``. If the source looks like ``someuser:devel``, make sure there is only one commit listed on the pull request."
msgstr ""

#: ../../rst/dev_guide/testing.rst:156
msgid "The Ansible source includes a script that allows you to use Ansible directly from source without requiring a full installation that is frequently used by developers on Ansible."
msgstr ""

#: ../../rst/dev_guide/testing.rst:159
msgid "Simply source it (to use the Linux/Unix terminology) to begin using it immediately::"
msgstr ""

#: ../../rst/dev_guide/testing.rst:163
msgid "This script modifies the ``PYTHONPATH`` environment variables (along with a few other things), which will be temporarily set as long as your shell session is open."
msgstr ""

#: ../../rst/dev_guide/testing.rst:167
msgid "Testing the Pull Request"
msgstr ""

#: ../../rst/dev_guide/testing.rst:169
msgid "At this point, you should be ready to begin testing!"
msgstr ""

#: ../../rst/dev_guide/testing.rst:171
msgid "Some ideas of what to test are:"
msgstr ""

#: ../../rst/dev_guide/testing.rst:173
msgid "Create a test Playbook with the examples in and check if they function correctly"
msgstr ""

#: ../../rst/dev_guide/testing.rst:174
msgid "Test to see if any Python backtraces returned (that's a bug)"
msgstr ""

#: ../../rst/dev_guide/testing.rst:175
msgid "Test on different operating systems, or against different library versions"
msgstr ""

#: ../../rst/dev_guide/testing.rst:178
msgid "Run sanity tests"
msgstr ""

#: ../../rst/dev_guide/testing.rst:184
msgid "More information: :ref:`testing_sanity`"
msgstr ""

#: ../../rst/dev_guide/testing.rst:187
msgid "Run unit tests"
msgstr ""

#: ../../rst/dev_guide/testing.rst:193
msgid "More information: :ref:`testing_units`"
msgstr ""

#: ../../rst/dev_guide/testing.rst:196
msgid "Run integration tests"
msgstr ""

#: ../../rst/dev_guide/testing.rst:202
msgid "More information: :ref:`testing_integration`"
msgstr ""

#: ../../rst/dev_guide/testing.rst:204
msgid "Any potential issues should be added as comments on the pull request (and it's acceptable to comment if the feature works as well), remembering to include the output of ``ansible --version``"
msgstr ""

#: ../../rst/dev_guide/testing.rst:206
msgid "Example::"
msgstr ""

#: ../../rst/dev_guide/testing.rst:210
msgid "If the PR does not resolve the issue, or if you see any failures from the unit/integration tests, just include that output instead:"
msgstr ""

#: ../../rst/dev_guide/testing.rst
msgid "This change causes errors for me."
msgstr ""

#: ../../rst/dev_guide/testing.rst
msgid "When I ran this Ubuntu 16.04 it failed with the following:"
msgstr ""

#: ../../rst/dev_guide/testing.rst
msgid "\\```"
msgstr ""

#: ../../rst/dev_guide/testing.rst
msgid "some output"
msgstr ""

#: ../../rst/dev_guide/testing.rst
msgid "StackTrace"
msgstr ""

#: ../../rst/dev_guide/testing.rst
msgid "some other output"
msgstr ""

#: ../../rst/dev_guide/testing.rst:223
msgid "Code Coverage Online"
msgstr ""

#: ../../rst/dev_guide/testing.rst:225
msgid "`The online code coverage reports <https://codecov.io/gh/ansible/ansible>`_ are a good way to identify areas for testing improvement in Ansible.  By following red colors you can drill down through the reports to find files which have no tests at all.  Adding both integration and unit tests which show clearly how code should work, verify important Ansible functions and increase testing coverage in areas where there is none is a valuable way to help improve Ansible."
msgstr ""

#: ../../rst/dev_guide/testing.rst:232
msgid "The code coverage reports only cover the ``devel`` branch of Ansible where new feature development takes place.  Pull requests and new code will be missing from the codecov.io coverage reports so local reporting is needed.  Most ``ansible-test`` commands allow you to collect code coverage, this is particularly useful to indicate where to extend testing. See :ref:`testing_running_locally` for more information."
msgstr ""

#: ../../rst/dev_guide/testing.rst:240
msgid "Want to know more about testing?"
msgstr ""

#: ../../rst/dev_guide/testing.rst:242
msgid "If you'd like to know more about the plans for improving testing Ansible then why not join the `Testing Working Group <https://github.com/ansible/community/blob/master/meetings/README.md>`_."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/action-plugin-docs.rst:2
msgid "action-plugin-docs"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/action-plugin-docs.rst:4
msgid "Each action plugin should have a matching module of the same name to provide documentation."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ansible-doc.rst:2
msgid "ansible-doc"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ansible-doc.rst:4
msgid "Verifies that ``ansible-doc`` can parse module documentation on all supported Python versions."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ansible-var-precedence-check.rst:4
msgid "ansible-var-precedence-check"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ansible-var-precedence-check.rst:6
msgid "Check the order of precedence for Ansible variables against :ref:`ansible_variable_precedence`."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/azure-requirements.rst:4
msgid "azure-requirements"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/azure-requirements.rst:6
msgid "Update the Azure integration test requirements file when changes are made to the Azure packaging requirements file:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/bin-symlinks.rst:2
msgid "bin-symlinks"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/bin-symlinks.rst:4
msgid "The ``bin/`` directory in Ansible must contain only symbolic links to executable files. These files must reside in the ``lib/ansible/`` or ``test/lib/ansible_test/`` directories."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/bin-symlinks.rst:7
msgid "This is required to allow ``ansible-test`` to work with containers and remote hosts when running from an installed version of Ansible."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/bin-symlinks.rst:9
msgid "Symlinks for each entry point in ``bin/`` must also be present in ``test/lib/ansible_test/_data/injector/``. Each symlink should point to the ``python.py`` script in the same directory. This facilitates running with the correct Python interpreter and enabling code coverage."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/boilerplate.rst:4
msgid "boilerplate"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/boilerplate.rst:6
msgid "Most Python files should include the following boilerplate:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/botmeta.rst:2
msgid "botmeta"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/botmeta.rst:4
msgid "Verifies that ``./github/BOTMETA.yml`` is valid."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/changelog.rst:2
msgid "changelog"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/changelog.rst:4
msgid "Basic linting of changelog fragments with `antsibull-changelog lint <https://pypi.org/project/antsibull-changelog/>`_."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/changelog.rst:6
msgid "One or more of the following sections are required:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/changelog.rst:8
msgid "major_changes"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/changelog.rst:9
msgid "minor_changes"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/changelog.rst:10
msgid "breaking_changes"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/changelog.rst:11
msgid "deprecated_features"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/changelog.rst:12
msgid "removed_features"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/changelog.rst:13
msgid "security_fixes"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/changelog.rst:14
msgid "bugfixes"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/changelog.rst:15
msgid "known_issues"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/changelog.rst:17
msgid "New modules and plugins must not be included in changelog fragments."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/compile.rst:4
msgid "See :ref:`testing_compile` for more information."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/configure-remoting-ps1.rst:2
msgid "configure-remoting-ps1"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/configure-remoting-ps1.rst:4
msgid "The file ``examples/scripts/ConfigureRemotingForAnsible.ps1`` is required and must be a regular file. It is used by external automated processes and cannot be moved, renamed or replaced with a symbolic link."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/deprecated-config.rst:4
msgid "deprecated-config"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/deprecated-config.rst:6
msgid "``DOCUMENTATION`` config is scheduled for removal"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/docs-build.rst:2
msgid "docs-build"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/docs-build.rst:4
msgid "Verifies that ``make singlehtmldocs`` in ``docs/docsite/`` completes without errors."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/empty-init.rst:2
msgid "empty-init"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/empty-init.rst:4
msgid "The ``__init__.py`` files under the following directories must be empty.  For some of these (modules and tests), ``__init__.py`` files with code won't be used.  For others (module_utils), we want the possibility of using Python namespaces which an empty ``__init__.py`` will allow for."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/empty-init.rst:8
msgid "``lib/ansible/modules/``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/empty-init.rst:9
msgid "``lib/ansible/module_utils/``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/empty-init.rst:10
msgid "``test/units/``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/future-import-boilerplate.rst:2
msgid "future-import-boilerplate"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/future-import-boilerplate.rst:4
msgid "Most Python files should include the following boilerplate at the top of the file, right after the comment header:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/future-import-boilerplate.rst:11
msgid "This uses Python 3 semantics for absolute vs relative imports, division, and print.  By doing this, we can write code which is portable between Python 2 and Python 3 by following the Python 3 semantics."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/future-import-boilerplate.rst:18
msgid "When Python 2 encounters an import of a name in a file like ``import copy`` it attempts to load ``copy.py`` from the same directory as the file is in.  This can cause problems if there is a python file of that name in the directory and also a python module in ``sys.path`` with that same name.  In that case, Python 2 would load the one in the same directory and there would be no way to load the one on ``sys.path``.  Python 3 fixes this by making imports absolute by default.  ``import copy`` will find ``copy.py`` from ``sys.path``.  If you want to import ``copy.py`` from the same directory, the code needs to be changed to perform a relative import: ``from . import copy``."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/future-import-boilerplate.rst:28
msgid "`Absolute and relative imports <https://www.python.org/dev/peps/pep-0328>`_"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/future-import-boilerplate.rst:33
msgid "In Python 2, the division operator (``/``) returns integer values when used with integers.  If there was a remainder, this part would be left off (aka, `floor division`).  In Python 3, the division operator (``/``) always returns a floating point number.  Code that needs to calculate the integer portion of the quotient needs to switch to using the floor division operator (`//`) instead."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/future-import-boilerplate.rst:40
msgid "`Changing the division operator <https://www.python.org/dev/peps/pep-0238>`_"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/future-import-boilerplate.rst:45
msgid "In Python 2, :func:`python:print` is a keyword.  In Python 3, :func:`python3:print` is a function with different parameters.  Using this ``__future__`` allows using the Python 3 print semantics everywhere."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/future-import-boilerplate.rst:50
msgid "`Make print a function <https://www.python.org/dev/peps/pep-3105>`_"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:2
msgid "ignores"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:4
msgid "Sanity tests for individual files can be skipped, and specific errors can be ignored."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:7
msgid "When to Ignore Errors"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:9
msgid "Sanity tests are designed to improve code quality and identify common issues with content. When issues are identified during development, those issues should be corrected."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:12
msgid "As development of Ansible continues, sanity tests are expanded to detect issues that previous releases could not. To allow time for existing content to be updated to pass newer tests, ignore entries can be added. New content should not use ignores for existing sanity tests."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:16
msgid "When code is fixed to resolve sanity test errors, any relevant ignores must also be removed. If the ignores are not removed, this will be reported as an unnecessary ignore error. This is intended to prevent future regressions due to the same error recurring after being fixed."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:21
msgid "When to Skip Tests"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:23
msgid "Although rare, there are reasons for skipping a sanity test instead of ignoring the errors it reports."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:25
msgid "If a sanity test results in a traceback when processing content, that error cannot be ignored. If this occurs, open a new `bug report <https://github.com/ansible/ansible/issues/new?template=bug_report.md>`_ for the issue so it can be fixed. If the traceback occurs due to an issue with the content, that issue should be fixed. If the content is correct, the test will need to be skipped until the bug in the sanity test is fixed."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:30
msgid "Caution should be used when skipping sanity tests instead of ignoring them. Since the test is skipped entirely, resolution of the issue will not be automatically detected. This will prevent prevent regression detection from working once the issue has been resolved. For this reason it is a good idea to periodically review skipped entries manually to verify they are required."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:36
msgid "Ignore File Location"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:38
msgid "The location of the ignore file depends on the type of content being tested."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:41
msgid "Ansible Collections"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:43
msgid "Since sanity tests change between Ansible releases, a separate ignore file is needed for each Ansible major release."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:45
msgid "The filename is ``tests/sanity/ignore-X.Y.txt`` where ``X.Y`` is the Ansible release being used to test the collection."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:47
msgid "Maintaining a separate file for each Ansible release allows a collection to pass tests for multiple versions of Ansible."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:52
msgid "When testing Ansible, all ignores are placed in the ``test/sanity/ignore.txt`` file."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:54
msgid "Only a single file is needed because ``ansible-test`` is developed and released as a part of Ansible itself."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:57
msgid "Ignore File Format"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:59
msgid "The ignore file contains one entry per line. Each line consists of two columns, separated by a single space. Comments may be added at the end of an entry, started with a hash (``#``) character, which can be proceeded by zero or more spaces. Blank and comment only lines are not allowed."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:64
msgid "The first column specifies the file path that the entry applies to. File paths must be relative to the root of the content being tested. This is either the Ansible source or an Ansible collection. File paths cannot contain a space or the hash (``#``) character."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:69
msgid "The second column specifies the sanity test that the entry applies to. This will be the name of the sanity test. If the sanity test is specific to a version of Python, the name will include a dash (``-``) and the relevant Python version. If the named test uses error codes then the error code to ignore must be appended to the name of the test, separated by a colon (``:``)."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:74
msgid "Below are some example ignore entries for an Ansible collection::"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:80
msgid "It is also possible to skip a sanity test for a specific file. This is done by adding ``!skip`` after the sanity test name in the second column. When this is done, no error code is included, even if the sanity test uses error codes."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:84
msgid "Below are some example skip entries for an Ansible collection::"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:90
msgid "Ignore File Errors"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:92
msgid "There are various errors that can be reported for the ignore file itself:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:94
msgid "syntax errors parsing the ignore file"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:95
msgid "references a file path that does not exist"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:96
msgid "references to a sanity test that does not exist"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:97
msgid "ignoring an error that does not occur"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:98
msgid "ignoring a file which is skipped"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/ignores.rst:99
msgid "duplicate entries"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/import.rst:2
msgid "import"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/import.rst:4
msgid "All Python imports in ``lib/ansible/modules/`` and ``lib/ansible/module_utils/`` which are not from the Python standard library must be imported in a try/except ImportError block."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/index.rst:4
#: ../../rst/dev_guide/testing_sanity.rst:7
msgid "Sanity Tests"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/index.rst:6
msgid "The following sanity tests are available as ``--test`` options for ``ansible-test sanity``. This list is also available using ``ansible-test sanity --list-tests --allow-disabled``."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/index.rst:9
msgid "For information on how to run these tests, see :ref:`sanity testing guide <testing_sanity>`."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:2
msgid "integration-aliases"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:4
msgid "Integration tests are executed by ``ansible-test`` and reside in directories under ``test/integration/targets/``. Each test MUST have an ``aliases`` file to control test execution."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:7
msgid "Aliases are explained in the following sections. Each alias must be on a separate line in an ``aliases`` file."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:10
msgid "Groups"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:12
msgid "Tests must be configured to run in exactly one group. This is done by adding the appropriate group to the ``aliases`` file."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:14
msgid "The following are examples of some of the available groups:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:16
msgid "``shippable/posix/group1``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:17
msgid "``shippable/windows/group2``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:18
msgid "``shippable/azure/group3``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:19
msgid "``shippable/aws/group1``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:20
msgid "``shippable/cloud/group1``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:22
msgid "Groups are used to balance tests across multiple CI jobs to minimize test run time. They also improve efficiency by keeping tests with similar requirements running together."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:25
msgid "When selecting a group for a new test, use the same group as existing tests similar to the one being added. If more than one group is available, select one randomly."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:29
msgid "Setup"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:31
msgid "Aliases can be used to execute setup targets before running tests:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:33
msgid "``setup/once/TARGET`` - Run the target ``TARGET`` before the first target that requires it."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:34
msgid "``setup/always/TARGET`` - Run the target ``TARGET`` before each target that requires it."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:39
msgid "Aliases can be used to express some test requirements:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:41
msgid "``needs/privileged`` - Requires ``--docker-privileged`` when running tests with ``--docker``."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:42
msgid "``needs/root`` - Requires running tests as ``root`` or with ``--docker``."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:43
msgid "``needs/ssh`` - Requires SSH connections to localhost (or the test container with ``--docker``) without a password."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:44
msgid "``needs/httptester`` - Requires use of the http-test-container to run tests."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:47
msgid "Dependencies"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:49
msgid "Some test dependencies are automatically discovered:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:51
msgid "Ansible role dependencies defined in ``meta/main.yml`` files."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:52
msgid "Setup targets defined with ``setup/*`` aliases."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:53
msgid "Symbolic links from one target to a file in another target."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:55
msgid "Aliases can be used to declare dependencies that are not handled automatically:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:57
msgid "``needs/target/TARGET`` - Requires use of the test target ``TARGET``."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:58
msgid "``needs/file/PATH`` - Requires use of the file ``PATH`` relative to the git root."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:61
msgid "Skipping"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:63
msgid "Aliases can be used to skip platforms using one of the following:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:65
msgid "``skip/freebsd`` - Skip tests on FreeBSD."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:66
msgid "``skip/osx`` - Skip tests on macOS."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:67
msgid "``skip/rhel`` - Skip tests on RHEL."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:68
msgid "``skip/docker`` - Skip tests when running in a Docker container."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:70
msgid "Platform versions, as specified using the ``--remote`` option with ``/`` removed, can also be skipped:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:72
msgid "``skip/freebsd11.1`` - Skip tests on FreeBSD 11.1."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:73
msgid "``skip/rhel7.6`` - Skip tests on RHEL 7.6."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:75
msgid "Windows versions, as specified using the ``--windows`` option can also be skipped:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:77
msgid "``skip/windows/2008`` - Skip tests on Windows Server 2008."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:78
msgid "``skip/windows/2012-R2`` - Skip tests on Windows Server 2012 R2."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:80
msgid "Aliases can be used to skip Python major versions using one of the following:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:82
msgid "``skip/python2`` - Skip tests on Python 2.x."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:83
msgid "``skip/python3`` - Skip tests on Python 3.x."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:85
msgid "For more fine grained skipping, use conditionals in integration test playbooks, such as:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:93
msgid "Miscellaneous"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:95
msgid "There are several other aliases available as well:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:97
msgid "``destructive`` - Requires ``--allow-destructive`` to run without ``--docker`` or ``--remote``."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:98
msgid "``hidden`` - Target is ignored. Usable as a dependency. Automatic for ``setup_`` and ``prepare_`` prefixed targets."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:101
msgid "Unstable"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:103
msgid "Tests which fail sometimes should be marked with the ``unstable`` alias until the instability has been fixed. These tests will continue to run for pull requests which modify the test or the module under test."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:106
msgid "This avoids unnecessary test failures for other pull requests, as well as tests on merge runs and nightly CI jobs."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:108
msgid "There are two ways to run unstable tests manually:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:110
msgid "Use the ``--allow-unstable`` option for ``ansible-test``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:111
msgid "Prefix the test name with ``unstable/`` when passing it to ``ansible-test``."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:113
msgid "Tests will be marked as unstable by a member of the Ansible Core Team. GitHub issues_ will be created to track each unstable test."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:117
msgid "Disabled"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:119
msgid "Tests which always fail should be marked with the ``disabled`` alias until they can be fixed."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:121
msgid "Disabled tests are automatically skipped."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:123
msgid "There are two ways to run disabled tests manually:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:125
msgid "Use the ``--allow-disabled`` option for ``ansible-test``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:126
msgid "Prefix the test name with ``disabled/`` when passing it to ``ansible-test``."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:128
msgid "Tests will be marked as disabled by a member of the Ansible Core Team. GitHub issues_ will be created to track each disabled test."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:132
msgid "Unsupported"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:134
msgid "Tests which cannot be run in CI should be marked with the ``unsupported`` alias. Most tests can be supported through the use of simulators and/or cloud plugins."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:137
msgid "However, if that is not possible then marking a test as unsupported will prevent it from running in CI."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:139
msgid "There are two ways to run unsupported tests manually:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:141
msgid "Use the ``--allow-unsupported`` option for ``ansible-test``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:142
msgid "Prefix the test name with ``unsupported/`` when passing it to ``ansible-test``."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:144
msgid "Tests will be marked as unsupported by the contributor of the test."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:147
msgid "Cloud"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:149
msgid "Tests for cloud services and other modules that require access to external APIs usually require special support for testing in CI."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:151
msgid "These require an additional alias to indicate the required test plugin."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:153
msgid "Some of the available aliases are:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:155
msgid "``cloud/aws``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:156
msgid "``cloud/azure``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:157
msgid "``cloud/cs``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:158
msgid "``cloud/foreman``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:159
msgid "``cloud/openshift``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:160
msgid "``cloud/tower``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:161
msgid "``cloud/vcenter``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:164
msgid "Untested"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:166
msgid "Every module and plugin should have integration tests, even if the tests cannot be run in CI."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:169
msgid "Issues"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:171
msgid "Tests that are marked as unstable_ or disabled_ will have an issue created to track the status of the test. Each issue will be assigned to one of the following projects:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:174
msgid "`AWS <https://github.com/ansible/ansible/projects/21>`_"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:175
msgid "`Azure <https://github.com/ansible/ansible/projects/22>`_"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:176
msgid "`Windows <https://github.com/ansible/ansible/projects/23>`_"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:177
msgid "`General <https://github.com/ansible/ansible/projects/25>`_"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:180
msgid "Questions"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/integration-aliases.rst:182
msgid "For questions about integration tests reach out to @mattclay or @gundalow on GitHub or ``#ansible-devel`` on IRC."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/line-endings.rst:2
msgid "line-endings"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/line-endings.rst:4
msgid "All files must use ``\\n`` for line endings instead of ``\\r\\n``."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/metaclass-boilerplate.rst:2
msgid "metaclass-boilerplate"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/metaclass-boilerplate.rst:4
msgid "Most Python files should include the following boilerplate at the top of the file, right after the comment header and ``from __future__ import``:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/metaclass-boilerplate.rst:12
msgid "Python 2 has \"new-style classes\" and \"old-style classes\" whereas Python 3 only has new-style classes. Adding the ``__metaclass__ = type`` boilerplate makes every class defined in that file into a new-style class as well."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-assert.rst:2
msgid "no-assert"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-assert.rst:4
msgid "Do not use ``assert`` in production Ansible python code. When running Python with optimizations, Python will remove ``assert`` statements, potentially allowing for unexpected behavior throughout the Ansible code base."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-assert.rst:8
msgid "Instead of using ``assert`` you should utilize simple ``if`` statements, that result in raising an exception. There is a new exception called ``AnsibleAssertionError`` that inherits from ``AnsibleError`` and ``AssertionError``. When possible, utilize a more specific exception than ``AnsibleAssertionError``."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-assert.rst:14
msgid "Modules will not have access to ``AnsibleAssertionError`` and should instead raise ``AssertionError``, a more specific exception, or just use ``module.fail_json`` at the failure point."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-basestring.rst:2
msgid "no-basestring"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-basestring.rst:4
msgid "Do not use ``isinstance(s, basestring)`` as basestring has been removed in Python3.  You can import ``string_types``, ``binary_type``, or ``text_type`` from ``ansible.module_utils.six`` and then use ``isinstance(s, string_types)`` or ``isinstance(s, (binary_type, text_type))`` instead."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-basestring.rst:9
msgid "If this is part of code to convert a string to a particular type, ``ansible.module_utils._text`` contains several functions that may be even better for you: ``to_text``, ``to_bytes``, and ``to_native``."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-dict-iteritems.rst:2
msgid "no-dict-iteritems"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-dict-iteritems.rst:4
msgid "The ``dict.iteritems`` method has been removed in Python 3. There are two recommended alternatives:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-dict-iterkeys.rst:2
msgid "no-dict-iterkeys"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-dict-iterkeys.rst:4
msgid "The ``dict.iterkeys`` method has been removed in Python 3. Use the following instead:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-dict-itervalues.rst:2
msgid "no-dict-itervalues"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-dict-itervalues.rst:4
msgid "The ``dict.itervalues`` method has been removed in Python 3. There are two recommended alternatives:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-get-exception.rst:2
msgid "no-get-exception"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-get-exception.rst:4
msgid "We created a function, ``ansible.module_utils.pycompat24.get_exception`` to help retrieve exceptions in a manner compatible with Python 2.4 through Python 3.6.  We no longer support Python 2.4 and Python 2.5 so this is extraneous and we want to deprecate the function.  Porting code should look something like this:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:2
msgid "no-illegal-filenames"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:4
msgid "Files and directories should not contain illegal characters or names so that Ansible can be checked out on any Operating System."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:8
msgid "Illegal Characters"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:10
msgid "The following characters are not allowed to be used in any part of the file or directory name;"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:13
msgid "``<``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:14
msgid "``>``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:15
msgid "``:``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:16
msgid "``\"``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:17
msgid "``/``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:18
msgid "``\\``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:19
msgid "``|``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:20
msgid "``?``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:21
msgid "``*``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:22
msgid "Any characters whose integer representations are in the range from 0 through to 31 like ``\\n``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:24
msgid "The following characters are not allowed to be used as the last character of a file or directory;"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:27
msgid "``.``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:28
msgid "``\" \"`` (just the space character)"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:31
msgid "Illegal Names"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:33
msgid "The following names are not allowed to be used as the name of a file or directory excluding the extension;"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:36
msgid "``CON``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:37
msgid "``PRN``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:38
msgid "``AUX``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:39
msgid "``NUL``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:40
msgid "``COM1``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:41
msgid "``COM2``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:42
msgid "``COM3``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:43
msgid "``COM4``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:44
msgid "``COM5``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:45
msgid "``COM6``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:46
msgid "``COM7``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:47
msgid "``COM8``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:48
msgid "``COM9``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:49
msgid "``LPT1``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:50
msgid "``LPT2``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:51
msgid "``LPT3``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:52
msgid "``LPT4``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:53
msgid "``LPT5``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:54
msgid "``LPT6``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:55
msgid "``LPT7``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:56
msgid "``LPT8``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:57
msgid "``LPT9``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-illegal-filenames.rst:59
msgid "For example, the file ``folder/COM1``, ``folder/COM1.txt`` are illegal but ``folder/COM1-file`` or ``folder/COM1-file.txt`` is allowed."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-main-display.rst:2
msgid "no-main-display"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-main-display.rst:4
msgid "As of Ansible 2.8, ``Display`` should no longer be imported from ``__main__``."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-main-display.rst:6
msgid "``Display`` is now a singleton and should be utilized like the following::"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-main-display.rst:11
msgid "There is no longer a need to attempt ``from __main__ import display`` inside a ``try/except`` block."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-smart-quotes.rst:2
msgid "no-smart-quotes"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-smart-quotes.rst:4
msgid "Smart quotes (``”“‘’``) should not be used.  Use plain ascii quotes (``\"'``) instead."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-tests-as-filters.rst:4
msgid "no-tests-as-filters"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-tests-as-filters.rst:6
msgid "Using Ansible provided Jinja2 tests as filters will be removed in Ansible 2.9."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-tests-as-filters.rst:8
msgid "Prior to Ansible 2.5, Jinja2 tests included within Ansible were most often used as filters. The large difference in use is that filters are referenced as ``variable | filter_name`` while Jinja2 tests are referenced as ``variable is test_name``."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-tests-as-filters.rst:10
msgid "Jinja2 tests are used for comparisons, whereas filters are used for data manipulation, and have different applications in Jinja2. This change is to help differentiate the concepts for a better understanding of Jinja2, and where each can be appropriately used."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-tests-as-filters.rst:12
msgid "As of Ansible 2.5 using an Ansible provided Jinja2 test with filter syntax will display a deprecation error."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-underscore-variable.rst:4
msgid "no-underscore-variable"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-underscore-variable.rst:6
msgid "In the future, Ansible may use the identifier ``_`` to internationalize its message strings.  To be ready for that, we need to make sure that there are no conflicting identifiers defined in the code base."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-underscore-variable.rst:10
msgid "In common practice, ``_`` is frequently used as a dummy variable (a variable to receive a value from a function where the value is useless and never used). In Ansible, we're using the identifier ``dummy`` for this purpose instead."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-underscore-variable.rst:14
msgid "Example of unfixed code:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-underscore-variable.rst:23
msgid "Example of fixed code:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-unicode-literals.rst:2
msgid "no-unicode_literals"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-unicode-literals.rst:4
msgid "The use of :code:`from __future__ import unicode_literals` has been deemed an anti-pattern.  The problems with it are:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-unicode-literals.rst:7
msgid "It makes it so one can't jump into the middle of a file and know whether a bare literal string is a byte string or text string.  The programmer has to first check the top of the file to see if the import is there."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-unicode-literals.rst:10
msgid "It removes the ability to define native strings (a string which should be a byte string on python2 and a text string on python3) via a string literal."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-unicode-literals.rst:12
msgid "It makes for more context switching.  A programmer could be reading one file which has `unicode_literals` and know that bare string literals are text strings but then switch to another file (perhaps tracing program execution into a third party library) and have to switch their understanding of what bare string literals are."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-unwanted-files.rst:2
msgid "no-unwanted-files"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-unwanted-files.rst:4
msgid "Specific file types are allowed in certain directories:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-unwanted-files.rst:6
msgid "``lib`` - All content must reside in the ``lib/ansible`` directory."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-unwanted-files.rst:8
msgid "``lib/ansible`` - Only source code with one of the following extensions is allowed:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-unwanted-files.rst:10
msgid "``*.cs`` - C#"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-unwanted-files.rst:11
msgid "``*.ps1`` - PowerShell"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-unwanted-files.rst:12
msgid "``*.psm1`` - PowerShell"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-unwanted-files.rst:13
msgid "``*.py`` - Python"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-wildcard-import.rst:4
msgid "no-wildcard-import"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-wildcard-import.rst:6
msgid "Using :code:`import *` is a bad habit which pollutes your namespace, hinders debugging, and interferes with static analysis of code.  For those reasons, we do want to limit the use of :code:`import *` in the ansible code.  Change our code to import the specific names that you need instead."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-wildcard-import.rst:11
msgid "Examples of unfixed code:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/no-wildcard-import.rst:22
msgid "Examples of fixed code:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/obsolete-files.rst:2
msgid "obsolete-files"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/obsolete-files.rst:4
msgid "Directories in the Ansible source tree are sometimes made obsolete. Files should not exist in these directories. The new location (if any) is dependent on which directory has been made obsolete."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/obsolete-files.rst:8
msgid "Below are some of the obsolete directories and their new locations:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/obsolete-files.rst:10
msgid "All of ``test/runner/`` is now under ``test/lib/ansible_test/`` instead. The organization of files in the new directory has changed."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/obsolete-files.rst:11
msgid "Most subdirectories of ``test/sanity/`` (with some exceptions) are now under ``test/lib/ansible_test/_data/sanity/`` instead."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/obsolete-files.rst:13
msgid "This error occurs most frequently for open pull requests which add or modify files in directories which are now obsolete. Make sure the branch you are working from is current so that changes can be made in the correct location."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/package-data.rst:2
msgid "package-data"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/package-data.rst:4
msgid "Verifies that the combination of ``MANIFEST.in`` and ``package_data`` from ``setup.py`` properly installs data files from within ``lib/ansible``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/pep8.rst:2
msgid "pep8"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/pep8.rst:4
msgid "Python static analysis for PEP 8 style guideline compliance."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/pep8.rst:6
msgid "See :ref:`testing_pep8` for more information."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/pslint.rst:2
msgid "pslint"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/pslint.rst:4
msgid "PowerShell static analysis for common programming errors using `PSScriptAnalyzer <https://github.com/PowerShell/PSScriptAnalyzer/>`_."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/pylint.rst:2
msgid "pylint"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/pylint-ansible-test.rst:6
#: ../../rst/dev_guide/testing/sanity/pylint.rst:4
msgid "Python static analysis for common programming errors."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/pylint-ansible-test.rst:4
msgid "pylint-ansible-test"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/pylint-ansible-test.rst:8
msgid "A more strict set of rules applied to ``ansible-test``."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/release-names.rst:2
msgid "Release names"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/release-names.rst:4
msgid "Verifies that the most recent release name has been added to ``./github/RELEASE_NAMES.yml``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/replace-urlopen.rst:2
msgid "replace-urlopen"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/replace-urlopen.rst:4
msgid "Use ``open_url`` from ``module_utils`` instead of ``urlopen``."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/required-and-default-attributes.rst:2
msgid "required-and-default-attributes"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/required-and-default-attributes.rst:4
msgid "Use only one of ``default`` or ``required`` with ``FieldAttribute``."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/rstcheck.rst:2
msgid "rstcheck"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/rstcheck.rst:4
msgid "Check reStructuredText files for syntax and formatting issues."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/runtime-metadata.rst:2
msgid "runtime-metadata.yml"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/runtime-metadata.rst:4
msgid "Validates the schema for:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/runtime-metadata.rst:6
msgid "ansible-base's ``lib/ansible/config/ansible_builtin_runtime.yml``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/runtime-metadata.rst:7
msgid "collection's ``meta/runtime.yml``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/sanity-docs.rst:2
msgid "sanity-docs"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/sanity-docs.rst:4
msgid "Documentation for each ``ansible-test sanity`` test is required."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/shebang.rst:2
msgid "shebang"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/shebang.rst:4
msgid "Most executable files should only use one of the following shebangs:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/shebang.rst:6
msgid "``#!/bin/sh``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/shebang.rst:7
msgid "``#!/bin/bash``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/shebang.rst:8
msgid "``#!/usr/bin/make``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/shebang.rst:9
msgid "``#!/usr/bin/env python``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/shebang.rst:10
msgid "``#!/usr/bin/env bash``"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/shebang.rst:12
msgid "NOTE: For ``#!/bin/bash``, any of the options ``eux`` may also be used, such as ``#!/bin/bash -eux``."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/shebang.rst:14
msgid "This does not apply to Ansible modules, which should not be executable and must always use ``#!/usr/bin/python``."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/shebang.rst:16
msgid "Some exceptions are permitted. Ask if you have questions."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/shellcheck.rst:2
msgid "shellcheck"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/shellcheck.rst:4
msgid "Static code analysis for shell scripts using the excellent `shellcheck <https://www.shellcheck.net/>`_ tool."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/symlinks.rst:2
msgid "symlinks"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/symlinks.rst:4
msgid "Symbolic links are only permitted for files that exist to ensure proper tarball generation during a release."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/symlinks.rst:6
msgid "If other types of symlinks are needed for tests they must be created as part of the test."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/test-constraints.rst:2
msgid "test-constraints"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/test-constraints.rst:4
msgid "Constraints for test requirements should be in ``test/lib/ansible_test/_data/requirements/constraints.txt``."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/update-bundled.rst:4
msgid "update-bundled"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/update-bundled.rst:6
msgid "Check whether any of our known bundled code needs to be updated for a new upstream release."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/update-bundled.rst:8
msgid "This test can error in the following ways:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/update-bundled.rst:10
msgid "The bundled code is out of date with regard to the latest release on pypi.  Update the code to the new version and update the version in _BUNDLED_METADATA to solve this."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/update-bundled.rst:13
msgid "The code is lacking a _BUNDLED_METADATA variable.  This typically happens when a bundled version is updated and we forget to add a _BUNDLED_METADATA variable to the updated file.  Once that is added, this error should go away."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/update-bundled.rst:17
msgid "A file has a _BUNDLED_METADATA variable but the file isn't specified in :file:`test/sanity/code-smell/update-bundled.py`.  This typically happens when a new bundled library is added.  Add the file to the `get_bundled_libs()` function in the `update-bundled.py` test script to solve this error."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/update-bundled.rst:22
msgid "_BUNDLED_METADATA has the following fields:"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/update-bundled.rst
msgid "pypi_name"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/update-bundled.rst:24
msgid "Name of the bundled package on pypi"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/update-bundled.rst:26
msgid "Version of the package that we are including here"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/update-bundled.rst
msgid "version_constraints"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/update-bundled.rst:28
msgid "Optional PEP440 specifier for the version range that we are bundling. Currently, the only valid use of this is to follow a version that is compatible with the Python stdlib when newer versions of the pypi package implement a new API."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/use-argspec-type-path.rst:2
msgid "use-argspec-type-path"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/use-argspec-type-path.rst:4
msgid "The AnsibleModule argument_spec knows of several types beyond the standard python types.  One of these is ``path``.  When used, type ``path`` ensures that an argument is a string and expands any shell variables and tilde characters."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/use-argspec-type-path.rst:8
msgid "This test looks for use of :func:`os.path.expanduser <python:os.path.expanduser>` in modules.  When found, it tells the user to replace it with ``type='path'`` in the module's argument_spec or list it as a false positive in the test."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/use-compat-six.rst:2
msgid "use-compat-six"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/use-compat-six.rst:4
msgid "Use ``six`` from ``module_utils`` instead of ``six``."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/validate-modules.rst:2
#: ../../rst/dev_guide/testing_validate-modules.rst:7
msgid "validate-modules"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/validate-modules.rst:4
msgid "Analyze modules for common issues in code and documentation."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/validate-modules.rst:6
msgid "See :ref:`testing_validate-modules` for more information."
msgstr ""

#: ../../rst/dev_guide/testing/sanity/yamllint.rst:2
msgid "yamllint"
msgstr ""

#: ../../rst/dev_guide/testing/sanity/yamllint.rst:4
msgid "Check YAML files for syntax and formatting issues."
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:7
msgid "Compile Tests"
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:12
#: ../../rst/dev_guide/testing_httptester.rst:10
msgid "Overview"
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:14
msgid "Compile tests check source files for valid syntax on all supported python versions:"
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:16
msgid "2.4 (Ansible 2.3 only)"
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:17
msgid "2.6"
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:18
msgid "2.7"
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:19
msgid "3.5"
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:20
msgid "3.6"
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:21
msgid "3.7"
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:22
msgid "3.8"
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:23
msgid "3.9"
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:25
msgid "NOTE: In Ansible 2.4 and earlier the compile test was provided by a dedicated sub-command ``ansible-test compile`` instead of a sanity test using ``ansible-test sanity --test compile``."
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:28
msgid "Running compile tests locally"
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:30
msgid "Compile tests can be run across the whole code base by doing:"
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:38
#: ../../rst/dev_guide/testing_units.rst:38
msgid "Against a single file by doing:"
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:44
#: ../../rst/dev_guide/testing_units.rst:44
msgid "Or against a specific Python version by doing:"
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:50
msgid "For advanced usage see the help:"
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:58
#: ../../rst/dev_guide/testing_units.rst:66
msgid "Installing dependencies"
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:60
msgid "``ansible-test`` has a number of dependencies , for ``compile`` tests we suggest running the tests with ``--local``, which is the default"
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:62
msgid "The dependencies can be installed using the ``--requirements`` argument. For example:"
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:70
msgid "The full list of requirements can be found at `test/lib/ansible_test/_data/requirements <https://github.com/ansible/ansible/tree/devel/test/lib/ansible_test/_data/requirements>`_. Requirements files are named after their respective commands. See also the `constraints <https://github.com/ansible/ansible/blob/devel/test/lib/ansible_test/_data/requirements/constraints.txt>`_ applicable to all commands."
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:74
msgid "Extending compile tests"
msgstr ""

#: ../../rst/dev_guide/testing_compile.rst:76
msgid "If you believe changes are needed to the compile tests please add a comment on the `Testing Working Group Agenda <https://github.com/ansible/community/blob/master/meetings/README.md>`_ so it can be discussed."
msgstr ""

#: ../../rst/dev_guide/testing_documentation.rst:9
msgid "Before you submit a module for inclusion in the main Ansible repo, you must test your module documentation for correct HTML rendering and to ensure that the argspec matches the documentation in your Python file. The community pages offer more information on :ref:`testing reStructuredText documentation <testing_documentation_locally>`."
msgstr ""

#: ../../rst/dev_guide/testing_documentation.rst:11
msgid "To check the HTML output of your module documentation:"
msgstr ""

#: ../../rst/dev_guide/testing_documentation.rst:13
msgid "Ensure working :ref:`development environment <environment_setup>`."
msgstr ""

#: ../../rst/dev_guide/testing_documentation.rst:14
#: ../../rst/dev_guide/testing_documentation.rst:28
msgid "Install required Python packages (drop '--user' in venv/virtualenv):"
msgstr ""

#: ../../rst/dev_guide/testing_documentation.rst:21
msgid "Ensure your module is in the correct directory: ``lib/ansible/modules/$CATEGORY/mymodule.py``."
msgstr ""

#: ../../rst/dev_guide/testing_documentation.rst:22
msgid "Build HTML from your module documentation: ``MODULES=mymodule make webdocs``."
msgstr ""

#: ../../rst/dev_guide/testing_documentation.rst:23
msgid "To build the HTML documentation for multiple modules, use a comma-separated list of module names: ``MODULES=mymodule,mymodule2 make webdocs``."
msgstr ""

#: ../../rst/dev_guide/testing_documentation.rst:24
msgid "View the HTML page at ``file:///path/to/docs/docsite/_build/html/modules/mymodule_module.html``."
msgstr ""

#: ../../rst/dev_guide/testing_documentation.rst:26
msgid "To ensure that your module documentation matches your ``argument_spec``:"
msgstr ""

#: ../../rst/dev_guide/testing_documentation.rst:34
msgid "run the ``validate-modules`` test::"
msgstr ""

#: ../../rst/dev_guide/testing_httptester.rst:5
msgid "httptester"
msgstr ""

#: ../../rst/dev_guide/testing_httptester.rst:12
msgid "``httptester`` is a docker container used to host certain resources required by :ref:`testing_integration`. This is to avoid CI tests requiring external resources (such as git or package repos) which, if temporarily unavailable, would cause tests to fail."
msgstr ""

#: ../../rst/dev_guide/testing_httptester.rst:14
msgid "HTTP Testing endpoint which provides the following capabilities:"
msgstr ""

#: ../../rst/dev_guide/testing_httptester.rst:16
msgid "httpbin"
msgstr ""

#: ../../rst/dev_guide/testing_httptester.rst:17
msgid "nginx"
msgstr ""

#: ../../rst/dev_guide/testing_httptester.rst:18
msgid "SSL"
msgstr ""

#: ../../rst/dev_guide/testing_httptester.rst:19
msgid "SNI"
msgstr ""

#: ../../rst/dev_guide/testing_httptester.rst:20
msgid "Negotiate Authentication"
msgstr ""

#: ../../rst/dev_guide/testing_httptester.rst:23
msgid "Source files can be found in the `http-test-container <https://github.com/ansible/http-test-container>`_ repository."
msgstr ""

#: ../../rst/dev_guide/testing_httptester.rst:26
msgid "Extending httptester"
msgstr ""

#: ../../rst/dev_guide/testing_httptester.rst:28
msgid "If you have sometime to improve ``httptester`` please add a comment on the `Testing Working Group Agenda <https://github.com/ansible/community/blob/master/meetings/README.md>`_ to avoid duplicated effort."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:11
msgid "The Ansible integration Test system."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:13
msgid "Tests for playbooks, by playbooks."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:15
msgid "Some tests may require credentials.  Credentials may be specified with `credentials.yml`."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:17
msgid "Some tests may require root."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:24
msgid "Quick Start"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:26
msgid "It is highly recommended that you install and activate the ``argcomplete`` python package. It provides tab completion in ``bash`` for the ``ansible-test`` test runner."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:30
msgid "Configuration"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:33
msgid "ansible-test command"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:35
msgid "The example below assumes ``bin/`` is in your ``$PATH``. An easy way to achieve that is to initialize your environment with the ``env-setup`` command::"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:41
msgid "You can also call ``ansible-test`` with the full path::"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:46
msgid "integration_config.yml"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:48
msgid "Making your own version of ``integration_config.yml`` can allow for setting some tunable parameters to help run the tests better in your environment.  Some tests (for example, cloud tests) will only run when access credentials are provided.  For more information about supported credentials, refer to the various ``cloud-config-*.template`` files in the ``test/integration/`` directory."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:55
msgid "Prerequisites"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:57
msgid "Some tests assume things like hg, svn, and git are installed, and in path.  Some tests (such as those for Amazon Web Services) need separate definitions, which will be covered later in this document."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:61
msgid "(Complete list pending)"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:64
msgid "Non-destructive Tests"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:66
msgid "These tests will modify files in subdirectories, but will not do things that install or remove packages or things outside of those test subdirectories.  They will also not reconfigure or bounce system services."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:69
msgid "Running integration tests within Docker"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:71
msgid "To protect your system from any potential changes caused by integration tests, and to ensure a sensible set of dependencies are available we recommend that you always run integration tests with the ``--docker`` option, for example ``--docker centos8``. See the `list of supported docker images <https://github.com/ansible/ansible/blob/devel/test/lib/ansible_test/_data/completion/docker.txt>`_ for options (the ``default`` image is used for sanity and unit tests, as well as for platform independent integration tests such as those for cloud modules)."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:73
msgid "Avoiding pulling new Docker images"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:75
msgid "Use the ``--docker-no-pull`` option to avoid pulling the latest container image. This is required when using custom local images that are not available for download."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:77
msgid "Run as follows for all POSIX platform tests executed by our CI system in a fedora32 docker container::"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:81
msgid "You can target a specific tests as well, such as for individual modules::"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:85
msgid "You can use the ``-v`` option to make the output more verbose::"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:89
msgid "Use the following command to list all the available targets::"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:93
msgid "Bash users"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:95
msgid "If you use ``bash`` with ``argcomplete``, obtain a full list by doing: ``ansible-test integration <tab><tab>``"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:98
msgid "Destructive Tests"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:100
msgid "These tests are allowed to install and remove some trivial packages.  You will likely want to devote these to a virtual environment, such as Docker.  They won't reformat your filesystem::"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:106
msgid "Windows Tests"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:108
msgid "These tests exercise the ``winrm`` connection plugin and Windows modules.  You'll need to define an inventory with a remote Windows 2008 or 2012 Server to use for testing, and enable PowerShell Remoting to continue."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:112
msgid "Running these tests may result in changes to your Windows host, so don't run them against a production/critical Windows environment."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:115
msgid "Enable PowerShell Remoting (run on the Windows host via Remote Desktop)::"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:119
msgid "Define Windows inventory::"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:124
msgid "Run the Windows tests executed by our CI system::"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:129
msgid "Tests in Docker containers"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:131
msgid "If you have a Linux system with Docker installed, running integration tests using the same Docker containers used by the Ansible continuous integration (CI) system is recommended."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:134
msgid "Docker on non-Linux"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:136
msgid "Using Docker Engine to run Docker on a non-Linux host (such as macOS) is not recommended. Some tests may fail, depending on the image used for testing. Using the ``--docker-privileged`` option when running ``integration`` (not ``network-integration`` or ``windows-integration``) may resolve the issue."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:141
msgid "Running Integration Tests"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:143
msgid "To run all CI integration test targets for POSIX platforms in a Ubuntu 18.04 container::"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:147
msgid "You can also run specific tests or select a different Linux distribution. For example, to run tests for the ``ping`` module on a Ubuntu 18.04 container::"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:153
msgid "Container Images"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:156
msgid "Python 2"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:158
msgid "Most container images are for testing with Python 2:"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:160
msgid "centos6"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:161
msgid "centos7"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:162
msgid "fedora28"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:163
msgid "opensuse15py2"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:164
msgid "ubuntu1404"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:165
msgid "ubuntu1604"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:168
msgid "Python 3"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:170
msgid "To test with Python 3 use the following images:"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:172
msgid "centos8"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:173
msgid "fedora32"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:174
msgid "opensuse15"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:175
msgid "ubuntu1804"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:179
msgid "Legacy Cloud Tests"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:181
msgid "Some of the cloud tests run as normal integration tests, and others run as legacy tests; see the :ref:`testing_integration_legacy` page for more information."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:186
msgid "Other configuration for Cloud Tests"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:188
msgid "In order to run some tests, you must provide access credentials in a file named ``cloud-config-aws.yml`` or ``cloud-config-cs.ini`` in the test/integration directory. Corresponding .template files are available for for syntax help.  The newer AWS tests now use the file test/integration/cloud-config-aws.yml"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:194
#: ../../rst/dev_guide/testing_integration_legacy.rst:58
msgid "IAM policies for AWS"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:196
msgid "Ansible needs fairly wide ranging powers to run the tests in an AWS account.  This rights can be provided to a dedicated user. These need to be configured before running the test."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:199
msgid "testing-policies"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:201
msgid "The GitHub repository `mattclay/aws-terminator <https://github.com/mattclay/aws-terminator/>`_ contains two sets of policies used for all existing AWS module integratoin tests. The `hacking/aws_config/setup_iam.yml` playbook can be used to setup two groups:"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:205
msgid "`ansible-integration-ci` will have the policies applied necessary to run any integration tests not marked as `unsupported` and are designed to mirror those used by Ansible's CI."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:208
msgid "`ansible-integration-unsupported` will have the additional policies applied necessary to run the integration tests marked as `unsupported` including tests for managing IAM roles, users and groups."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:212
msgid "Once the groups have been created, you'll need to create a user and make the user a member of these groups. The policies are designed to minimize the rights of that user.  Please note that while this policy does limit the user to one region, this does not fully restrict the user (primarily due to the limitations of the Amazon ARN notation). The user will still have wide privileges for viewing account definitions, and will also able to manage some resources that are not related to testing (for example, AWS lambdas with different names).  Tests should not be run in a primary production account in any case."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:220
#: ../../rst/dev_guide/testing_integration_legacy.rst:76
msgid "Other Definitions required"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:222
#: ../../rst/dev_guide/testing_integration_legacy.rst:78
msgid "Apart from installing the policy and giving it to the user identity running the tests, a lambda role `ansible_integration_tests` has to be created which has lambda basic execution privileges."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:228
msgid "Network Tests"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:230
msgid "For guidance on writing network test see :ref:`testing_resource_modules`."
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:234
msgid "Where to find out more"
msgstr ""

#: ../../rst/dev_guide/testing_integration.rst:236
msgid "If you'd like to know more about the plans for improving testing Ansible, join the `Testing Working Group <https://github.com/ansible/community/blob/master/meetings/README.md>`_."
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:7
msgid "Testing using the Legacy Integration system"
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:11
msgid "This page details how to run the integration tests that haven't been ported to the new ``ansible-test`` framework."
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:13
msgid "The following areas are still tested using the legacy ``make tests`` command:"
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:15
msgid "amazon (some)"
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:16
msgid "azure"
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:17
msgid "cloudflare"
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:18
msgid "cloudscale"
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:19
msgid "cloudstack"
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:20
msgid "consul"
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:21
msgid "exoscale"
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:22
msgid "gce"
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:23
msgid "jenkins"
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:24
msgid "rackspace"
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:26
msgid "Over time the above list will be reduced as tests are ported to the ``ansible-test`` framework."
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:30
msgid "Running Cloud Tests"
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:32
msgid "Cloud tests exercise capabilities of cloud modules (for example, ec2_key).  These are not 'tests run in the cloud' so much as tests that leverage the cloud modules and are organized by cloud provider."
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:36
msgid "Some AWS tests may use environment variables. It is recommended to either unset any AWS environment variables( such as ``AWS_DEFAULT_PROFILE``, ``AWS_SECRET_ACCESS_KEY``, and so on) or be sure that the environment variables match the credentials provided in ``credentials.yml`` to ensure the tests run with consistency to their full capability on the expected account. See `AWS CLI docs <https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html>`_ for information on creating a profile."
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:38
msgid "Subsets of tests may be run by ``#commenting`` out unnecessary roles in the appropriate playbook, such as ``test/integration/amazon.yml``."
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:40
msgid "In order to run cloud tests, you must provide access credentials in a file named ``credentials.yml``. A sample credentials file named ``credentials.template`` is available for syntax help."
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:44
msgid "Provide cloud credentials::"
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:51
msgid "Other configuration"
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:53
msgid "In order to run some tests, you must provide access credentials in a file named ``credentials.yml``. A sample credentials file named ``credentials.template`` is available for syntax help."
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:60
msgid "In order to run the tests in an AWS account ansible needs fairly wide ranging powers which can be provided to a dedicated user or temporary credentials using a specific policy configured in the AWS account."
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:65
msgid "testing-iam-policy.json.j2"
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:67
msgid "The testing-iam-policy.json.j2 file contains a policy which can be given to the user running the tests to give close to minimum rights required to run the tests.  Please note that this does not fully restrict the user; The user has wide privileges for viewing account definitions and is also able to manage some resources that are not related to testing (for example, AWS lambdas with different names) primarily due to the limitations of the Amazon ARN notation.  At the very least the policy limits the user to one region, however tests should not be run in a primary production account in any case."
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:84
#: ../../rst/dev_guide/testing_units.rst:24
msgid "Running Tests"
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:86
msgid "The tests are invoked via a ``Makefile``."
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:88
msgid "If you haven't already got Ansible available use the local checkout by doing::"
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:92
msgid "Run the tests by doing::"
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:102
msgid "Possible cost of running cloud tests"
msgstr ""

#: ../../rst/dev_guide/testing_integration_legacy.rst:104
msgid "Running cloud integration tests will create and destroy cloud resources. Running these tests may result in additional fees associated with your cloud account. Care is taken to ensure that created resources are removed. However, it is advisable to inspect your AWS console to ensure no unexpected resources are running."
msgstr ""

#: ../../rst/dev_guide/testing_pep8.rst:7
msgid "PEP 8"
msgstr ""

#: ../../rst/dev_guide/testing_pep8.rst:11
msgid "`PEP 8`_ style guidelines are enforced by `pycodestyle`_ on all python files in the repository by default."
msgstr ""

#: ../../rst/dev_guide/testing_pep8.rst:14
msgid "Running Locally"
msgstr ""

#: ../../rst/dev_guide/testing_pep8.rst:16
msgid "The `PEP 8`_ check can be run locally with::"
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:9
msgid "This document describes how to:"
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:11
msgid "Run tests locally using ``ansible-test``"
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:12
msgid "Extend"
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:20
msgid "There are no special requirements for running ``ansible-test`` on Python 2.7 or later. The ``argparse`` package is required for Python 2.6. The requirements for each ``ansible-test`` command are covered later."
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:26
msgid "Test Environments"
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:28
msgid "Most ``ansible-test`` commands support running in one or more isolated test environments to simplify testing."
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:32
msgid "Remote"
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:34
msgid "The ``--remote`` option runs tests in a cloud hosted environment. An API key is required to use this feature."
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:37
msgid "Recommended for integration tests."
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:39
msgid "See the `list of supported platforms and versions <https://github.com/ansible/ansible/blob/devel/test/lib/ansible_test/_data/completion/remote.txt>`_ for additional details."
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:42
msgid "Environment Variables"
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:44
msgid "When using environment variables to manipulate tests there some limitations to keep in mind. Environment variables are:"
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:46
msgid "Not propagated from the host to the test environment when using the ``--docker`` or ``--remote`` options."
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:47
msgid "Not exposed to the test environment unless whitelisted in ``test/lib/ansible_test/_internal/util.py`` in the ``common_environment`` function."
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:49
msgid "Example: ``ANSIBLE_KEEP_REMOTE_FILES=1`` can be set when running ``ansible-test integration --venv``. However, using the ``--docker`` option would require running ``ansible-test shell`` to gain access to the Docker environment. Once at the shell prompt, the environment variable could be set and the tests executed. This is useful for debugging tests inside a container by following the :ref:`Debugging AnsibleModule-based modules <debugging_modules>` instructions."
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:55
msgid "Interactive Shell"
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:57
msgid "Use the ``ansible-test shell`` command to get an interactive shell in the same environment used to run tests. Examples:"
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:59
msgid "``ansible-test shell --docker`` - Open a shell in the default docker container."
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:60
msgid "``ansible-test shell --venv --python 3.6`` - Open a shell in a Python 3.6 virtual environment."
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:64
msgid "Code Coverage"
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:66
msgid "Code coverage reports make it easy to identify untested code for which more tests should be written.  Online reports are available but only cover the ``devel`` branch (see :ref:`developing_testing`).  For new code local reports are needed."
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:70
msgid "Add the ``--coverage`` option to any test command to collect code coverage data.  If you aren't using the ``--venv`` or ``--docker`` options which create an isolated python environment then you may have to use the ``--requirements`` option to ensure that the correct version of the coverage module is installed::"
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:81
#: ../../rst/dev_guide/testing_units.rst:191
msgid "Reports can be generated in several different formats:"
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:83
#: ../../rst/dev_guide/testing_units.rst:193
msgid "``ansible-test coverage report`` - Console report."
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:84
#: ../../rst/dev_guide/testing_units.rst:194
msgid "``ansible-test coverage html`` - HTML report."
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:85
#: ../../rst/dev_guide/testing_units.rst:195
msgid "``ansible-test coverage xml`` - XML report."
msgstr ""

#: ../../rst/dev_guide/testing_running_locally.rst:87
msgid "To clear data between test runs, use the ``ansible-test coverage erase`` command. For a full list of features see the online help::"
msgstr ""

#: ../../rst/dev_guide/testing_sanity.rst:11
msgid "Sanity tests are made up of scripts and tools used to perform static code analysis. The primary purpose of these tests is to enforce Ansible coding standards and requirements."
msgstr ""

#: ../../rst/dev_guide/testing_sanity.rst:14
msgid "Tests are run with ``ansible-test sanity``. All available tests are run unless the ``--test`` option is used."
msgstr ""

#: ../../rst/dev_guide/testing_sanity.rst:19
msgid "How to run"
msgstr ""

#: ../../rst/dev_guide/testing_sanity.rst:22
msgid "To run sanity tests using docker, always use the default docker image by passing the ``--docker`` or ``--docker default`` argument."
msgstr ""

#: ../../rst/dev_guide/testing_sanity.rst:26
msgid "When using docker and the ``--base-branch`` argument, also use the ``--docker-keep-git`` argument to avoid git related errors."
msgstr ""

#: ../../rst/dev_guide/testing_sanity.rst:49
#: ../../rst/dev_guide/testing_units.rst:17
msgid "Available Tests"
msgstr ""

#: ../../rst/dev_guide/testing_sanity.rst:51
msgid "Tests can be listed with ``ansible-test sanity --list-tests``."
msgstr ""

#: ../../rst/dev_guide/testing_sanity.rst:53
msgid "See the full list of :ref:`sanity tests <all_sanity_tests>`, which details the various tests and details how to fix identified issues."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:7
msgid "Unit Tests"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:9
msgid "Unit tests are small isolated tests that target a specific library or module.  Unit tests in Ansible are currently the only way of driving tests from python within Ansible's continuous integration process. This means that in some circumstances the tests may be a bit wider than just units."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:19
msgid "Unit tests can be found in `test/units <https://github.com/ansible/ansible/tree/devel/test/units>`_. Notice that the directory structure of the tests matches that of ``lib/ansible/``."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:27
msgid "To run unit tests using docker, always use the default docker image by passing the ``--docker`` or ``--docker default`` argument."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:30
msgid "The Ansible unit tests can be run across the whole code base by doing:"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:50
msgid "If you are running unit tests against things other than modules, such as module utilities, specify the whole file path:"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:56
msgid "For advanced usage see the online help::"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:60
msgid "You can also run tests in Ansible's continuous integration system by opening a pull request.  This will automatically determine which tests to run based on the changes made in your pull request."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:68
msgid "If you are running ``ansible-test`` with the ``--docker`` or ``--venv`` option you do not need to install dependencies manually."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:70
msgid "Otherwise you can install dependencies using the ``--requirements`` option, which will install all the required dependencies needed for unit tests. For example:"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:78
msgid "The list of unit test requirements can be found at `test/units/requirements.txt <https://github.com/ansible/ansible/tree/devel/test/units/requirements.txt>`_."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:81
msgid "This does not include the list of unit test requirements for ``ansible-test`` itself, which can be found at `test/lib/ansible_test/_data/requirements/units.txt <https://github.com/ansible/ansible/tree/devel/test/lib/ansible_test/_data/requirements/units.txt>`_."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:85
msgid "See also the `constraints <https://github.com/ansible/ansible/blob/devel/test/lib/ansible_test/_data/requirements/constraints.txt>`_ applicable to all test commands."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:91
msgid "Extending unit tests"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:94
msgid "What a unit test isn't"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:96
msgid "If you start writing a test that requires external services then you may be writing an integration test, rather than a unit test."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:101
msgid "Structuring Unit Tests"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:103
msgid "Ansible drives unit tests through `pytest <https://docs.pytest.org/en/latest/>`_. This means that tests can either be written a simple functions which are included in any file name like ``test_<something>.py`` or as classes."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:107
msgid "Here is an example of a function::"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:117
msgid "Here is an example of a class::"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:137
msgid "Both methods work fine in most circumstances; the function-based interface is simpler and quicker and so that's probably where you should start when you are just trying to add a few basic tests for a module.  The class-based test allows more tidy set up and tear down of pre-requisites, so if you have many test cases for your module you may want to refactor to use that."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:143
msgid "Assertions using the simple ``assert`` function inside the tests will give full information on the cause of the failure with a trace-back of functions called during the assertion.  This means that plain asserts are recommended over other external assertion libraries."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:148
msgid "A number of the unit test suites include functions that are shared between several modules, especially in the networking arena.  In these cases a file is created in the same directory, which is then included directly."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:154
msgid "Module test case common code"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:156
msgid "Keep common code as specific as possible within the `test/units/` directory structure. Don't import common unit test code from directories outside the current or parent directories."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:159
msgid "Don't import other unit tests from a unit test. Any common code should be in dedicated files that aren't themselves tests."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:164
msgid "Fixtures files"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:166
msgid "To mock out fetching results from devices, or provide other complex data structures that come from external libraries, you can use ``fixtures`` to read in pre-generated data."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:169
msgid "You can check how `fixtures <https://github.com/ansible/ansible/tree/devel/test/units/module_utils/facts/fixtures/cpuinfo>`_ are used in `cpuinfo fact tests <https://github.com/ansible/ansible/blob/9f72ff80e3fe173baac83d74748ad87cb6e20e64/test/units/module_utils/facts/hardware/linux_data.py#L384>`_"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:172
msgid "If you are simulating APIs you may find that Python placebo is useful.  See :ref:`testing_units_modules` for more information."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:177
msgid "Code Coverage For New or Updated Unit Tests"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:178
msgid "New code will be missing from the codecov.io coverage reports (see :ref:`developing_testing`), so local reporting is needed.  Most ``ansible-test`` commands allow you to collect code coverage; this is particularly useful when to indicate where to extend testing."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:182
msgid "To collect coverage data add the ``--coverage`` argument to your ``ansible-test`` command line:"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:189
msgid "Results will be written to ``test/results/reports/coverage/index.html``"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:197
msgid "To clear data between test runs, use the ``ansible-test coverage erase`` command.  See :ref:`testing_running_locally` for more information about generating coverage reports."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:204
msgid ":ref:`testing_units_modules`"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:205
msgid "Special considerations for unit testing modules"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:206
#: ../../rst/dev_guide/testing_units_modules.rst:543
msgid ":ref:`testing_running_locally`"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:207
#: ../../rst/dev_guide/testing_units_modules.rst:544
msgid "Running tests locally including gathering and reporting coverage data"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:208
#: ../../rst/dev_guide/testing_units_modules.rst:547
msgid "`Python 3 documentation - 26.4. unittest — Unit testing framework <https://docs.python.org/3/library/unittest.html>`_"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:209
#: ../../rst/dev_guide/testing_units_modules.rst:548
msgid "The documentation of the unittest framework in python 3"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:210
#: ../../rst/dev_guide/testing_units_modules.rst:549
msgid "`Python 2 documentation - 25.3. unittest — Unit testing framework <https://docs.python.org/3/library/unittest.html>`_"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:211
#: ../../rst/dev_guide/testing_units_modules.rst:550
msgid "The documentation of the earliest supported unittest framework - from Python 2.6"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:212
#: ../../rst/dev_guide/testing_units_modules.rst:551
msgid "`pytest: helps you write better programs <https://docs.pytest.org/en/latest/>`_"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:213
#: ../../rst/dev_guide/testing_units_modules.rst:552
msgid "The documentation of pytest - the framework actually used to run Ansible unit tests"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:7
msgid "Unit Testing Ansible Modules"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:16
msgid "This document explains why, how and when you should use unit tests for Ansible modules. The document doesn't apply to other parts of Ansible for which the recommendations are normally closer to the Python standard. There is basic documentation for Ansible unit tests in the developer guide :ref:`testing_units`. This document should be readable for a new Ansible module author. If you find it incomplete or confusing, please open a bug or ask for help on Ansible IRC."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:24
msgid "What Are Unit Tests?"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:26
msgid "Ansible includes a set of unit tests in the :file:`test/units` directory. These tests primarily cover the internals but can also cover Ansible modules. The structure of the unit tests matches the structure of the code base, so the tests that reside in the :file:`test/units/modules/` directory are organized by module groups."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:31
msgid "Integration tests can be used for most modules, but there are situations where cases cannot be verified using integration tests. This means that Ansible unit test cases may extend beyond testing only minimal units and in some cases will include some level of functional testing."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:38
msgid "Why Use Unit Tests?"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:40
msgid "Ansible unit tests have advantages and disadvantages. It is important to understand these. Advantages include:"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:43
msgid "Most unit tests are much faster than most Ansible integration tests. The complete suite of unit tests can be run regularly by a developer on their local system."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:45
msgid "Unit tests can be run by developers who don't have access to the system which the module is designed to work on, allowing a level of verification that changes to core functions haven't broken module expectations."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:48
msgid "Unit tests can easily substitute system functions allowing testing of software that would be impractical. For example, the ``sleep()`` function can be replaced and we check that a ten minute sleep was called without actually waiting ten minutes."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:51
msgid "Unit tests are run on different Python versions. This allows us to ensure that the code behaves in the same way on different Python versions."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:54
msgid "There are also some potential disadvantages of unit tests. Unit tests don't normally directly test actual useful valuable features of software, instead just internal implementation"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:58
msgid "Unit tests that test the internal, non-visible features of software may make refactoring difficult if those internal features have to change (see also naming in How below)"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:61
msgid "Even if the internal feature is working correctly it is possible that there will be a problem between the internal code tested and the actual result delivered to the user"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:64
msgid "Normally the Ansible integration tests (which are written in Ansible YAML) provide better testing for most module functionality. If those tests already test a feature and perform well there may be little point in providing a unit test covering the same area as well."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:69
msgid "When To Use Unit Tests"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:71
msgid "There are a number of situations where unit tests are a better choice than integration tests. For example, testing things which are impossible, slow or very difficult to test with integration tests, such as:"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:75
msgid "Forcing rare / strange / random situations that can't be forced, such as specific network failures and exceptions"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:77
msgid "Extensive testing of slow configuration APIs"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:78
msgid "Situations where the integration tests cannot be run as part of the main Ansible continuous integration running in Shippable."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:84
msgid "Providing quick feedback"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:87
msgid "A single step of the rds_instance test cases can take up to 20 minutes (the time to create an RDS instance in Amazon). The entire test run can last for well over an hour. All 16 of the unit tests complete execution in less than 2 seconds."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:92
msgid "The time saving provided by being able to run the code in a unit test makes it worth creating a unit test when bug fixing a module, even if those tests do not often identify problems later. As a basic goal, every module should have at least one unit test which will give quick feedback in easy cases without having to wait for the integration tests to complete."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:99
msgid "Ensuring correct use of external interfaces"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:101
msgid "Unit tests can check the way in which external services are run to ensure that they match specifications or are as efficient as possible *even when the final output will not be changed*."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:105
msgid "Package managers are often far more efficient when installing multiple packages at once rather than each package separately. The final result is the same: the packages are all installed, so the efficiency is difficult to verify through integration tests. By providing a mock package manager and verifying that it is called once, we can build a valuable test for module efficiency."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:111
msgid "Another related use is in the situation where an API has versions which behave differently. A programmer working on a new version may change the module to work with the new API version and unintentionally break the old version. A test case which checks that the call happens properly for the old version can help avoid the problem. In this situation it is very important to include version numbering in the test case name (see `Naming unit tests`_ below)."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:119
msgid "Providing specific design tests"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:121
msgid "By building a requirement for a particular part of the code and then coding to that requirement, unit tests _can_ sometimes improve the code and help future developers understand that code."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:125
msgid "Unit tests that test internal implementation details of code, on the other hand, almost always do more harm than good.  Testing that your packages to install are stored in a list would slow down and confuse a future developer who might need to change that list into a dictionary for efficiency. This problem can be reduced somewhat with clear test naming so that the future developer immediately knows to delete the test case, but it is often better to simply leave out the test case altogether and test for a real valuable feature of the code, such as installing all of the packages supplied as arguments to the module."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:135
msgid "How to unit test Ansible modules"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:137
msgid "There are a number of techniques for unit testing modules. Beware that most modules without unit tests are structured in a way that makes testing quite difficult and can lead to very complicated tests which need more work than the code. Effectively using unit tests may lead you to restructure your code. This is often a good thing and leads to better code overall. Good restructuring can make your code clearer and easier to understand."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:145
msgid "Naming unit tests"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:147
msgid "Unit tests should have logical names. If a developer working on the module being tested breaks the test case, it should be easy to figure what the unit test covers from the name. If a unit test is designed to verify compatibility with a specific software or API version then include the version in the name of the unit test."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:152
msgid "As an example, ``test_v2_state_present_should_call_create_server_with_name()`` would be a good name, ``test_create_server()`` would not be."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:157
msgid "Use of Mocks"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:159
msgid "Mock objects (from https://docs.python.org/3/library/unittest.mock.html) can be very useful in building unit tests for special / difficult cases, but they can also lead to complex and confusing coding situations. One good use for mocks would be in simulating an API. As for 'six', the 'mock' python package is bundled with Ansible (use ``import units.compat.mock``)."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:166
msgid "Ensuring failure cases are visible with mock objects"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:168
msgid "Functions like :meth:`module.fail_json` are normally expected to terminate execution. When you run with a mock module object this doesn't happen since the mock always returns another mock from a function call. You can set up the mock to raise an exception as shown above, or you can assert that these functions have not been called in each test. For example::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:177
msgid "This applies not only to calling the main module but almost any other function in a module which gets the module object."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:182
msgid "Mocking of the actual module"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:184
msgid "The setup of an actual module is quite complex (see `Passing Arguments`_ below) and often isn't needed for most functions which use a module. Instead you can use a mock object as the module and create any module attributes needed by the function you are testing. If you do this, beware that the module exit functions need special handling as mentioned above, either by throwing an exception or ensuring that they haven't been called. For example::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:203
msgid "API definition with unit test cases"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:205
msgid "API interaction is usually best tested with the function tests defined in Ansible's integration testing section, which run against the actual API. There are several cases where the unit tests are likely to work better."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:210
msgid "Defining a module against an API specification"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:212
msgid "This case is especially important for modules interacting with web services, which provide an API that Ansible uses but which are beyond the control of the user."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:215
msgid "By writing a custom emulation of the calls that return data from the API, we can ensure that only the features which are clearly defined in the specification of the API are present in the message. This means that we can check that we use the correct parameters and nothing else."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:221
msgid "*Example:  in rds_instance unit tests a simple instance state is defined*::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:229
msgid "This is then used to create a list of states::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:244
msgid "These states are then used as returns from a mock object to ensure that the ``await`` function waits through all of the states that would mean the RDS instance has not yet completed configuration::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:252
msgid "By doing this we check that the ``await`` function will keep waiting through potentially unusual that it would be impossible to reliably trigger through the integration tests but which happen unpredictably in reality."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:257
msgid "Defining a module to work against multiple API versions"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:259
msgid "This case is especially important for modules interacting with many different versions of software; for example, package installation modules that might be expected to work with many different operating system versions."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:263
msgid "By using previously stored data from various versions of an API we can ensure that the code is tested against the actual data which will be sent from that version of the system even when the version is very obscure and unlikely to be available during testing."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:268
msgid "Ansible special cases for unit testing"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:270
msgid "There are a number of special cases for unit testing the environment of an Ansible module. The most common are documented below, and suggestions for others can be found by looking at the source code of the existing unit tests or asking on the Ansible IRC channel or mailing lists."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:276
msgid "Module argument processing"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:278
msgid "There are two problems with running the main function of a module:"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:280
msgid "Since the module is supposed to accept arguments on ``STDIN`` it is a bit difficult to set up the arguments correctly so that the module will get them as parameters."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:282
msgid "All modules should finish by calling either the :meth:`module.fail_json` or :meth:`module.exit_json`, but these won't work correctly in a testing environment."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:286
msgid "Passing Arguments"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:291
msgid "To pass arguments to a module correctly, use the ``set_module_args`` method which accepts a dictionary as its parameter. Module creation and argument processing is handled through the :class:`AnsibleModule` object in the basic section of the utilities. Normally this accepts input on ``STDIN``, which is not convenient for unit testing. When the special variable is set it will be treated as if the input came on ``STDIN`` to the module. Simply call that function before setting up your module::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:309
msgid "Handling exit correctly"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:314
msgid "The :meth:`module.exit_json` function won't work properly in a testing environment since it writes error information to ``STDOUT`` upon exit, where it is difficult to examine. This can be mitigated by replacing it (and :meth:`module.fail_json`) with a function that raises an exception::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:324
msgid "Now you can ensure that the first function called is the one you expected simply by testing for the correct exception::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:337
msgid "The same technique can be used to replace :meth:`module.fail_json` (which is used for failure returns from modules) and for the ``aws_module.fail_json_aws()`` (used in modules for Amazon Web Services)."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:342
msgid "Running the main function"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:344
msgid "If you do want to run the actual main function of a module you must import the module, set the arguments as above, set up the appropriate exit exception and then run the module::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:362
msgid "Handling calls to external executables"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:364
msgid "Module must use :meth:`AnsibleModule.run_command` in order to execute an external command. This method needs to be mocked:"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:367
msgid "Here is a simple mock of :meth:`AnsibleModule.run_command` (taken from :file:`test/units/modules/packaging/os/test_rhn_register.py`)::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:381
msgid "A Complete Example"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:383
msgid "The following example is a complete skeleton that reuses the mocks explained above and adds a new mock for :meth:`Ansible.get_bin_path`::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:469
msgid "Restructuring modules to enable testing module set up and other processes"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:471
msgid "Often modules have a ``main()`` function which sets up the module and then performs other actions. This can make it difficult to check argument processing. This can be made easier by moving module configuration and initialization into a separate function. For example::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:501
msgid "This now makes it possible to run tests against the module initiation function::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:513
msgid "See also ``test/units/module_utils/aws/test_rds.py``"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:515
msgid "Note that the ``argument_spec`` dictionary is visible in a module variable. This has advantages, both in allowing explicit testing of the arguments and in allowing the easy creation of module objects for testing."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:519
msgid "The same restructuring technique can be valuable for testing other functionality, such as the part of the module which queries the object that the module configures."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:522
msgid "Traps for maintaining Python 2 compatibility"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:524
msgid "If you use the ``mock`` library from the Python 2.6 standard library, a number of the assert functions are missing but will return as if successful. This means that test cases should take great care *not* use functions marked as _new_ in the Python 3 documentation, since the tests will likely always succeed even if the code is broken when run on older versions of Python."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:529
msgid "A helpful development approach to this should be to ensure that all of the tests have been run under Python 2.6 and that each assertion in the test cases has been checked to work by breaking the code in Ansible to trigger that failure."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:533
msgid "Maintain Python 2.6 compatibility"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:535
msgid "Please remember that modules need to maintain compatibility with Python 2.6 so the unittests for modules should also be compatible with Python 2.6."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:542
msgid "Ansible unit tests documentation"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:546
msgid "Get started developing a module"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:555
msgid "`Testing Your Code (from The Hitchhiker's Guide to Python!) <https://docs.python-guide.org/writing/tests/>`_"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:556
msgid "General advice on testing Python code"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:558
msgid "`Uncle Bob's many videos on YouTube <https://www.youtube.com/watch?v=QedpQjxBPMA&list=PLlu0CT-JnSasQzGrGzddSczJQQU7295D2>`_"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:558
msgid "Unit testing is a part of the of various philosophies of software development, including Extreme Programming (XP), Clean Coding.  Uncle Bob talks through how to benefit from this"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:560
msgid "`\"Why Most Unit Testing is Waste\" <https://rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf>`_"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:561
msgid "An article warning against the costs of unit testing"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:562
msgid "`'A Response to \"Why Most Unit Testing is Waste\"' <https://henrikwarne.com/2014/09/04/a-response-to-why-most-unit-testing-is-waste/>`_"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:563
msgid "An response pointing to how to maintain the value of unit tests"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:11
msgid "Python program to help test or validate Ansible modules."
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:13
msgid "``validate-modules`` is one of the ``ansible-test`` Sanity Tests, see :ref:`testing_sanity` for more information."
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:15
msgid "Originally developed by Matt Martz (@sivel)"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:19
msgid "Usage"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:28
msgid "Help"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:53
msgid "Extending validate-modules"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:55
msgid "The ``validate-modules`` tool has a `schema.py <https://github.com/ansible/ansible/blob/devel/test/lib/ansible_test/_data/sanity/validate-modules/validate_modules/schema.py>`_ that is used to validate the YAML blocks, such as ``DOCUMENTATION`` and ``RETURNS``."
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:59
msgid "Codes"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:62
msgid "**Error Code**"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:62
msgid "**Type**"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:62
msgid "**Level**"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:62
msgid "**Sample Message**"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:64
msgid "ansible-deprecated-version"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:64
#: ../../rst/dev_guide/testing_validate-modules.rst:66
#: ../../rst/dev_guide/testing_validate-modules.rst:67
#: ../../rst/dev_guide/testing_validate-modules.rst:68
#: ../../rst/dev_guide/testing_validate-modules.rst:69
#: ../../rst/dev_guide/testing_validate-modules.rst:70
#: ../../rst/dev_guide/testing_validate-modules.rst:71
#: ../../rst/dev_guide/testing_validate-modules.rst:72
#: ../../rst/dev_guide/testing_validate-modules.rst:73
#: ../../rst/dev_guide/testing_validate-modules.rst:74
#: ../../rst/dev_guide/testing_validate-modules.rst:75
#: ../../rst/dev_guide/testing_validate-modules.rst:76
#: ../../rst/dev_guide/testing_validate-modules.rst:77
#: ../../rst/dev_guide/testing_validate-modules.rst:78
#: ../../rst/dev_guide/testing_validate-modules.rst:79
#: ../../rst/dev_guide/testing_validate-modules.rst:82
#: ../../rst/dev_guide/testing_validate-modules.rst:85
#: ../../rst/dev_guide/testing_validate-modules.rst:86
#: ../../rst/dev_guide/testing_validate-modules.rst:87
#: ../../rst/dev_guide/testing_validate-modules.rst:88
#: ../../rst/dev_guide/testing_validate-modules.rst:89
#: ../../rst/dev_guide/testing_validate-modules.rst:90
#: ../../rst/dev_guide/testing_validate-modules.rst:91
#: ../../rst/dev_guide/testing_validate-modules.rst:92
#: ../../rst/dev_guide/testing_validate-modules.rst:94
#: ../../rst/dev_guide/testing_validate-modules.rst:95
#: ../../rst/dev_guide/testing_validate-modules.rst:98
#: ../../rst/dev_guide/testing_validate-modules.rst:99
#: ../../rst/dev_guide/testing_validate-modules.rst:100
#: ../../rst/dev_guide/testing_validate-modules.rst:101
#: ../../rst/dev_guide/testing_validate-modules.rst:102
#: ../../rst/dev_guide/testing_validate-modules.rst:110
#: ../../rst/dev_guide/testing_validate-modules.rst:111
#: ../../rst/dev_guide/testing_validate-modules.rst:112
#: ../../rst/dev_guide/testing_validate-modules.rst:113
#: ../../rst/dev_guide/testing_validate-modules.rst:114
#: ../../rst/dev_guide/testing_validate-modules.rst:118
#: ../../rst/dev_guide/testing_validate-modules.rst:119
#: ../../rst/dev_guide/testing_validate-modules.rst:120
#: ../../rst/dev_guide/testing_validate-modules.rst:121
#: ../../rst/dev_guide/testing_validate-modules.rst:122
#: ../../rst/dev_guide/testing_validate-modules.rst:123
#: ../../rst/dev_guide/testing_validate-modules.rst:124
#: ../../rst/dev_guide/testing_validate-modules.rst:125
#: ../../rst/dev_guide/testing_validate-modules.rst:128
#: ../../rst/dev_guide/testing_validate-modules.rst:132
#: ../../rst/dev_guide/testing_validate-modules.rst:133
#: ../../rst/dev_guide/testing_validate-modules.rst:134
#: ../../rst/dev_guide/testing_validate-modules.rst:137
#: ../../rst/dev_guide/testing_validate-modules.rst:139
#: ../../rst/dev_guide/testing_validate-modules.rst:145
#: ../../rst/dev_guide/testing_validate-modules.rst:146
#: ../../rst/dev_guide/testing_validate-modules.rst:147
#: ../../rst/dev_guide/testing_validate-modules.rst:148
#: ../../rst/dev_guide/testing_validate-modules.rst:149
#: ../../rst/dev_guide/testing_validate-modules.rst:150
#: ../../rst/dev_guide/testing_validate-modules.rst:151
#: ../../rst/dev_guide/testing_validate-modules.rst:152
#: ../../rst/dev_guide/testing_validate-modules.rst:153
#: ../../rst/dev_guide/testing_validate-modules.rst:154
#: ../../rst/dev_guide/testing_validate-modules.rst:155
#: ../../rst/dev_guide/testing_validate-modules.rst:156
#: ../../rst/dev_guide/testing_validate-modules.rst:157
#: ../../rst/dev_guide/testing_validate-modules.rst:158
#: ../../rst/dev_guide/testing_validate-modules.rst:159
#: ../../rst/dev_guide/testing_validate-modules.rst:160
#: ../../rst/dev_guide/testing_validate-modules.rst:161
#: ../../rst/dev_guide/testing_validate-modules.rst:162
#: ../../rst/dev_guide/testing_validate-modules.rst:163
#: ../../rst/dev_guide/testing_validate-modules.rst:164
msgid "Documentation"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:64
#: ../../rst/dev_guide/testing_validate-modules.rst:65
#: ../../rst/dev_guide/testing_validate-modules.rst:66
#: ../../rst/dev_guide/testing_validate-modules.rst:67
#: ../../rst/dev_guide/testing_validate-modules.rst:68
#: ../../rst/dev_guide/testing_validate-modules.rst:69
#: ../../rst/dev_guide/testing_validate-modules.rst:70
#: ../../rst/dev_guide/testing_validate-modules.rst:71
#: ../../rst/dev_guide/testing_validate-modules.rst:72
#: ../../rst/dev_guide/testing_validate-modules.rst:73
#: ../../rst/dev_guide/testing_validate-modules.rst:74
#: ../../rst/dev_guide/testing_validate-modules.rst:75
#: ../../rst/dev_guide/testing_validate-modules.rst:76
#: ../../rst/dev_guide/testing_validate-modules.rst:77
#: ../../rst/dev_guide/testing_validate-modules.rst:78
#: ../../rst/dev_guide/testing_validate-modules.rst:79
#: ../../rst/dev_guide/testing_validate-modules.rst:80
#: ../../rst/dev_guide/testing_validate-modules.rst:81
#: ../../rst/dev_guide/testing_validate-modules.rst:82
#: ../../rst/dev_guide/testing_validate-modules.rst:84
#: ../../rst/dev_guide/testing_validate-modules.rst:85
#: ../../rst/dev_guide/testing_validate-modules.rst:86
#: ../../rst/dev_guide/testing_validate-modules.rst:87
#: ../../rst/dev_guide/testing_validate-modules.rst:88
#: ../../rst/dev_guide/testing_validate-modules.rst:89
#: ../../rst/dev_guide/testing_validate-modules.rst:90
#: ../../rst/dev_guide/testing_validate-modules.rst:91
#: ../../rst/dev_guide/testing_validate-modules.rst:92
#: ../../rst/dev_guide/testing_validate-modules.rst:93
#: ../../rst/dev_guide/testing_validate-modules.rst:94
#: ../../rst/dev_guide/testing_validate-modules.rst:95
#: ../../rst/dev_guide/testing_validate-modules.rst:96
#: ../../rst/dev_guide/testing_validate-modules.rst:97
#: ../../rst/dev_guide/testing_validate-modules.rst:98
#: ../../rst/dev_guide/testing_validate-modules.rst:100
#: ../../rst/dev_guide/testing_validate-modules.rst:101
#: ../../rst/dev_guide/testing_validate-modules.rst:102
#: ../../rst/dev_guide/testing_validate-modules.rst:103
#: ../../rst/dev_guide/testing_validate-modules.rst:104
#: ../../rst/dev_guide/testing_validate-modules.rst:106
#: ../../rst/dev_guide/testing_validate-modules.rst:107
#: ../../rst/dev_guide/testing_validate-modules.rst:108
#: ../../rst/dev_guide/testing_validate-modules.rst:109
#: ../../rst/dev_guide/testing_validate-modules.rst:110
#: ../../rst/dev_guide/testing_validate-modules.rst:112
#: ../../rst/dev_guide/testing_validate-modules.rst:113
#: ../../rst/dev_guide/testing_validate-modules.rst:114
#: ../../rst/dev_guide/testing_validate-modules.rst:115
#: ../../rst/dev_guide/testing_validate-modules.rst:116
#: ../../rst/dev_guide/testing_validate-modules.rst:117
#: ../../rst/dev_guide/testing_validate-modules.rst:118
#: ../../rst/dev_guide/testing_validate-modules.rst:119
#: ../../rst/dev_guide/testing_validate-modules.rst:120
#: ../../rst/dev_guide/testing_validate-modules.rst:121
#: ../../rst/dev_guide/testing_validate-modules.rst:122
#: ../../rst/dev_guide/testing_validate-modules.rst:123
#: ../../rst/dev_guide/testing_validate-modules.rst:124
#: ../../rst/dev_guide/testing_validate-modules.rst:125
#: ../../rst/dev_guide/testing_validate-modules.rst:126
#: ../../rst/dev_guide/testing_validate-modules.rst:127
#: ../../rst/dev_guide/testing_validate-modules.rst:128
#: ../../rst/dev_guide/testing_validate-modules.rst:129
#: ../../rst/dev_guide/testing_validate-modules.rst:130
#: ../../rst/dev_guide/testing_validate-modules.rst:131
#: ../../rst/dev_guide/testing_validate-modules.rst:132
#: ../../rst/dev_guide/testing_validate-modules.rst:133
#: ../../rst/dev_guide/testing_validate-modules.rst:134
#: ../../rst/dev_guide/testing_validate-modules.rst:135
#: ../../rst/dev_guide/testing_validate-modules.rst:137
#: ../../rst/dev_guide/testing_validate-modules.rst:138
#: ../../rst/dev_guide/testing_validate-modules.rst:140
#: ../../rst/dev_guide/testing_validate-modules.rst:141
#: ../../rst/dev_guide/testing_validate-modules.rst:142
#: ../../rst/dev_guide/testing_validate-modules.rst:143
#: ../../rst/dev_guide/testing_validate-modules.rst:144
#: ../../rst/dev_guide/testing_validate-modules.rst:145
#: ../../rst/dev_guide/testing_validate-modules.rst:146
#: ../../rst/dev_guide/testing_validate-modules.rst:147
#: ../../rst/dev_guide/testing_validate-modules.rst:148
#: ../../rst/dev_guide/testing_validate-modules.rst:149
#: ../../rst/dev_guide/testing_validate-modules.rst:150
#: ../../rst/dev_guide/testing_validate-modules.rst:151
#: ../../rst/dev_guide/testing_validate-modules.rst:152
#: ../../rst/dev_guide/testing_validate-modules.rst:153
#: ../../rst/dev_guide/testing_validate-modules.rst:154
#: ../../rst/dev_guide/testing_validate-modules.rst:155
#: ../../rst/dev_guide/testing_validate-modules.rst:156
#: ../../rst/dev_guide/testing_validate-modules.rst:157
#: ../../rst/dev_guide/testing_validate-modules.rst:158
#: ../../rst/dev_guide/testing_validate-modules.rst:159
#: ../../rst/dev_guide/testing_validate-modules.rst:160
#: ../../rst/dev_guide/testing_validate-modules.rst:161
#: ../../rst/dev_guide/testing_validate-modules.rst:162
#: ../../rst/dev_guide/testing_validate-modules.rst:163
#: ../../rst/dev_guide/testing_validate-modules.rst:164
msgid "Error"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:64
msgid "A feature is deprecated and supposed to be removed in the current or an earlier Ansible version"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:65
msgid "ansible-module-not-initialized"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:65
#: ../../rst/dev_guide/testing_validate-modules.rst:97
#: ../../rst/dev_guide/testing_validate-modules.rst:103
#: ../../rst/dev_guide/testing_validate-modules.rst:104
#: ../../rst/dev_guide/testing_validate-modules.rst:107
#: ../../rst/dev_guide/testing_validate-modules.rst:109
#: ../../rst/dev_guide/testing_validate-modules.rst:131
#: ../../rst/dev_guide/testing_validate-modules.rst:138
msgid "Syntax"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:65
msgid "Execution of the module did not result in initialization of AnsibleModule"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:66
msgid "collection-deprecated-version"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:66
msgid "A feature is deprecated and supposed to be removed in the current or an earlier collection version"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:67
msgid "deprecated-date"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:67
msgid "A date before today appears as ``removed_at_date`` or in ``deprecated_aliases``"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:68
msgid "deprecation-mismatch"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:68
msgid "Module marked as deprecated or removed in at least one of the filename, its metadata, or in DOCUMENTATION (setting DOCUMENTATION.deprecated for deprecation or removing all Documentation for removed) but not in all three places."
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:69
msgid "doc-choices-do-not-match-spec"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:69
msgid "Value for \"choices\" from the argument_spec does not match the documentation"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:70
msgid "doc-choices-incompatible-type"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:70
msgid "Choices value from the documentation is not compatible with type defined in the argument_spec"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:71
msgid "doc-default-does-not-match-spec"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:71
msgid "Value for \"default\" from the argument_spec does not match the documentation"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:72
msgid "doc-default-incompatible-type"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:72
msgid "Default value from the documentation is not compatible with type defined in the argument_spec"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:73
msgid "doc-elements-invalid"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:73
msgid "Documentation specifies elements for argument, when \"type\" is not ``list``."
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:74
msgid "doc-elements-mismatch"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:74
msgid "Argument_spec defines elements different than documentation does"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:75
msgid "doc-missing-type"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:75
msgid "Documentation doesn't specify a type but argument in ``argument_spec`` use default type (``str``)"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:76
msgid "doc-required-mismatch"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:76
msgid "argument in argument_spec is required but documentation says it is not, or vice versa"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:77
msgid "doc-type-does-not-match-spec"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:77
msgid "Argument_spec defines type different than documentation does"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:78
msgid "documentation-error"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:78
msgid "Unknown ``DOCUMENTATION`` error"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:79
msgid "documentation-syntax-error"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:79
msgid "Invalid ``DOCUMENTATION`` schema"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:80
msgid "illegal-future-imports"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:80
#: ../../rst/dev_guide/testing_validate-modules.rst:81
#: ../../rst/dev_guide/testing_validate-modules.rst:84
#: ../../rst/dev_guide/testing_validate-modules.rst:105
#: ../../rst/dev_guide/testing_validate-modules.rst:106
#: ../../rst/dev_guide/testing_validate-modules.rst:115
#: ../../rst/dev_guide/testing_validate-modules.rst:116
#: ../../rst/dev_guide/testing_validate-modules.rst:117
#: ../../rst/dev_guide/testing_validate-modules.rst:136
#: ../../rst/dev_guide/testing_validate-modules.rst:140
#: ../../rst/dev_guide/testing_validate-modules.rst:141
#: ../../rst/dev_guide/testing_validate-modules.rst:142
#: ../../rst/dev_guide/testing_validate-modules.rst:143
#: ../../rst/dev_guide/testing_validate-modules.rst:144
msgid "Imports"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:80
msgid "Only the following ``from __future__`` imports are allowed: ``absolute_import``, ``division``, and ``print_function``."
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:81
msgid "import-before-documentation"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:81
msgid "Import found before documentation variables. All imports must appear below ``DOCUMENTATION``/``EXAMPLES``/``RETURN``"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:82
msgid "import-error"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:82
msgid "``Exception`` attempting to import module for ``argument_spec`` introspection"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:83
msgid "import-placement"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:83
msgid "Locations"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:83
#: ../../rst/dev_guide/testing_validate-modules.rst:99
#: ../../rst/dev_guide/testing_validate-modules.rst:105
#: ../../rst/dev_guide/testing_validate-modules.rst:111
#: ../../rst/dev_guide/testing_validate-modules.rst:136
#: ../../rst/dev_guide/testing_validate-modules.rst:139
msgid "Warning"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:83
#: ../../rst/dev_guide/testing_validate-modules.rst:84
msgid "Imports should be directly below ``DOCUMENTATION``/``EXAMPLES``/``RETURN``"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:84
msgid "imports-improper-location"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:85
msgid "incompatible-choices"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:85
msgid "Choices value from the argument_spec is not compatible with type defined in the argument_spec"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:86
msgid "incompatible-default-type"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:86
msgid "Default value from the argument_spec is not compatible with type defined in the argument_spec"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:87
msgid "invalid-argument-name"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:87
msgid "Argument in argument_spec must not be one of 'message', 'syslog_facility' as it is used internally by Ansible Core Engine"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:88
msgid "invalid-argument-spec"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:88
msgid "Argument in argument_spec must be a dictionary/hash when used"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:89
msgid "invalid-argument-spec-options"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:89
msgid "Suboptions in argument_spec are invalid"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:90
msgid "invalid-documentation"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:90
msgid "``DOCUMENTATION`` is not valid YAML"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:91
msgid "invalid-documentation-options"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:91
msgid "``DOCUMENTATION.options`` must be a dictionary/hash when used"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:92
msgid "invalid-examples"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:92
msgid "``EXAMPLES`` is not valid YAML"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:93
msgid "invalid-extension"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:93
msgid "Official Ansible modules must have a ``.py`` extension for python modules or a ``.ps1`` for powershell modules"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:94
msgid "invalid-module-schema"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:94
msgid "``AnsibleModule`` schema validation error"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:95
msgid "invalid-removal-version"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:95
msgid "The version at which a feature is supposed to be removed cannot be parsed (for collections, it must be a semantic version, see https://semver.org/)"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:96
msgid "invalid-requires-extension"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:96
msgid "Module ``#AnsibleRequires -CSharpUtil`` should not end in .cs, Module ``#Requires`` should not end in .psm1"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:97
msgid "last-line-main-call"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:97
msgid "Call to ``main()`` not the last line (or ``removed_module()`` in the case of deprecated & docs only modules)"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:98
msgid "missing-doc-fragment"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:98
msgid "``DOCUMENTATION`` fragment missing"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:99
msgid "missing-existing-doc-fragment"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:99
msgid "Pre-existing ``DOCUMENTATION`` fragment missing"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:100
msgid "missing-documentation"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:100
msgid "No ``DOCUMENTATION`` provided"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:101
msgid "missing-examples"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:101
msgid "No ``EXAMPLES`` provided"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:102
msgid "missing-gplv3-license"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:102
msgid "GPLv3 license header not found"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:103
msgid "missing-if-name-main"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:103
msgid "Next to last line is not ``if __name__ == \"__main__\":``"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:104
msgid "missing-main-call"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:104
msgid "Did not find a call to ``main()`` (or ``removed_module()`` in the case of deprecated & docs only modules)"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:105
msgid "missing-module-utils-basic-import"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:105
msgid "Did not find ``ansible.module_utils.basic`` import"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:106
msgid "missing-module-utils-import-csharp-requirements"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:106
msgid "No ``Ansible.ModuleUtils`` or C# Ansible util requirements/imports found"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:107
msgid "missing-powershell-interpreter"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:107
msgid "Interpreter line is not ``#!powershell``"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:108
msgid "missing-python-doc"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:108
msgid "Missing python documentation file"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:109
msgid "missing-python-interpreter"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:109
msgid "Interpreter line is not ``#!/usr/bin/python``"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:110
msgid "missing-return"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:110
msgid "No ``RETURN`` documentation provided"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:111
msgid "missing-return-legacy"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:111
msgid "No ``RETURN`` documentation provided for legacy module"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:112
msgid "missing-suboption-docs"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:112
msgid "Argument in argument_spec has sub-options but documentation does not define sub-options"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:113
msgid "module-incorrect-version-added"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:113
msgid "Module level ``version_added`` is incorrect"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:114
msgid "module-invalid-version-added"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:114
msgid "Module level ``version_added`` is not a valid version number"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:115
msgid "module-utils-specific-import"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:115
msgid "``module_utils`` imports should import specific components, not ``*``"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:116
msgid "multiple-utils-per-requires"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:116
msgid "``Ansible.ModuleUtils`` requirements do not support multiple modules per statement"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:117
msgid "multiple-csharp-utils-per-requires"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:117
msgid "Ansible C# util requirements do not support multiple utils per statement"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:118
msgid "no-default-for-required-parameter"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:118
msgid "Option is marked as required but specifies a default. Arguments with a default should not be marked as required"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:119
msgid "nonexistent-parameter-documented"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:119
msgid "Argument is listed in DOCUMENTATION.options, but not accepted by the module"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:120
msgid "option-incorrect-version-added"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:120
msgid "``version_added`` for new option is incorrect"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:121
msgid "option-invalid-version-added"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:121
msgid "``version_added`` for option is not a valid version number"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:122
msgid "parameter-invalid"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:122
msgid "Argument in argument_spec is not a valid python identifier"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:123
msgid "parameter-invalid-elements"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:123
msgid "Value for \"elements\" is valid only when value of \"type\" is ``list``"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:124
msgid "implied-parameter-type-mismatch"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:124
msgid "Argument_spec implies ``type=\"str\"`` but documentation defines it as different data type"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:125
msgid "parameter-type-not-in-doc"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:125
msgid "Type value is defined in ``argument_spec`` but documentation doesn't specify a type"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:126
msgid "parameter-alias-repeated"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:126
#: ../../rst/dev_guide/testing_validate-modules.rst:127
#: ../../rst/dev_guide/testing_validate-modules.rst:129
#: ../../rst/dev_guide/testing_validate-modules.rst:130
msgid "Parameters"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:126
msgid "argument in argument_spec has at least one alias specified multiple times in aliases"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:127
msgid "parameter-alias-self"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:127
msgid "argument in argument_spec is specified as its own alias"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:128
msgid "parameter-documented-multiple-times"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:128
msgid "argument in argument_spec with aliases is documented multiple times"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:129
msgid "parameter-list-no-elements"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:129
msgid "argument in argument_spec \"type\" is specified as ``list`` without defining \"elements\""
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:130
msgid "parameter-state-invalid-choice"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:130
msgid "Argument ``state`` includes ``get``, ``list`` or ``info`` as a choice.  Functionality should be in an ``_info`` or (if further conditions apply) ``_facts`` module."
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:131
msgid "python-syntax-error"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:131
msgid "Python ``SyntaxError`` while parsing module"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:132
msgid "removal-version-must-be-major"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:132
msgid "According to the semantic versioning specification (https://semver.org/), the only versions in which features are allowed to be removed are major versions (x.0.0)"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:133
msgid "return-syntax-error"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:133
msgid "``RETURN`` is not valid YAML, ``RETURN`` fragments missing  or invalid"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:134
msgid "return-invalid-version-added"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:134
msgid "``version_added`` for return value is not a valid version number"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:135
msgid "subdirectory-missing-init"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:135
msgid "Ansible module subdirectories must contain an ``__init__.py``"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:136
msgid "try-except-missing-has"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:136
msgid "Try/Except ``HAS_`` expression missing"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:137
msgid "undocumented-parameter"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:137
msgid "Argument is listed in the argument_spec, but not documented in the module"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:138
msgid "unidiomatic-typecheck"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:138
msgid "Type comparison using ``type()`` found. Use ``isinstance()`` instead"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:139
msgid "unknown-doc-fragment"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:139
msgid "Unknown pre-existing ``DOCUMENTATION`` error"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:140
msgid "use-boto3"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:140
msgid "``boto`` import found, new modules should use ``boto3``"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:141
msgid "use-fail-json-not-sys-exit"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:141
msgid "``sys.exit()`` call found. Should be ``exit_json``/``fail_json``"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:142
msgid "use-module-utils-urls"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:142
msgid "``requests`` import found, should use ``ansible.module_utils.urls`` instead"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:143
msgid "use-run-command-not-os-call"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:143
msgid "``os.call`` used instead of ``module.run_command``"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:144
msgid "use-run-command-not-popen"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:144
msgid "``subprocess.Popen`` used instead of ``module.run_command``"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:145
msgid "use-short-gplv3-license"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:145
msgid "GPLv3 license header should be the :ref:`short form <copyright>` for new modules"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:146
msgid "mutually_exclusive-type"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:146
msgid "mutually_exclusive entry contains non-string value"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:147
msgid "mutually_exclusive-collision"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:147
msgid "mutually_exclusive entry has repeated terms"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:148
msgid "mutually_exclusive-unknown"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:148
msgid "mutually_exclusive entry contains option which does not appear in argument_spec (potentially an alias of an option?)"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:149
msgid "required_one_of-type"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:149
msgid "required_one_of entry contains non-string value"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:150
msgid "required_one_of-collision"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:150
msgid "required_one_of entry has repeated terms"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:151
msgid "required_one_of-unknown"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:151
msgid "required_one_of entry contains option which does not appear in argument_spec (potentially an alias of an option?)"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:152
msgid "required_together-type"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:152
msgid "required_together entry contains non-string value"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:153
msgid "required_together-collision"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:153
msgid "required_together entry has repeated terms"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:154
msgid "required_together-unknown"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:154
msgid "required_together entry contains option which does not appear in argument_spec (potentially an alias of an option?)"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:155
msgid "required_if-is_one_of-type"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:155
msgid "required_if entry has a fourth value which is not a bool"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:156
msgid "required_if-requirements-type"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:156
msgid "required_if entry has a third value (requirements) which is not a list or tuple"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:157
msgid "required_if-requirements-collision"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:157
msgid "required_if entry has repeated terms in requirements"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:158
msgid "required_if-requirements-unknown"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:158
msgid "required_if entry's requirements contains option which does not appear in argument_spec (potentially an alias of an option?)"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:159
msgid "required_if-unknown-key"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:159
msgid "required_if entry's key does not appear in argument_spec (potentially an alias of an option?)"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:160
msgid "required_if-key-in-requirements"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:160
msgid "required_if entry contains its key in requirements list/tuple"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:161
msgid "required_if-value-type"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:161
msgid "required_if entry's value is not of the type specified for its key"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:162
msgid "required_by-collision"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:162
msgid "required_by entry has repeated terms"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:163
msgid "required_by-unknown"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:163
msgid "required_by entry contains option which does not appear in argument_spec (potentially an alias of an option?)"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:164
msgid "version-added-must-be-major-or-minor"
msgstr ""

#: ../../rst/dev_guide/testing_validate-modules.rst:164
msgid "According to the semantic versioning specification (https://semver.org/), the only versions in which features are allowed to be added are major and minor versions (x.y.0)"
msgstr ""

